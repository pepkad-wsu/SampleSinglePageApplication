/// 
/// User
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
namespace SampleSinglePageApplication;
public partial interface IDataAccess
{
	DataObjects.User ConvertUserAuto(SampleSinglePageApplication.EFModels.EFModels.User item);
	Task<DataObjects.BooleanResponse> DeleteUserAuto(Guid userId, bool trySave = true);
	Task<DataObjects.BooleanResponse> DeleteUsersAuto(List<Guid> userIds);
	Task<DataObjects.User> GetUserAuto(Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,IQueryable<DataObjects.User>>? convert = null);
	Task<DataObjects.User> GetUserAuto(Guid id,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,IQueryable<DataObjects.User>>? convert = null);
	Task<List<DataObjects.User>> GetUsersAuto(List<Guid>? ids = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,IQueryable<DataObjects.User>>? convert = null);
	Task<DataObjects.FilterUsersAuto> GetUsersFilteredAuto(DataObjects.FilterUsersAuto filter, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>>? overrideFilter = null,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>>? additionalFilter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,string, bool ,IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>>? additionalOrderByAuto = null, Func<DataObjects.User, DataObjects.User> additionalDataAuto = null  );
	Task<DataObjects.User> SaveUserAuto(DataObjects.User item, bool tryLookup = true, bool trySave = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>, DataObjects.User, IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>>? lookup = null);
	Task<List<DataObjects.User>> SaveUsersAuto(List<DataObjects.User> items, bool tryLookup = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>, DataObjects.User, IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>>? lookup = null);
	Dictionary<string, string> GetUserIconAuto();

	Dictionary<string, string> GetUserLanguageAuto();
}
public partial class DataAccess
{
	public DataObjects.User ConvertUserAuto(SampleSinglePageApplication.EFModels.EFModels.User item) //SampleSinglePageApplication.DataObjects+User
	{
		var output = new DataObjects.User {
			UserId = item.UserId, //OTHER: base(Guid) : actual(Guid)
			TenantId = item.TenantId, //OTHER: base(Guid) : actual(Guid)
			FirstName = item.FirstName ?? "", //string nullable on ef model: base(String) : actual(String)
			LastName = item.LastName ?? "", //string nullable on ef model: base(String) : actual(String)
// not on ef model			DisplayName = item.DisplayName, //OTHER: base(String) : actual(String)
			Email = item.Email ?? "", //string nullable on ef model: base(String) : actual(String)
			Phone = item.Phone ?? "", //string nullable on ef model: base(String) : actual(String)
			Username = item.Username, //OTHER: base(String) : actual(String)
			EmployeeId = item.EmployeeId ?? "", //string nullable on ef model: base(String) : actual(String)
			DepartmentId = item.DepartmentId, //OTHER: base(Nullable`1) : actual(Guid)
// not on ef model			DepartmentName = item.DepartmentName, //OTHER: base(String) : actual(String)
			Title = item.Title ?? "", //string nullable on ef model: base(String) : actual(String)
			Location = item.Location ?? "", //string nullable on ef model: base(String) : actual(String)
			Enabled = item.Enabled ?? false, //BOOL nullable on ef model: base(Boolean) : actual(Boolean)
			LastLogin = item.LastLogin, //OTHER: base(Nullable`1) : actual(DateTime)
			Admin = item.Admin ?? false, //BOOL nullable on ef model: base(Boolean) : actual(Boolean)
// not on ef model			AppAdmin = item.AppAdmin, //OTHER: base(Boolean) : actual(Boolean)
// not on ef model			Photo = item.Photo, //OTHER: base(Nullable`1) : actual(Guid)
			Password = item.Password ?? "", //string nullable on ef model: base(String) : actual(String)
			PreventPasswordChange = item.PreventPasswordChange ?? false, //BOOL nullable on ef model: base(Boolean) : actual(Boolean)
// not on ef model			HasLocalPassword = item.HasLocalPassword, //OTHER: base(Boolean) : actual(Boolean)
// not on ef model			AuthToken = item.AuthToken, //OTHER: base(String) : actual(String)
			FailedLoginAttempts = item.FailedLoginAttempts ?? 0, //int nullable on ef model: base(Int32) : actual(Int32)
			LastLockoutDate = item.LastLockoutDate, //OTHER: base(Nullable`1) : actual(DateTime)
			//LIST: base(List`1) : actual(Tenant)
			//LIST: base(List`1) : actual(UserTenant)
			Source = item.Source ?? "", //string nullable on ef model: base(String) : actual(String)
// not on ef model			udf01 = item.udf01, //OTHER: base(String) : actual(String)
// not on ef model			udf02 = item.udf02, //OTHER: base(String) : actual(String)
// not on ef model			udf03 = item.udf03, //OTHER: base(String) : actual(String)
// not on ef model			udf04 = item.udf04, //OTHER: base(String) : actual(String)
// not on ef model			udf05 = item.udf05, //OTHER: base(String) : actual(String)
// not on ef model			udf06 = item.udf06, //OTHER: base(String) : actual(String)
// not on ef model			udf07 = item.udf07, //OTHER: base(String) : actual(String)
// not on ef model			udf08 = item.udf08, //OTHER: base(String) : actual(String)
// not on ef model			udf09 = item.udf09, //OTHER: base(String) : actual(String)
// not on ef model			udf10 = item.udf10, //OTHER: base(String) : actual(String)
			//LIST: base(List`1) : actual(SavedFilterDepartmentsAuto)
			//LIST: base(List`1) : actual(SavedFilterDepartmentGroupsAuto)
			//LIST: base(List`1) : actual(SavedFilterFileStoragesAuto)
			//LIST: base(List`1) : actual(SavedFilterSettingsAuto)
			//LIST: base(List`1) : actual(SavedFilterTenantsAuto)
			//LIST: base(List`1) : actual(SavedFilterUsersAuto)
			//LIST: base(List`1) : actual(SavedFilterUserGroupsAuto)
		};
		return output;
	}
	public async Task<DataObjects.BooleanResponse> DeleteUserAuto(Guid userId, bool trySave = true) //SampleSinglePageApplication.DataObjects+User
	{
		DataObjects.BooleanResponse output = new DataObjects.BooleanResponse();
		var rec = await data.Users.FirstOrDefaultAsync(x => x.UserId == userId);
		if (rec == null) {
			output.Messages.Add("Error Deleting User " + userId.ToString() + " - Record No Longer Exists");
		} else {
			data.Users.Remove(rec);
			try {
				if (trySave) {
					await data.SaveChangesAsync();
				}
				output.Result = true;
				
				await SignalRUpdate(new DataObjects.SignalRUpdate {
					TenantId = rec.TenantId,
					ItemId = rec.UserId.ToString(),
					UpdateType = DataObjects.SignalRUpdateType.User,
					Message = "DeletedUser"
				});
			} catch (Exception ex) {
				output.Messages.Add("Error Deleting User " + userId.ToString() + " - " + ex.Message);
			}
		}
		return output;
	}

	public async Task<DataObjects.BooleanResponse> DeleteUsersAuto(List<Guid> userIds)  //SampleSinglePageApplication.DataObjects+User
	{
		DataObjects.BooleanResponse output = new DataObjects.BooleanResponse();
		var recs = await data.Users.Where(x => userIds.Any(id => id == x.UserId)).ToListAsync();
		data.Users.RemoveRange(recs);
		try {
			await data.SaveChangesAsync();
			output.Result = true;
		} catch (Exception ex) {
			output.Messages.Add("Error Deleting Users " + string.Join(",", userIds.Select(o => o.ToString())) + " - " + ex.Message);
		}
		return output;
	}

	public async Task<DataObjects.User> GetUserAuto(Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,IQueryable<DataObjects.User>>? convert = null)  //SampleSinglePageApplication.DataObjects+User
	{
		return await GetUserAutoPrivate(null, filter, convert);
	}
	public async Task<DataObjects.User> GetUserAuto(Guid id,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,IQueryable<DataObjects.User>>? convert = null)  //SampleSinglePageApplication.DataObjects+User
	{
		return await GetUserAutoPrivate(id, filter, convert);
	}
	private async Task<DataObjects.User> GetUserAutoPrivate(Guid? id, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,IQueryable<DataObjects.User>>? convert = null)  //SampleSinglePageApplication.DataObjects+User
	{
		DataObjects.User output = new DataObjects.User();
		output.ActionResponse = GetNewActionResponse();
		List<DataObjects.User> records = null;
		if(id != null) {
			records = await GetUsersAuto(new List<Guid>() { id.Value }, filter, convert );
		} else {
			records = await GetUsersAuto(null, filter, convert );
		}
		if (records != null && records.Count() > 0) {
			output = records.Single();
			output.ActionResponse.Result = true;
		}
		else {
			output.ActionResponse.Messages.Add("User " + id.ToString() + " Does Not Exist");
		}
		return output;
	}
	public async Task<List<DataObjects.User>> GetUsersAuto(List<Guid>? ids = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,IQueryable<DataObjects.User>>? convert = null)  //SampleSinglePageApplication.DataObjects+User
	{
		List<DataObjects.User> output = new List<DataObjects.User>();
		IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>? recs = null;
		if (ids != null) {
			recs = data.Users.Where(o => ids.Any(id => id == o.UserId)).AsQueryable();
		} else {
			recs = data.Users.AsQueryable();
		}
		if (filter != null) {
			recs = filter(recs);
		}
		if (convert != null) {
			output = await (convert(recs)).ToListAsync();
		} else {
			List<SampleSinglePageApplication.EFModels.EFModels.User> records = await recs.ToListAsync();
			foreach(var o in records) {
				output.Add(ConvertUserAuto(o));
			}
		}

		return output;
	}
	public async Task<DataObjects.FilterUsersAuto> GetUsersFilteredAuto(DataObjects.FilterUsersAuto filter, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>>? overrideFilter = null,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>>? additionalFilter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>,string, bool ,IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>>? additionalOrderByAuto = null, Func<DataObjects.User, DataObjects.User> additionalDataAuto = null  )                    
	{
		DataObjects.FilterUsersAuto output = filter;                                                                       
		output.ActionResponse = GetNewActionResponse();
		output.Records = null;
		
		output.Columns = new List<DataObjects.FilterColumn> {
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "User Id",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "userId",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Tenant Id",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "tenantId",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "First Name",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "firstName",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Last Name",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "lastName",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Email",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "email",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Phone",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "phone",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Username",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "username",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Employee Id",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "employeeId",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Department Id",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "departmentId",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Title",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "title",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Location",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "location",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "center",                                                                                      
				Label = "Enabled",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "enabled",                                                      
				DataType = "boolean"                                                                                   
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Last Login",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "lastLogin",                                                      
				DataType = "datetime"                                                                                  
			},
			new DataObjects.FilterColumn{
				Align = "center",                                                                                      
				Label = "Admin",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "admin",                                                      
				DataType = "boolean"                                                                                   
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Password",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "password",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "center",                                                                                      
				Label = "Prevent Password Change",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "preventPasswordChange",                                                      
				DataType = "boolean"                                                                                   
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Failed Login Attempts",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "failedLoginAttempts",                                                      
				DataType = "number"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Last Lockout Date",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "lastLockoutDate",                                                      
				DataType = "datetime"                                                                                  
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Source",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "source",                                                      
				DataType = "string"                                                                                    
			},
		};
	
		IQueryable<User> recs = data.Users; 
		recs = recs.Where(x => x.TenantId == output.TenantId);                                               
		if (overrideFilter != null) {
			recs = overrideFilter(recs);
		} else {
			if(additionalFilter != null) {
				recs = additionalFilter(recs);
			}
			if (GuidOrEmpty(filter.UserId) != Guid.Empty) {
				recs = recs.Where(o => GuidOrEmpty(o.UserId) == GuidOrEmpty(filter.UserId)); // Guid : UserId
			}
			// TODO: Guid : TenantId
			if (!string.IsNullOrWhiteSpace(filter.FirstName)) {
				if (filter.FirstNameFilterExact) {
					recs = recs.Where(o => o.FirstName == filter.FirstName); // String : FirstName
				} else {
					recs = recs.Where(o => o.FirstName.Contains(filter.FirstName)); // String : FirstName
				}
			}
			if (!string.IsNullOrWhiteSpace(filter.LastName)) {
				if (filter.LastNameFilterExact) {
					recs = recs.Where(o => o.LastName == filter.LastName); // String : LastName
				} else {
					recs = recs.Where(o => o.LastName.Contains(filter.LastName)); // String : LastName
				}
			}
			if (!string.IsNullOrWhiteSpace(filter.Email)) {
				if (filter.EmailFilterExact) {
					recs = recs.Where(o => o.Email == filter.Email); // String : Email
				} else {
					recs = recs.Where(o => o.Email.Contains(filter.Email)); // String : Email
				}
			}
			if (!string.IsNullOrWhiteSpace(filter.Phone)) {
				if (filter.PhoneFilterExact) {
					recs = recs.Where(o => o.Phone == filter.Phone); // String : Phone
				} else {
					recs = recs.Where(o => o.Phone.Contains(filter.Phone)); // String : Phone
				}
			}
			if (!string.IsNullOrWhiteSpace(filter.Username)) {
				if (filter.UsernameFilterExact) {
					recs = recs.Where(o => o.Username == filter.Username); // String : Username
				} else {
					recs = recs.Where(o => o.Username.Contains(filter.Username)); // String : Username
				}
			}
			if (!string.IsNullOrWhiteSpace(filter.EmployeeId)) {
				if (filter.EmployeeIdFilterExact) {
					recs = recs.Where(o => o.EmployeeId == filter.EmployeeId); // String : EmployeeId
				} else {
					recs = recs.Where(o => o.EmployeeId.Contains(filter.EmployeeId)); // String : EmployeeId
				}
			}
			if (GuidOrEmpty(filter.DepartmentId) != Guid.Empty) {
				recs = recs.Where(o => GuidOrEmpty(o.DepartmentId) == GuidOrEmpty(filter.DepartmentId)); // Guid : DepartmentId
			}
			if (!string.IsNullOrWhiteSpace(filter.Title)) {
				if (filter.TitleFilterExact) {
					recs = recs.Where(o => o.Title == filter.Title); // String : Title
				} else {
					recs = recs.Where(o => o.Title.Contains(filter.Title)); // String : Title
				}
			}
			if (!string.IsNullOrWhiteSpace(filter.Location)) {
				if (filter.LocationFilterExact) {
					recs = recs.Where(o => o.Location == filter.Location); // String : Location
				} else {
					recs = recs.Where(o => o.Location.Contains(filter.Location)); // String : Location
				}
			}
			if (filter.Enabled.HasValue) {
				if( filter.Enabled.Value ) {
					recs = recs.Where(o => o.Enabled == true);
				} else {
					recs = recs.Where(o => o.Enabled == false || o.Enabled == null);
				}
			}
			if (filter.LastLogin.HasValue) {
				recs = recs.Where(o => o.LastLogin == filter.LastLogin); // DateTime : LastLogin
			} else {
				if (filter.LastLoginStart.HasValue) {
					recs = recs.Where(o => o.LastLogin >= filter.LastLoginStart.Value); // DateTime : LastLogin
				}
				if (filter.LastLoginEnd.HasValue) {
					recs = recs.Where(o => o.LastLogin <= filter.LastLoginEnd.Value); // DateTime : LastLogin
				}
			}
			if (filter.Admin.HasValue) {
				if( filter.Admin.Value ) {
					recs = recs.Where(o => o.Admin == true);
				} else {
					recs = recs.Where(o => o.Admin == false || o.Admin == null);
				}
			}
			if (!string.IsNullOrWhiteSpace(filter.Password)) {
				if (filter.PasswordFilterExact) {
					recs = recs.Where(o => o.Password == filter.Password); // String : Password
				} else {
					recs = recs.Where(o => o.Password.Contains(filter.Password)); // String : Password
				}
			}
			if (filter.PreventPasswordChange.HasValue) {
				if( filter.PreventPasswordChange.Value ) {
					recs = recs.Where(o => o.PreventPasswordChange == true);
				} else {
					recs = recs.Where(o => o.PreventPasswordChange == false || o.PreventPasswordChange == null);
				}
			}
			if (filter.FailedLoginAttempts.HasValue) {
				recs = recs.Where(o => o.FailedLoginAttempts == filter.FailedLoginAttempts); // Int32 : FailedLoginAttempts
			}
			if (filter.LastLockoutDate.HasValue) {
				recs = recs.Where(o => o.LastLockoutDate == filter.LastLockoutDate); // DateTime : LastLockoutDate
			} else {
				if (filter.LastLockoutDateStart.HasValue) {
					recs = recs.Where(o => o.LastLockoutDate >= filter.LastLockoutDateStart.Value); // DateTime : LastLockoutDate
				}
				if (filter.LastLockoutDateEnd.HasValue) {
					recs = recs.Where(o => o.LastLockoutDate <= filter.LastLockoutDateEnd.Value); // DateTime : LastLockoutDate
				}
			}
			if (!string.IsNullOrWhiteSpace(filter.Source)) {
				if (filter.SourceFilterExact) {
					recs = recs.Where(o => o.Source == filter.Source); // String : Source
				} else {
					recs = recs.Where(o => o.Source.Contains(filter.Source)); // String : Source
				}
			}
		}

		if (!string.IsNullOrWhiteSpace(filter.Keyword)) {
			recs = recs.Where(o =>
				(filter.FirstNameIncludeInKeyword && o.FirstName.Contains(string.Empty + filter.FirstName)) || 
				(filter.LastNameIncludeInKeyword && o.LastName.Contains(string.Empty + filter.LastName)) || 
				(filter.EmailIncludeInKeyword && o.Email.Contains(string.Empty + filter.Email)) || 
				(filter.PhoneIncludeInKeyword && o.Phone.Contains(string.Empty + filter.Phone)) || 
				(filter.UsernameIncludeInKeyword && o.Username.Contains(string.Empty + filter.Username)) || 
				(filter.EmployeeIdIncludeInKeyword && o.EmployeeId.Contains(string.Empty + filter.EmployeeId)) || 
				(filter.TitleIncludeInKeyword && o.Title.Contains(string.Empty + filter.Title)) || 
				(filter.LocationIncludeInKeyword && o.Location.Contains(string.Empty + filter.Location)) || 
				(filter.PasswordIncludeInKeyword && o.Password.Contains(string.Empty + filter.Password)) || 
				(filter.SourceIncludeInKeyword && o.Source.Contains(string.Empty + filter.Source))
			);
		}

		bool Ascending = true;
		if (StringOrEmpty(output.SortOrder).ToUpper() == "DESC")
		{
		    Ascending = false;
		}
		
		switch (StringOrEmpty(output.Sort).ToUpper())
		{
			case "USERID":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.UserId).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.UserId).ThenByDescending(x => x.UserId);                    
				}
				break;
			case "TENANTID":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.TenantId).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.TenantId).ThenByDescending(x => x.UserId);                    
				}
				break;
			case "FIRSTNAME":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.FirstName).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.FirstName).ThenByDescending(x => x.UserId);                    
				}
				break;
			case "LASTNAME":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.LastName).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.LastName).ThenByDescending(x => x.UserId);                    
				}
				break;
			case "EMAIL":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.Email).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.Email).ThenByDescending(x => x.UserId);                    
				}
				break;
			case "PHONE":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.Phone).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.Phone).ThenByDescending(x => x.UserId);                    
				}
				break;
			case "USERNAME":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.Username).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.Username).ThenByDescending(x => x.UserId);                    
				}
				break;
			case "EMPLOYEEID":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.EmployeeId).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.EmployeeId).ThenByDescending(x => x.UserId);                    
				}
				break;
			case "DEPARTMENTID":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.DepartmentId).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.DepartmentId).ThenByDescending(x => x.UserId);                    
				}
				break;
			case "TITLE":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.Title).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.Title).ThenByDescending(x => x.UserId);                    
				}
				break;
			case "LOCATION":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.Location).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.Location).ThenByDescending(x => x.UserId);                    
				}
				break;
			case "ENABLED":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.Enabled).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.Enabled).ThenByDescending(x => x.UserId);                    
				}
				break;
			case "LASTLOGIN":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.LastLogin).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.LastLogin).ThenByDescending(x => x.UserId);                    
				}
				break;
			case "ADMIN":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.Admin).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.Admin).ThenByDescending(x => x.UserId);                    
				}
				break;
			case "PASSWORD":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.Password).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.Password).ThenByDescending(x => x.UserId);                    
				}
				break;
			case "PREVENTPASSWORDCHANGE":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.PreventPasswordChange).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.PreventPasswordChange).ThenByDescending(x => x.UserId);                    
				}
				break;
			case "FAILEDLOGINATTEMPTS":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.FailedLoginAttempts).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.FailedLoginAttempts).ThenByDescending(x => x.UserId);                    
				}
				break;
			case "LASTLOCKOUTDATE":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.LastLockoutDate).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.LastLockoutDate).ThenByDescending(x => x.UserId);                    
				}
				break;
			case "SOURCE":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.Source).ThenBy(x => x.UserId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.Source).ThenByDescending(x => x.UserId);                    
				}
				break;
		}
		if (additionalOrderByAuto != null) {
			recs = additionalOrderByAuto(recs,StringOrEmpty(output.Sort).ToUpper(),Ascending);
		}
	
		if (recs != null && recs.Count() > 0)
		{
	
			int TotalRecords = recs.Count();
			output.RecordCount = TotalRecords;
	
			if (output.RecordsPerPage > 0)
			{
				// We are filtering records per page
				if (output.RecordsPerPage >= TotalRecords)
					{
					output.Page = 1;
					output.PageCount = 1;
				}
				else
				{
					// Figure out the page count
					if (output.Page < 1) { output.Page = 1; }
					if (output.RecordsPerPage < 1) { output.RecordsPerPage = 25; }
					decimal decPages = (decimal)TotalRecords / (decimal)output.RecordsPerPage;
					decPages = Math.Ceiling(decPages);
					output.PageCount = (int)decPages;
	
					if (output.Page > output.PageCount)
					{
						output.Page = output.PageCount;
					}
	
					if (output.Page > 1)
					{
						recs = recs.Skip((output.Page - 1) * output.RecordsPerPage).Take(output.RecordsPerPage);
					}
					else
					{
						recs = recs.Take(output.RecordsPerPage);
					}
	
				}
			}
	
			// grab the id's now that it is fitered.
			var ids = await recs.Select(o => o.UserId).ToListAsync();                                                  
			// then use the auto method to read them from the database
			var autoRecs = await this.GetUsersAuto(ids);                                                               
	
			// loop over the sorted / ordered ids list and build the records output base on that order,
			// not the order returned by the auto recs
			List<DataObjects.User> records = new List<DataObjects.User>();                                           
			foreach (var id in ids)
			{
			    // find the rec out of the autos
			    var autoRec = autoRecs.Single(o => o.UserId == id);                                                    
			    // add any addtional data we need
			    if (additionalDataAuto != null) {
					autoRec = additionalDataAuto(autoRec);
			    }
			    records.Add(autoRec);
			}
	
			output.Records = records.ToArray();
		}
	
		output.ActionResponse.Result = true;
	
		return output;
	}
	public async Task<DataObjects.User> SaveUserAuto(DataObjects.User item, bool tryLookup = true, bool trySave = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>, DataObjects.User, IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>>? lookup = null)  //SampleSinglePageApplication.DataObjects+User
	{
		User? rec = null;
		item.ActionResponse = GetNewActionResponse();
		if (tryLookup) {
			if (lookup == null) {
				rec = await data.Users.FirstOrDefaultAsync(o => o.UserId == item.UserId);
			} else {
				rec = await lookup(data.Users.AsQueryable(), item).FirstOrDefaultAsync();
			}
			if(rec != null) {
				 item.UserId = rec.UserId;
			}
		}
		var newRecord = false;
		if (rec == null) {
			if (item.UserId == Guid.Empty){
				rec = new EFModels.EFModels.User();
				item.UserId = Guid.NewGuid();
				rec.UserId = item.UserId;
				newRecord = true;
			} else {
				item.ActionResponse.Messages.Add("Error Saving User " + item.UserId.ToString() + " - Record No Longer Exists");
				return item;
			}
		}
		item.FirstName = MaxStringLength(item.FirstName,100);
		item.LastName = MaxStringLength(item.LastName,100);
		item.Email = MaxStringLength(item.Email,100);
		item.Phone = MaxStringLength(item.Phone,20);
		item.Username = MaxStringLength(item.Username,100);
		item.EmployeeId = MaxStringLength(item.EmployeeId,50);
		item.Title = MaxStringLength(item.Title,255);
		item.Location = MaxStringLength(item.Location,255);
		item.Source = MaxStringLength(item.Source,100);

		rec.TenantId = item.TenantId; //OTHER: base(Guid) : actual(Guid)
		rec.FirstName = item.FirstName; //OTHER: base(String) : actual(String)
		rec.LastName = item.LastName; //OTHER: base(String) : actual(String)
		//rec.DisplayName = item.DisplayName; //OTHER: base(String) : actual(String)
		rec.Email = item.Email; //OTHER: base(String) : actual(String)
		rec.Phone = item.Phone; //OTHER: base(String) : actual(String)
		rec.Username = item.Username; //OTHER: base(String) : actual(String)
		rec.EmployeeId = item.EmployeeId; //OTHER: base(String) : actual(String)
		rec.DepartmentId = item.DepartmentId; //OTHER: base(Nullable`1) : actual(Guid)
		//rec.DepartmentName = item.DepartmentName; //OTHER: base(String) : actual(String)
		rec.Title = item.Title; //OTHER: base(String) : actual(String)
		rec.Location = item.Location; //OTHER: base(String) : actual(String)
		rec.Enabled = item.Enabled; //OTHER: base(Boolean) : actual(Boolean)
		rec.LastLogin = item.LastLogin; //OTHER: base(Nullable`1) : actual(DateTime)
		rec.Admin = item.Admin; //OTHER: base(Boolean) : actual(Boolean)
		//rec.AppAdmin = item.AppAdmin; //OTHER: base(Boolean) : actual(Boolean)
		//rec.Photo = item.Photo; //OTHER: base(Nullable`1) : actual(Guid)
		rec.Password = item.Password; //OTHER: base(String) : actual(String)
		rec.PreventPasswordChange = item.PreventPasswordChange; //OTHER: base(Boolean) : actual(Boolean)
		//rec.HasLocalPassword = item.HasLocalPassword; //OTHER: base(Boolean) : actual(Boolean)
		//rec.AuthToken = item.AuthToken; //OTHER: base(String) : actual(String)
		rec.FailedLoginAttempts = item.FailedLoginAttempts; //OTHER: base(Int32) : actual(Int32)
		rec.LastLockoutDate = item.LastLockoutDate; //OTHER: base(Nullable`1) : actual(DateTime)
		//rec.Tenants = item.Tenants; //OTHER: base(List`1) : actual(Tenant)
		//rec.UserTenants = item.UserTenants; //OTHER: base(List`1) : actual(UserTenant)
		rec.Source = item.Source; //OTHER: base(String) : actual(String)
		//rec.udf01 = item.udf01; //OTHER: base(String) : actual(String)
		//rec.udf02 = item.udf02; //OTHER: base(String) : actual(String)
		//rec.udf03 = item.udf03; //OTHER: base(String) : actual(String)
		//rec.udf04 = item.udf04; //OTHER: base(String) : actual(String)
		//rec.udf05 = item.udf05; //OTHER: base(String) : actual(String)
		//rec.udf06 = item.udf06; //OTHER: base(String) : actual(String)
		//rec.udf07 = item.udf07; //OTHER: base(String) : actual(String)
		//rec.udf08 = item.udf08; //OTHER: base(String) : actual(String)
		//rec.udf09 = item.udf09; //OTHER: base(String) : actual(String)
		//rec.udf10 = item.udf10; //OTHER: base(String) : actual(String)
		//rec.SavedFiltersDepartmentsAuto = item.SavedFiltersDepartmentsAuto; //OTHER: base(List`1) : actual(SavedFilterDepartmentsAuto)
		//rec.SavedFiltersDepartmentGroupsAuto = item.SavedFiltersDepartmentGroupsAuto; //OTHER: base(List`1) : actual(SavedFilterDepartmentGroupsAuto)
		//rec.SavedFiltersFileStoragesAuto = item.SavedFiltersFileStoragesAuto; //OTHER: base(List`1) : actual(SavedFilterFileStoragesAuto)
		//rec.SavedFiltersSettingsAuto = item.SavedFiltersSettingsAuto; //OTHER: base(List`1) : actual(SavedFilterSettingsAuto)
		//rec.SavedFiltersTenantsAuto = item.SavedFiltersTenantsAuto; //OTHER: base(List`1) : actual(SavedFilterTenantsAuto)
		//rec.SavedFiltersUsersAuto = item.SavedFiltersUsersAuto; //OTHER: base(List`1) : actual(SavedFilterUsersAuto)
		//rec.SavedFiltersUserGroupsAuto = item.SavedFiltersUserGroupsAuto; //OTHER: base(List`1) : actual(SavedFilterUserGroupsAuto)
		//rec.ActionResponse = item.ActionResponse; //OTHER: base(BooleanResponse) : actual(BooleanResponse)

		try
		{
			if (newRecord)
			{
				data.Users.Add(rec);
			}
			if (trySave) {
				await data.SaveChangesAsync();
				//await SignalRUpdate(new DataObjects.SignalRUpdate
				//{
				//	//TenantId = item.TenantId,
				//	ItemId = item.UserId.ToString(),
				//	UpdateType = DataObjects.SignalRUpdateType.User,
				//	Message = "UserSaved",
				//	Object = item
				//});
			}
			item.ActionResponse.Result = true;
		}
		catch (Exception ex)
		{
			item.ActionResponse.Messages.Add("Error Saving User " + item.UserId.ToString() + " - " + ex.Message);
		}
		return item;
	}
	public async Task<List<DataObjects.User>> SaveUsersAuto(List<DataObjects.User> items, bool tryLookup = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>, DataObjects.User, IQueryable<SampleSinglePageApplication.EFModels.EFModels.User>>? lookup = null)  //SampleSinglePageApplication.DataObjects+User
	{
		List<DataObjects.User> output = new List<DataObjects.User>();
		foreach(var item in items) {
			DataObjects.User saved = await SaveUserAuto(item, tryLookup, false, lookup);
			if (saved != null && saved.ActionResponse != null && saved.ActionResponse.Result) {
				output.Add(saved);
			}
		}
		await data.SaveChangesAsync();
		return output;
	}

	public Dictionary<string, string> GetUserIconAuto()
	{
		var output = new Dictionary<string, string>();
		return output;
	}
	public Dictionary<string, string> GetUserLanguageAuto()
	{
		var output = new Dictionary<string, string>();
		output.Add("User", "User");
		output.Add("User.AddNew", "Add New");
		output.Add("User.Back", "Back");
		output.Add("User.Cancel", "Cancel");
		output.Add("User.CancelDeleteFilter", "Cancel");
		output.Add("User.Clear", "Clear");
		output.Add("User.ConfirmDelete", "Confirm Delete");
		output.Add("User.ConfirmDeleteFilter", "Confirm Delete");
		output.Add("User.Delete", "Delete");
		output.Add("User.DeleteFilter", "Delete Filter");
		output.Add("User.Edit", "Edit");
		output.Add("User.EditTableButton", "Edit");
		output.Add("User.FilterCardView", "Card View");
		output.Add("User.FilterExport", "Export");
		output.Add("User.HidingDetails", "Hiding Details");
		output.Add("User.ListView", "List View");
		output.Add("User.ShowingDetails", "Showing Details");
		output.Add("User.HideFilter", "Hide Filter");
		output.Add("Users", "Users");
		output.Add("User.Refresh", "Refresh");
		output.Add("User.Save", "Save");
		output.Add("User.SaveFilter", "Save Filter");
		output.Add("User.ShowFilter", "Show Filter");
		output.Add("User.SavedFilters", "Saved Filters");
		output.Add("User.SavedFilterName", "Saved Filter Name");
		output.Add("User.NoRecords", "No Records");
		output.Add("User.Loading", "Loading Users, Please Wait");
		output.Add("User.User", "User");
		output.Add("User.UserStart", "User Start");
		output.Add("User.UserEnd", "User End");
		output.Add("User.UserFilterExact", "Exact");
		output.Add("User.UserIncludeInKeyword", "Keyword");
		output.Add("User.UserNoRecords", "NoUserRecords");
		output.Add("User.UserId","User Id");
		output.Add("User.TenantId","Tenant Id");
		output.Add("User.FirstName","First Name");
		output.Add("User.FirstNameFilterExact","Exact");
		output.Add("User.FirstNameIncludeInKeyword","Keyword");
		output.Add("User.LastName","Last Name");
		output.Add("User.LastNameFilterExact","Exact");
		output.Add("User.LastNameIncludeInKeyword","Keyword");
		output.Add("User.Email","Email");
		output.Add("User.EmailFilterExact","Exact");
		output.Add("User.EmailIncludeInKeyword","Keyword");
		output.Add("User.Phone","Phone");
		output.Add("User.PhoneFilterExact","Exact");
		output.Add("User.PhoneIncludeInKeyword","Keyword");
		output.Add("User.Username","Username");
		output.Add("User.UsernameFilterExact","Exact");
		output.Add("User.UsernameIncludeInKeyword","Keyword");
		output.Add("User.EmployeeId","Employee Id");
		output.Add("User.EmployeeIdFilterExact","Exact");
		output.Add("User.EmployeeIdIncludeInKeyword","Keyword");
		output.Add("User.DepartmentId","Department Id");
		output.Add("User.Title","Title");
		output.Add("User.TitleFilterExact","Exact");
		output.Add("User.TitleIncludeInKeyword","Keyword");
		output.Add("User.Location","Location");
		output.Add("User.LocationFilterExact","Exact");
		output.Add("User.LocationIncludeInKeyword","Keyword");
		output.Add("User.Enabled","Enabled");
		output.Add("User.LastLoginStart", "Last Login Start");
		output.Add("User.LastLoginEnd", "Last Login End");
		output.Add("User.Admin","Admin");
		output.Add("User.Password","Password");
		output.Add("User.PasswordFilterExact","Exact");
		output.Add("User.PasswordIncludeInKeyword","Keyword");
		output.Add("User.PreventPasswordChange","Prevent Password Change");
		output.Add("User.FailedLoginAttempts","Failed Login Attempts");
		output.Add("User.LastLockoutDateStart", "Last Lockout Date Start");
		output.Add("User.LastLockoutDateEnd", "Last Lockout Date End");
		output.Add("User.Source","Source");
		output.Add("User.SourceFilterExact","Exact");
		output.Add("User.SourceIncludeInKeyword","Keyword");
		return output;
	}

}
