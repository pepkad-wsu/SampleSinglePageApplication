/// 
/// UserGroup
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
namespace SampleSinglePageApplication;
		// Dont need filtering for Settings
public partial interface IDataAccess
{
	DataObjects.UserGroup ConvertUserGroupAuto(SampleSinglePageApplication.EFModels.EFModels.UserGroup item);
	Task<DataObjects.BooleanResponse> DeleteUserGroupAuto(Guid userGroupId, bool trySave = true);
	Task<DataObjects.BooleanResponse> DeleteUserGroupsAuto(List<Guid> userGroupIds);
	Task<DataObjects.UserGroup> GetUserGroupAuto(Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,IQueryable<DataObjects.UserGroup>>? convert = null);
	Task<DataObjects.UserGroup> GetUserGroupAuto(Guid id,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,IQueryable<DataObjects.UserGroup>>? convert = null);
	Task<List<DataObjects.UserGroup>> GetUserGroupsAuto(List<Guid>? ids = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,IQueryable<DataObjects.UserGroup>>? convert = null);
	Task<DataObjects.FilterUserGroupsAuto> GetUserGroupsFilteredAuto(DataObjects.FilterUserGroupsAuto filter, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>>? overrideFilter = null,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>>? additionalFilter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,string, bool ,IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>>? additionalOrderByAuto = null, Func<DataObjects.UserGroup, DataObjects.UserGroup> additionalDataAuto = null  );
	Task<DataObjects.UserGroup> SaveUserGroupAuto(DataObjects.UserGroup item, bool tryLookup = true, bool trySave = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>, DataObjects.UserGroup, IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>>? lookup = null);
	Task<List<DataObjects.UserGroup>> SaveUserGroupsAuto(List<DataObjects.UserGroup> items, bool tryLookup = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>, DataObjects.UserGroup, IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>>? lookup = null);
	Dictionary<string, string> GetUserGroupIconAuto();

	Dictionary<string, string> GetUserGroupLanguageAuto();
}
public partial class DataAccess
{
	public DataObjects.UserGroup ConvertUserGroupAuto(SampleSinglePageApplication.EFModels.EFModels.UserGroup item) //SampleSinglePageApplication.DataObjects+UserGroup
	{

		var settings = DeserializeObject<DataObjects.UserGroupSettings>(item.Settings);
		if (settings == null) {
			settings = new DataObjects.UserGroupSettings();
		}

		var output = new DataObjects.UserGroup {
			GroupId = item.GroupId, //OTHER: base(Guid) : actual(Guid)
			TenantId = item.TenantId, //OTHER: base(Guid) : actual(Guid)
			Name = item.Name ?? "", //string nullable on ef model: base(String) : actual(String)
			Enabled = item.Enabled, //OTHER: base(Boolean) : actual(Boolean)
			//LIST: base(List`1) : actual(Guid)
			Settings = settings, //string nullable on ef model and DataObjects.UserGroupSettings on dataobjects : base(UserGroupSettings) : actual(UserGroupSettings)
		};
		return output;
	}
	public async Task<DataObjects.BooleanResponse> DeleteUserGroupAuto(Guid userGroupId, bool trySave = true) //SampleSinglePageApplication.DataObjects+UserGroup
	{
		DataObjects.BooleanResponse output = new DataObjects.BooleanResponse();
		var rec = await data.UserGroups.FirstOrDefaultAsync(x => x.GroupId == userGroupId);
		if (rec == null) {
			output.Messages.Add("Error Deleting UserGroup " + userGroupId.ToString() + " - Record No Longer Exists");
		} else {
			data.UserGroups.Remove(rec);
			try {
				if (trySave) {
					await data.SaveChangesAsync();
				}
				output.Result = true;
				
				await SignalRUpdate(new DataObjects.SignalRUpdate {
					TenantId = rec.TenantId,
					ItemId = rec.GroupId.ToString(),
					UpdateType = DataObjects.SignalRUpdateType.UserGroup,
					Message = "DeletedUserGroup"
				});
			} catch (Exception ex) {
				output.Messages.Add("Error Deleting UserGroup " + userGroupId.ToString() + " - " + ex.Message);
			}
		}
		return output;
	}

	public async Task<DataObjects.BooleanResponse> DeleteUserGroupsAuto(List<Guid> userGroupIds)  //SampleSinglePageApplication.DataObjects+UserGroup
	{
		DataObjects.BooleanResponse output = new DataObjects.BooleanResponse();
		var recs = await data.UserGroups.Where(x => userGroupIds.Any(id => id == x.GroupId)).ToListAsync();
		data.UserGroups.RemoveRange(recs);
		try {
			await data.SaveChangesAsync();
			output.Result = true;
		} catch (Exception ex) {
			output.Messages.Add("Error Deleting UserGroups " + string.Join(",", userGroupIds.Select(o => o.ToString())) + " - " + ex.Message);
		}
		return output;
	}

	public async Task<DataObjects.UserGroup> GetUserGroupAuto(Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,IQueryable<DataObjects.UserGroup>>? convert = null)  //SampleSinglePageApplication.DataObjects+UserGroup
	{
		return await GetUserGroupAutoPrivate(null, filter, convert);
	}
	public async Task<DataObjects.UserGroup> GetUserGroupAuto(Guid id,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,IQueryable<DataObjects.UserGroup>>? convert = null)  //SampleSinglePageApplication.DataObjects+UserGroup
	{
		return await GetUserGroupAutoPrivate(id, filter, convert);
	}
	private async Task<DataObjects.UserGroup> GetUserGroupAutoPrivate(Guid? id, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,IQueryable<DataObjects.UserGroup>>? convert = null)  //SampleSinglePageApplication.DataObjects+UserGroup
	{
		DataObjects.UserGroup output = new DataObjects.UserGroup();
		output.ActionResponse = GetNewActionResponse();
		List<DataObjects.UserGroup> records = null;
		if(id != null) {
			records = await GetUserGroupsAuto(new List<Guid>() { id.Value }, filter, convert );
		} else {
			records = await GetUserGroupsAuto(null, filter, convert );
		}
		if (records != null && records.Count() > 0) {
			output = records.Single();
			output.ActionResponse.Result = true;
		}
		else {
			output.ActionResponse.Messages.Add("UserGroup " + id.ToString() + " Does Not Exist");
		}
		return output;
	}
	public async Task<List<DataObjects.UserGroup>> GetUserGroupsAuto(List<Guid>? ids = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,IQueryable<DataObjects.UserGroup>>? convert = null)  //SampleSinglePageApplication.DataObjects+UserGroup
	{
		List<DataObjects.UserGroup> output = new List<DataObjects.UserGroup>();
		IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>? recs = null;
		if (ids != null) {
			recs = data.UserGroups.Where(o => ids.Any(id => id == o.GroupId)).AsQueryable();
		} else {
			recs = data.UserGroups.AsQueryable();
		}
		if (filter != null) {
			recs = filter(recs);
		}
		if (convert != null) {
			output = await (convert(recs)).ToListAsync();
		} else {
			List<SampleSinglePageApplication.EFModels.EFModels.UserGroup> records = await recs.ToListAsync();
			foreach(var o in records) {
				output.Add(ConvertUserGroupAuto(o));
			}
		}

		return output;
	}
	public async Task<DataObjects.FilterUserGroupsAuto> GetUserGroupsFilteredAuto(DataObjects.FilterUserGroupsAuto filter, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>>? overrideFilter = null,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>>? additionalFilter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>,string, bool ,IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>>? additionalOrderByAuto = null, Func<DataObjects.UserGroup, DataObjects.UserGroup> additionalDataAuto = null  )                    
	{
		DataObjects.FilterUserGroupsAuto output = filter;                                                                       
		output.ActionResponse = GetNewActionResponse();
		output.Records = null;
		
		output.Columns = new List<DataObjects.FilterColumn> {
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Group Id",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "groupId",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Tenant Id",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "tenantId",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Name",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "name",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "center",                                                                                      
				Label = "Enabled",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "enabled",                                                      
				DataType = "boolean"                                                                                   
			},
		};
	
		IQueryable<UserGroup> recs = data.UserGroups; 
		recs = recs.Where(x => x.TenantId == output.TenantId);                                               
		if (overrideFilter != null) {
			recs = overrideFilter(recs);
		} else {
			if(additionalFilter != null) {
				recs = additionalFilter(recs);
			}
			if (GuidOrEmpty(filter.GroupId) != Guid.Empty) {
				recs = recs.Where(o => GuidOrEmpty(o.GroupId) == GuidOrEmpty(filter.GroupId)); // Guid : GroupId
			}
			// TODO: Guid : TenantId
			if (!string.IsNullOrWhiteSpace(filter.Name)) {
				if (filter.NameFilterExact) {
					recs = recs.Where(o => o.Name == filter.Name); // String : Name
				} else {
					recs = recs.Where(o => o.Name.Contains(filter.Name)); // String : Name
				}
			}
			if (filter.Enabled.HasValue) {
				if( filter.Enabled.Value ) {
					recs = recs.Where(o => o.Enabled == true);
				} else {
					recs = recs.Where(o => o.Enabled == false || o.Enabled == null);
				}
			}
			// TODO: UserGroupSettings : Settings
		}

		if (!string.IsNullOrWhiteSpace(filter.Keyword)) {
			recs = recs.Where(o =>
				(filter.NameIncludeInKeyword && o.Name.Contains(string.Empty + filter.Name))
			);
		}

		bool Ascending = true;
		if (StringOrEmpty(output.SortOrder).ToUpper() == "DESC")
		{
		    Ascending = false;
		}
		
		switch (StringOrEmpty(output.Sort).ToUpper())
		{
			case "GROUPID":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.GroupId).ThenBy(x => x.GroupId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.GroupId).ThenByDescending(x => x.GroupId);                    
				}
				break;
			case "TENANTID":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.TenantId).ThenBy(x => x.GroupId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.TenantId).ThenByDescending(x => x.GroupId);                    
				}
				break;
			case "NAME":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.Name).ThenBy(x => x.GroupId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.Name).ThenByDescending(x => x.GroupId);                    
				}
				break;
			case "ENABLED":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.Enabled).ThenBy(x => x.GroupId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.Enabled).ThenByDescending(x => x.GroupId);                    
				}
				break;
			case "SETTINGS":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.Settings).ThenBy(x => x.GroupId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.Settings).ThenByDescending(x => x.GroupId);                    
				}
				break;
		}
		if (additionalOrderByAuto != null) {
			recs = additionalOrderByAuto(recs,StringOrEmpty(output.Sort).ToUpper(),Ascending);
		}
	
		if (recs != null && recs.Count() > 0)
		{
	
			int TotalRecords = recs.Count();
			output.RecordCount = TotalRecords;
	
			if (output.RecordsPerPage > 0)
			{
				// We are filtering records per page
				if (output.RecordsPerPage >= TotalRecords)
					{
					output.Page = 1;
					output.PageCount = 1;
				}
				else
				{
					// Figure out the page count
					if (output.Page < 1) { output.Page = 1; }
					if (output.RecordsPerPage < 1) { output.RecordsPerPage = 25; }
					decimal decPages = (decimal)TotalRecords / (decimal)output.RecordsPerPage;
					decPages = Math.Ceiling(decPages);
					output.PageCount = (int)decPages;
	
					if (output.Page > output.PageCount)
					{
						output.Page = output.PageCount;
					}
	
					if (output.Page > 1)
					{
						recs = recs.Skip((output.Page - 1) * output.RecordsPerPage).Take(output.RecordsPerPage);
					}
					else
					{
						recs = recs.Take(output.RecordsPerPage);
					}
	
				}
			}
	
			// grab the id's now that it is fitered.
			var ids = await recs.Select(o => o.GroupId).ToListAsync();                                                  
			// then use the auto method to read them from the database
			var autoRecs = await this.GetUserGroupsAuto(ids);                                                               
	
			// loop over the sorted / ordered ids list and build the records output base on that order,
			// not the order returned by the auto recs
			List<DataObjects.UserGroup> records = new List<DataObjects.UserGroup>();                                           
			foreach (var id in ids)
			{
			    // find the rec out of the autos
			    var autoRec = autoRecs.Single(o => o.GroupId == id);                                                    
			    // add any addtional data we need
			    if (additionalDataAuto != null) {
					autoRec = additionalDataAuto(autoRec);
			    }
			    records.Add(autoRec);
			}
	
			output.Records = records.ToArray();
		}
	
		output.ActionResponse.Result = true;
	
		return output;
	}
	public async Task<DataObjects.UserGroup> SaveUserGroupAuto(DataObjects.UserGroup item, bool tryLookup = true, bool trySave = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>, DataObjects.UserGroup, IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>>? lookup = null)  //SampleSinglePageApplication.DataObjects+UserGroup
	{
		UserGroup? rec = null;
		item.ActionResponse = GetNewActionResponse();
		if (tryLookup) {
			if (lookup == null) {
				rec = await data.UserGroups.FirstOrDefaultAsync(o => o.GroupId == item.GroupId);
			} else {
				rec = await lookup(data.UserGroups.AsQueryable(), item).FirstOrDefaultAsync();
			}
			if(rec != null) {
				 item.GroupId = rec.GroupId;
			}
		}
		var newRecord = false;
		if (rec == null) {
			if (item.GroupId == Guid.Empty){
				rec = new EFModels.EFModels.UserGroup();
				item.GroupId = Guid.NewGuid();
				rec.GroupId = item.GroupId;
				newRecord = true;
			} else {
				item.ActionResponse.Messages.Add("Error Saving UserGroup " + item.GroupId.ToString() + " - Record No Longer Exists");
				return item;
			}
		}
		item.Name = MaxStringLength(item.Name,100);

		rec.TenantId = item.TenantId; //OTHER: base(Guid) : actual(Guid)
		rec.Name = item.Name; //OTHER: base(String) : actual(String)
		rec.Enabled = item.Enabled; //OTHER: base(Boolean) : actual(Boolean)
		//rec.Users = item.Users; //OTHER: base(List`1) : actual(Guid)
		rec.Settings = string.Empty + SerializeObject(item.Settings); //OTHER: base(UserGroupSettings) : actual(UserGroupSettings)
		//rec.ActionResponse = item.ActionResponse; //OTHER: base(BooleanResponse) : actual(BooleanResponse)

		try
		{
			if (newRecord)
			{
				data.UserGroups.Add(rec);
			}
			if (trySave) {
				await data.SaveChangesAsync();
				//await SignalRUpdate(new DataObjects.SignalRUpdate
				//{
				//	//TenantId = item.TenantId,
				//	ItemId = item.UserGroupId.ToString(),
				//	UpdateType = DataObjects.SignalRUpdateType.UserGroup,
				//	Message = "UserGroupSaved",
				//	Object = item
				//});
			}
			item.ActionResponse.Result = true;
		}
		catch (Exception ex)
		{
			item.ActionResponse.Messages.Add("Error Saving UserGroup " + item.GroupId.ToString() + " - " + ex.Message);
		}
		return item;
	}
	public async Task<List<DataObjects.UserGroup>> SaveUserGroupsAuto(List<DataObjects.UserGroup> items, bool tryLookup = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>, DataObjects.UserGroup, IQueryable<SampleSinglePageApplication.EFModels.EFModels.UserGroup>>? lookup = null)  //SampleSinglePageApplication.DataObjects+UserGroup
	{
		List<DataObjects.UserGroup> output = new List<DataObjects.UserGroup>();
		foreach(var item in items) {
			DataObjects.UserGroup saved = await SaveUserGroupAuto(item, tryLookup, false, lookup);
			if (saved != null && saved.ActionResponse != null && saved.ActionResponse.Result) {
				output.Add(saved);
			}
		}
		await data.SaveChangesAsync();
		return output;
	}

	public Dictionary<string, string> GetUserGroupIconAuto()
	{
		var output = new Dictionary<string, string>();
		return output;
	}
	public Dictionary<string, string> GetUserGroupLanguageAuto()
	{
		var output = new Dictionary<string, string>();
		output.Add("UserGroup", "User Group");
		output.Add("UserGroup.AddNew", "Add New");
		output.Add("UserGroup.Back", "Back");
		output.Add("UserGroup.Cancel", "Cancel");
		output.Add("UserGroup.CancelDeleteFilter", "Cancel");
		output.Add("UserGroup.Clear", "Clear");
		output.Add("UserGroup.ConfirmDelete", "Confirm Delete");
		output.Add("UserGroup.ConfirmDeleteFilter", "Confirm Delete");
		output.Add("UserGroup.Delete", "Delete");
		output.Add("UserGroup.DeleteFilter", "Delete Filter");
		output.Add("UserGroup.Edit", "Edit");
		output.Add("UserGroup.EditTableButton", "Edit");
		output.Add("UserGroup.FilterCardView", "Card View");
		output.Add("UserGroup.FilterExport", "Export");
		output.Add("UserGroup.HidingDetails", "Hiding Details");
		output.Add("UserGroup.ListView", "List View");
		output.Add("UserGroup.ShowingDetails", "Showing Details");
		output.Add("UserGroup.HideFilter", "Hide Filter");
		output.Add("UserGroups", "User Groups");
		output.Add("UserGroup.Refresh", "Refresh");
		output.Add("UserGroup.Save", "Save");
		output.Add("UserGroup.SaveFilter", "Save Filter");
		output.Add("UserGroup.ShowFilter", "Show Filter");
		output.Add("UserGroup.SavedFilters", "Saved Filters");
		output.Add("UserGroup.SavedFilterName", "Saved Filter Name");
		output.Add("UserGroup.NoRecords", "No Records");
		output.Add("UserGroup.Loading", "Loading User Groups, Please Wait");
		output.Add("UserGroup.UserGroup", "User Group");
		output.Add("UserGroup.UserGroupStart", "User Group Start");
		output.Add("UserGroup.UserGroupEnd", "User Group End");
		output.Add("UserGroup.UserGroupFilterExact", "Exact");
		output.Add("UserGroup.UserGroupIncludeInKeyword", "Keyword");
		output.Add("UserGroup.UserGroupNoRecords", "NoUserGroupRecords");
		output.Add("UserGroup.GroupId","Group Id");
		output.Add("UserGroup.TenantId","Tenant Id");
		output.Add("UserGroup.Name","Name");
		output.Add("UserGroup.NameFilterExact","Exact");
		output.Add("UserGroup.NameIncludeInKeyword","Keyword");
		output.Add("UserGroup.Enabled","Enabled");
		output.Add("UserGroup.Settings","Settings");
		return output;
	}

}
