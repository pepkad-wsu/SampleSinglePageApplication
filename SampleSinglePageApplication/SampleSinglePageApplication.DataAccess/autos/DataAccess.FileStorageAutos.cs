/// 
/// FileStorage
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
namespace SampleSinglePageApplication;
public partial interface IDataAccess
{
	DataObjects.FileStorage ConvertFileStorageAuto(SampleSinglePageApplication.EFModels.EFModels.FileStorage item);
	Task<DataObjects.BooleanResponse> DeleteFileStorageAuto(Guid fileStorageId, bool trySave = true);
	Task<DataObjects.BooleanResponse> DeleteFileStoragesAuto(List<Guid> fileStorageIds);
	Task<DataObjects.FileStorage> GetFileStorageAuto(Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,IQueryable<DataObjects.FileStorage>>? convert = null);
	Task<DataObjects.FileStorage> GetFileStorageAuto(Guid id,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,IQueryable<DataObjects.FileStorage>>? convert = null);
	Task<List<DataObjects.FileStorage>> GetFileStoragesAuto(List<Guid>? ids = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,IQueryable<DataObjects.FileStorage>>? convert = null);
	Task<DataObjects.FilterFileStoragesAuto> GetFileStoragesFilteredAuto(DataObjects.FilterFileStoragesAuto filter, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>>? overrideFilter = null,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>>? additionalFilter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,string, bool ,IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>>? additionalOrderByAuto = null, Func<DataObjects.FileStorage, DataObjects.FileStorage> additionalDataAuto = null  );
	Task<DataObjects.FileStorage> SaveFileStorageAuto(DataObjects.FileStorage item, bool tryLookup = true, bool trySave = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>, DataObjects.FileStorage, IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>>? lookup = null);
	Task<List<DataObjects.FileStorage>> SaveFileStoragesAuto(List<DataObjects.FileStorage> items, bool tryLookup = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>, DataObjects.FileStorage, IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>>? lookup = null);
	Dictionary<string, string> GetFileStorageIconAuto();

	Dictionary<string, string> GetFileStorageLanguageAuto();
}
public partial class DataAccess
{
	public DataObjects.FileStorage ConvertFileStorageAuto(SampleSinglePageApplication.EFModels.EFModels.FileStorage item) //SampleSinglePageApplication.DataObjects+FileStorage
	{
		var output = new DataObjects.FileStorage {
			FileId = item.FileId, //OTHER: base(Guid) : actual(Guid)
			TenantId = GuidOrEmpty(item.TenantId), //GUID nullable on ef model: base(Guid) : actual(Guid)
			ItemId = item.ItemId, //OTHER: base(Nullable`1) : actual(Guid)
			FileName = item.FileName ?? "", //string nullable on ef model: base(String) : actual(String)
			Extension = item.Extension ?? "", //string nullable on ef model: base(String) : actual(String)
			SourceFileId = item.SourceFileId ?? "", //string nullable on ef model: base(String) : actual(String)
			Bytes = item.Bytes, //OTHER: base(Nullable`1) : actual(Int64)
			//LIST: base(Byte[]) : actual(Byte)
			UploadDate = item.UploadDate ?? new DateTime(), //int nullable on ef model: base(DateTime) : actual(DateTime)
			UserId = item.UserId, //OTHER: base(Nullable`1) : actual(Guid)
// not on ef model			Base64value = item.Base64value, //OTHER: base(String) : actual(String)
		};
		return output;
	}
	public async Task<DataObjects.BooleanResponse> DeleteFileStorageAuto(Guid fileStorageId, bool trySave = true) //SampleSinglePageApplication.DataObjects+FileStorage
	{
		DataObjects.BooleanResponse output = new DataObjects.BooleanResponse();
		var rec = await data.FileStorages.FirstOrDefaultAsync(x => x.FileId == fileStorageId);
		if (rec == null) {
			output.Messages.Add("Error Deleting FileStorage " + fileStorageId.ToString() + " - Record No Longer Exists");
		} else {
			data.FileStorages.Remove(rec);
			try {
				if (trySave) {
					await data.SaveChangesAsync();
				}
				output.Result = true;
				
				await SignalRUpdate(new DataObjects.SignalRUpdate {
					TenantId = rec.TenantId,
					ItemId = rec.FileId.ToString(),
					UpdateType = DataObjects.SignalRUpdateType.FileStorage,
					Message = "DeletedFileStorage"
				});
			} catch (Exception ex) {
				output.Messages.Add("Error Deleting FileStorage " + fileStorageId.ToString() + " - " + ex.Message);
			}
		}
		return output;
	}

	public async Task<DataObjects.BooleanResponse> DeleteFileStoragesAuto(List<Guid> fileStorageIds)  //SampleSinglePageApplication.DataObjects+FileStorage
	{
		DataObjects.BooleanResponse output = new DataObjects.BooleanResponse();
		var recs = await data.FileStorages.Where(x => fileStorageIds.Any(id => id == x.FileId)).ToListAsync();
		data.FileStorages.RemoveRange(recs);
		try {
			await data.SaveChangesAsync();
			output.Result = true;
		} catch (Exception ex) {
			output.Messages.Add("Error Deleting FileStorages " + string.Join(",", fileStorageIds.Select(o => o.ToString())) + " - " + ex.Message);
		}
		return output;
	}

	public async Task<DataObjects.FileStorage> GetFileStorageAuto(Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,IQueryable<DataObjects.FileStorage>>? convert = null)  //SampleSinglePageApplication.DataObjects+FileStorage
	{
		return await GetFileStorageAutoPrivate(null, filter, convert);
	}
	public async Task<DataObjects.FileStorage> GetFileStorageAuto(Guid id,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,IQueryable<DataObjects.FileStorage>>? convert = null)  //SampleSinglePageApplication.DataObjects+FileStorage
	{
		return await GetFileStorageAutoPrivate(id, filter, convert);
	}
	private async Task<DataObjects.FileStorage> GetFileStorageAutoPrivate(Guid? id, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,IQueryable<DataObjects.FileStorage>>? convert = null)  //SampleSinglePageApplication.DataObjects+FileStorage
	{
		DataObjects.FileStorage output = new DataObjects.FileStorage();
		output.ActionResponse = GetNewActionResponse();
		List<DataObjects.FileStorage> records = null;
		if(id != null) {
			records = await GetFileStoragesAuto(new List<Guid>() { id.Value }, filter, convert );
		} else {
			records = await GetFileStoragesAuto(null, filter, convert );
		}
		if (records != null && records.Count() > 0) {
			output = records.Single();
			output.ActionResponse.Result = true;
		}
		else {
			output.ActionResponse.Messages.Add("FileStorage " + id.ToString() + " Does Not Exist");
		}
		return output;
	}
	public async Task<List<DataObjects.FileStorage>> GetFileStoragesAuto(List<Guid>? ids = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,IQueryable<DataObjects.FileStorage>>? convert = null)  //SampleSinglePageApplication.DataObjects+FileStorage
	{
		List<DataObjects.FileStorage> output = new List<DataObjects.FileStorage>();
		IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>? recs = null;
		if (ids != null) {
			recs = data.FileStorages.Where(o => ids.Any(id => id == o.FileId)).AsQueryable();
		} else {
			recs = data.FileStorages.AsQueryable();
		}
		if (filter != null) {
			recs = filter(recs);
		}
		if (convert != null) {
			output = await (convert(recs)).ToListAsync();
		} else {
			List<SampleSinglePageApplication.EFModels.EFModels.FileStorage> records = await recs.ToListAsync();
			foreach(var o in records) {
				output.Add(ConvertFileStorageAuto(o));
			}
		}

		return output;
	}
	public async Task<DataObjects.FilterFileStoragesAuto> GetFileStoragesFilteredAuto(DataObjects.FilterFileStoragesAuto filter, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>>? overrideFilter = null,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>>? additionalFilter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>,string, bool ,IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>>? additionalOrderByAuto = null, Func<DataObjects.FileStorage, DataObjects.FileStorage> additionalDataAuto = null  )                    
	{
		DataObjects.FilterFileStoragesAuto output = filter;                                                                       
		output.ActionResponse = GetNewActionResponse();
		output.Records = null;
		
		output.Columns = new List<DataObjects.FilterColumn> {
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "File Id",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "fileId",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Tenant Id",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "tenantId",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Item Id",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "itemId",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "File Name",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "fileName",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Extension",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "extension",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Source File Id",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "sourceFileId",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Bytes",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "bytes",                                                      
				DataType = "number"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Upload Date",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "uploadDate",                                                      
				DataType = "datetime"                                                                                  
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "User Id",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "userId",                                                      
				DataType = "string"                                                                                    
			},
		};
	
		IQueryable<FileStorage> recs = data.FileStorages; 
		recs = recs.Where(x => x.TenantId == output.TenantId);                                               
		if (overrideFilter != null) {
			recs = overrideFilter(recs);
		} else {
			if(additionalFilter != null) {
				recs = additionalFilter(recs);
			}
			if (GuidOrEmpty(filter.FileId) != Guid.Empty) {
				recs = recs.Where(o => GuidOrEmpty(o.FileId) == GuidOrEmpty(filter.FileId)); // Guid : FileId
			}
			// TODO: Guid : TenantId
			if (GuidOrEmpty(filter.ItemId) != Guid.Empty) {
				recs = recs.Where(o => GuidOrEmpty(o.ItemId) == GuidOrEmpty(filter.ItemId)); // Guid : ItemId
			}
			if (!string.IsNullOrWhiteSpace(filter.FileName)) {
				if (filter.FileNameFilterExact) {
					recs = recs.Where(o => o.FileName == filter.FileName); // String : FileName
				} else {
					recs = recs.Where(o => o.FileName.Contains(filter.FileName)); // String : FileName
				}
			}
			if (!string.IsNullOrWhiteSpace(filter.Extension)) {
				if (filter.ExtensionFilterExact) {
					recs = recs.Where(o => o.Extension == filter.Extension); // String : Extension
				} else {
					recs = recs.Where(o => o.Extension.Contains(filter.Extension)); // String : Extension
				}
			}
			if (!string.IsNullOrWhiteSpace(filter.SourceFileId)) {
				if (filter.SourceFileIdFilterExact) {
					recs = recs.Where(o => o.SourceFileId == filter.SourceFileId); // String : SourceFileId
				} else {
					recs = recs.Where(o => o.SourceFileId.Contains(filter.SourceFileId)); // String : SourceFileId
				}
			}
			if (filter.Bytes.HasValue) {
				recs = recs.Where(o => o.Bytes == filter.Bytes); // Int64 : Bytes
			}
			if (filter.UploadDate.HasValue) {
				recs = recs.Where(o => o.UploadDate == filter.UploadDate); // DateTime : UploadDate
			} else {
				if (filter.UploadDateStart.HasValue) {
					recs = recs.Where(o => o.UploadDate >= filter.UploadDateStart.Value); // DateTime : UploadDate
				}
				if (filter.UploadDateEnd.HasValue) {
					recs = recs.Where(o => o.UploadDate <= filter.UploadDateEnd.Value); // DateTime : UploadDate
				}
			}
			if (GuidOrEmpty(filter.UserId) != Guid.Empty) {
				recs = recs.Where(o => GuidOrEmpty(o.UserId) == GuidOrEmpty(filter.UserId)); // Guid : UserId
			}
		}

		if (!string.IsNullOrWhiteSpace(filter.Keyword)) {
			recs = recs.Where(o =>
				(filter.FileNameIncludeInKeyword && o.FileName.Contains(string.Empty + filter.FileName)) || 
				(filter.ExtensionIncludeInKeyword && o.Extension.Contains(string.Empty + filter.Extension)) || 
				(filter.SourceFileIdIncludeInKeyword && o.SourceFileId.Contains(string.Empty + filter.SourceFileId))
			);
		}

		bool Ascending = true;
		if (StringOrEmpty(output.SortOrder).ToUpper() == "DESC")
		{
		    Ascending = false;
		}
		
		switch (StringOrEmpty(output.Sort).ToUpper())
		{
			case "FILEID":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.FileId).ThenBy(x => x.FileId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.FileId).ThenByDescending(x => x.FileId);                    
				}
				break;
			case "TENANTID":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.TenantId).ThenBy(x => x.FileId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.TenantId).ThenByDescending(x => x.FileId);                    
				}
				break;
			case "ITEMID":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.ItemId).ThenBy(x => x.FileId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.ItemId).ThenByDescending(x => x.FileId);                    
				}
				break;
			case "FILENAME":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.FileName).ThenBy(x => x.FileId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.FileName).ThenByDescending(x => x.FileId);                    
				}
				break;
			case "EXTENSION":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.Extension).ThenBy(x => x.FileId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.Extension).ThenByDescending(x => x.FileId);                    
				}
				break;
			case "SOURCEFILEID":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.SourceFileId).ThenBy(x => x.FileId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.SourceFileId).ThenByDescending(x => x.FileId);                    
				}
				break;
			case "BYTES":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.Bytes).ThenBy(x => x.FileId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.Bytes).ThenByDescending(x => x.FileId);                    
				}
				break;
			case "VALUE":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.Value).ThenBy(x => x.FileId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.Value).ThenByDescending(x => x.FileId);                    
				}
				break;
			case "UPLOADDATE":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.UploadDate).ThenBy(x => x.FileId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.UploadDate).ThenByDescending(x => x.FileId);                    
				}
				break;
			case "USERID":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.UserId).ThenBy(x => x.FileId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.UserId).ThenByDescending(x => x.FileId);                    
				}
				break;
		}
		if (additionalOrderByAuto != null) {
			recs = additionalOrderByAuto(recs,StringOrEmpty(output.Sort).ToUpper(),Ascending);
		}
	
		if (recs != null && recs.Count() > 0)
		{
	
			int TotalRecords = recs.Count();
			output.RecordCount = TotalRecords;
	
			if (output.RecordsPerPage > 0)
			{
				// We are filtering records per page
				if (output.RecordsPerPage >= TotalRecords)
					{
					output.Page = 1;
					output.PageCount = 1;
				}
				else
				{
					// Figure out the page count
					if (output.Page < 1) { output.Page = 1; }
					if (output.RecordsPerPage < 1) { output.RecordsPerPage = 25; }
					decimal decPages = (decimal)TotalRecords / (decimal)output.RecordsPerPage;
					decPages = Math.Ceiling(decPages);
					output.PageCount = (int)decPages;
	
					if (output.Page > output.PageCount)
					{
						output.Page = output.PageCount;
					}
	
					if (output.Page > 1)
					{
						recs = recs.Skip((output.Page - 1) * output.RecordsPerPage).Take(output.RecordsPerPage);
					}
					else
					{
						recs = recs.Take(output.RecordsPerPage);
					}
	
				}
			}
	
			// grab the id's now that it is fitered.
			var ids = await recs.Select(o => o.FileId).ToListAsync();                                                  
			// then use the auto method to read them from the database
			var autoRecs = await this.GetFileStoragesAuto(ids);                                                               
	
			// loop over the sorted / ordered ids list and build the records output base on that order,
			// not the order returned by the auto recs
			List<DataObjects.FileStorage> records = new List<DataObjects.FileStorage>();                                           
			foreach (var id in ids)
			{
			    // find the rec out of the autos
			    var autoRec = autoRecs.Single(o => o.FileId == id);                                                    
			    // add any addtional data we need
			    if (additionalDataAuto != null) {
					autoRec = additionalDataAuto(autoRec);
			    }
			    records.Add(autoRec);
			}
	
			output.Records = records.ToArray();
		}
	
		output.ActionResponse.Result = true;
	
		return output;
	}
	public async Task<DataObjects.FileStorage> SaveFileStorageAuto(DataObjects.FileStorage item, bool tryLookup = true, bool trySave = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>, DataObjects.FileStorage, IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>>? lookup = null)  //SampleSinglePageApplication.DataObjects+FileStorage
	{
		FileStorage? rec = null;
		item.ActionResponse = GetNewActionResponse();
		if (tryLookup) {
			if (lookup == null) {
				rec = await data.FileStorages.FirstOrDefaultAsync(o => o.FileId == item.FileId);
			} else {
				rec = await lookup(data.FileStorages.AsQueryable(), item).FirstOrDefaultAsync();
			}
			if(rec != null) {
				 item.FileId = rec.FileId;
			}
		}
		var newRecord = false;
		if (rec == null) {
			if (item.FileId == Guid.Empty){
				rec = new EFModels.EFModels.FileStorage();
				item.FileId = Guid.NewGuid();
				rec.FileId = item.FileId;
				newRecord = true;
			} else {
				item.ActionResponse.Messages.Add("Error Saving FileStorage " + item.FileId.ToString() + " - Record No Longer Exists");
				return item;
			}
		}
		item.FileName = MaxStringLength(item.FileName,255);
		item.Extension = MaxStringLength(item.Extension,15);
		item.SourceFileId = MaxStringLength(item.SourceFileId,100);

		rec.TenantId = item.TenantId; //OTHER: base(Guid) : actual(Guid)
		rec.ItemId = item.ItemId; //OTHER: base(Nullable`1) : actual(Guid)
		rec.FileName = item.FileName; //OTHER: base(String) : actual(String)
		rec.Extension = item.Extension; //OTHER: base(String) : actual(String)
		rec.SourceFileId = item.SourceFileId; //OTHER: base(String) : actual(String)
		rec.Bytes = item.Bytes; //OTHER: base(Nullable`1) : actual(Int64)
		//LIST: base(Byte[]) : actual(Byte)
		rec.UploadDate = item.UploadDate; //OTHER: base(DateTime) : actual(DateTime)
		rec.UserId = item.UserId; //OTHER: base(Nullable`1) : actual(Guid)
		//rec.Base64value = item.Base64value; //OTHER: base(String) : actual(String)
		//rec.ActionResponse = item.ActionResponse; //OTHER: base(BooleanResponse) : actual(BooleanResponse)

		try
		{
			if (newRecord)
			{
				data.FileStorages.Add(rec);
			}
			if (trySave) {
				await data.SaveChangesAsync();
				//await SignalRUpdate(new DataObjects.SignalRUpdate
				//{
				//	//TenantId = item.TenantId,
				//	ItemId = item.FileStorageId.ToString(),
				//	UpdateType = DataObjects.SignalRUpdateType.FileStorage,
				//	Message = "FileStorageSaved",
				//	Object = item
				//});
			}
			item.ActionResponse.Result = true;
		}
		catch (Exception ex)
		{
			item.ActionResponse.Messages.Add("Error Saving FileStorage " + item.FileId.ToString() + " - " + ex.Message);
		}
		return item;
	}
	public async Task<List<DataObjects.FileStorage>> SaveFileStoragesAuto(List<DataObjects.FileStorage> items, bool tryLookup = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>, DataObjects.FileStorage, IQueryable<SampleSinglePageApplication.EFModels.EFModels.FileStorage>>? lookup = null)  //SampleSinglePageApplication.DataObjects+FileStorage
	{
		List<DataObjects.FileStorage> output = new List<DataObjects.FileStorage>();
		foreach(var item in items) {
			DataObjects.FileStorage saved = await SaveFileStorageAuto(item, tryLookup, false, lookup);
			if (saved != null && saved.ActionResponse != null && saved.ActionResponse.Result) {
				output.Add(saved);
			}
		}
		await data.SaveChangesAsync();
		return output;
	}

	public Dictionary<string, string> GetFileStorageIconAuto()
	{
		var output = new Dictionary<string, string>();
		return output;
	}
	public Dictionary<string, string> GetFileStorageLanguageAuto()
	{
		var output = new Dictionary<string, string>();
		output.Add("FileStorage", "File Storage");
		output.Add("FileStorage.AddNew", "Add New");
		output.Add("FileStorage.Back", "Back");
		output.Add("FileStorage.Cancel", "Cancel");
		output.Add("FileStorage.CancelDeleteFilter", "Cancel");
		output.Add("FileStorage.Clear", "Clear");
		output.Add("FileStorage.ConfirmDelete", "Confirm Delete");
		output.Add("FileStorage.ConfirmDeleteFilter", "Confirm Delete");
		output.Add("FileStorage.Delete", "Delete");
		output.Add("FileStorage.DeleteFilter", "Delete Filter");
		output.Add("FileStorage.Edit", "Edit");
		output.Add("FileStorage.EditTableButton", "Edit");
		output.Add("FileStorage.FilterCardView", "Card View");
		output.Add("FileStorage.FilterExport", "Export");
		output.Add("FileStorage.HidingDetails", "Hiding Details");
		output.Add("FileStorage.ListView", "List View");
		output.Add("FileStorage.ShowingDetails", "Showing Details");
		output.Add("FileStorage.HideFilter", "Hide Filter");
		output.Add("FileStorages", "File Storages");
		output.Add("FileStorage.Refresh", "Refresh");
		output.Add("FileStorage.Save", "Save");
		output.Add("FileStorage.SaveFilter", "Save Filter");
		output.Add("FileStorage.ShowFilter", "Show Filter");
		output.Add("FileStorage.SavedFilters", "Saved Filters");
		output.Add("FileStorage.SavedFilterName", "Saved Filter Name");
		output.Add("FileStorage.NoRecords", "No Records");
		output.Add("FileStorage.Loading", "Loading File Storages, Please Wait");
		output.Add("FileStorage.FileStorage", "File Storage");
		output.Add("FileStorage.FileStorageStart", "File Storage Start");
		output.Add("FileStorage.FileStorageEnd", "File Storage End");
		output.Add("FileStorage.FileStorageFilterExact", "Exact");
		output.Add("FileStorage.FileStorageIncludeInKeyword", "Keyword");
		output.Add("FileStorage.FileStorageNoRecords", "NoFileStorageRecords");
		output.Add("FileStorage.FileId","File Id");
		output.Add("FileStorage.TenantId","Tenant Id");
		output.Add("FileStorage.ItemId","Item Id");
		output.Add("FileStorage.FileName","File Name");
		output.Add("FileStorage.FileNameFilterExact","Exact");
		output.Add("FileStorage.FileNameIncludeInKeyword","Keyword");
		output.Add("FileStorage.Extension","Extension");
		output.Add("FileStorage.ExtensionFilterExact","Exact");
		output.Add("FileStorage.ExtensionIncludeInKeyword","Keyword");
		output.Add("FileStorage.SourceFileId","Source File Id");
		output.Add("FileStorage.SourceFileIdFilterExact","Exact");
		output.Add("FileStorage.SourceFileIdIncludeInKeyword","Keyword");
		output.Add("FileStorage.Bytes","Bytes");
		output.Add("FileStorage.Value","Value");
		output.Add("FileStorage.UploadDateStart", "Upload Date Start");
		output.Add("FileStorage.UploadDateEnd", "Upload Date End");
		output.Add("FileStorage.UserId","User Id");
		return output;
	}

}
