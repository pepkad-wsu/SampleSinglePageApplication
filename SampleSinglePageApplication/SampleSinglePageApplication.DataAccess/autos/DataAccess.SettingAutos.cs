/// 
/// Setting
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
namespace SampleSinglePageApplication;
public partial interface IDataAccess
{
	DataObjects.Setting ConvertSettingAuto(SampleSinglePageApplication.EFModels.EFModels.Setting item);
	Task<DataObjects.BooleanResponse> DeleteSettingAuto(Int32 settingId, bool trySave = true);
	Task<DataObjects.BooleanResponse> DeleteSettingsAuto(List<Int32> settingIds);
	Task<DataObjects.Setting> GetSettingAuto(Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,IQueryable<DataObjects.Setting>>? convert = null);
	Task<DataObjects.Setting> GetSettingAuto(Int32 id,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,IQueryable<DataObjects.Setting>>? convert = null);
	Task<List<DataObjects.Setting>> GetSettingsAuto(List<Int32>? ids = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,IQueryable<DataObjects.Setting>>? convert = null);
	Task<DataObjects.FilterSettingsAuto> GetSettingsFilteredAuto(DataObjects.FilterSettingsAuto filter, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>>? overrideFilter = null,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>>? additionalFilter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,string, bool ,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>>? additionalOrderByAuto = null, Func<DataObjects.Setting, DataObjects.Setting> additionalDataAuto = null  );
	Task<DataObjects.Setting> SaveSettingAuto(DataObjects.Setting item, bool tryLookup = true, bool trySave = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>, DataObjects.Setting, IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>>? lookup = null);
	Task<List<DataObjects.Setting>> SaveSettingsAuto(List<DataObjects.Setting> items, bool tryLookup = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>, DataObjects.Setting, IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>>? lookup = null);
	Dictionary<string, string> GetSettingIconAuto();

	Dictionary<string, string> GetSettingLanguageAuto();
}
public partial class DataAccess
{
	public DataObjects.Setting ConvertSettingAuto(SampleSinglePageApplication.EFModels.EFModels.Setting item) //SampleSinglePageApplication.DataObjects+Setting
	{
		var output = new DataObjects.Setting {
			SettingId = item.SettingId, //OTHER: base(Int32) : actual(Int32)
			SettingName = item.SettingName, //OTHER: base(String) : actual(String)
			SettingType = item.SettingType ?? "", //string nullable on ef model: base(String) : actual(String)
			SettingNotes = item.SettingNotes ?? "", //string nullable on ef model: base(String) : actual(String)
			SettingText = item.SettingText ?? "", //string nullable on ef model: base(String) : actual(String)
			TenantId = item.TenantId, //OTHER: base(Nullable`1) : actual(Guid)
			UserId = item.UserId, //OTHER: base(Nullable`1) : actual(Guid)
		};
		return output;
	}
	public async Task<DataObjects.BooleanResponse> DeleteSettingAuto(Int32 settingId, bool trySave = true) //SampleSinglePageApplication.DataObjects+Setting
	{
		DataObjects.BooleanResponse output = new DataObjects.BooleanResponse();
		var rec = await data.Settings.FirstOrDefaultAsync(x => x.SettingId == settingId);
		if (rec == null) {
			output.Messages.Add("Error Deleting Setting " + settingId.ToString() + " - Record No Longer Exists");
		} else {
			data.Settings.Remove(rec);
			try {
				if (trySave) {
					await data.SaveChangesAsync();
				}
				output.Result = true;
				
				await SignalRUpdate(new DataObjects.SignalRUpdate {
					TenantId = rec.TenantId,
					ItemId = rec.SettingId.ToString(),
					UpdateType = DataObjects.SignalRUpdateType.Setting,
					Message = "DeletedSetting"
				});
			} catch (Exception ex) {
				output.Messages.Add("Error Deleting Setting " + settingId.ToString() + " - " + ex.Message);
			}
		}
		return output;
	}

	public async Task<DataObjects.BooleanResponse> DeleteSettingsAuto(List<Int32> settingIds)  //SampleSinglePageApplication.DataObjects+Setting
	{
		DataObjects.BooleanResponse output = new DataObjects.BooleanResponse();
		var recs = await data.Settings.Where(x => settingIds.Any(id => id == x.SettingId)).ToListAsync();
		data.Settings.RemoveRange(recs);
		try {
			await data.SaveChangesAsync();
			output.Result = true;
		} catch (Exception ex) {
			output.Messages.Add("Error Deleting Settings " + string.Join(",", settingIds.Select(o => o.ToString())) + " - " + ex.Message);
		}
		return output;
	}

	public async Task<DataObjects.Setting> GetSettingAuto(Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,IQueryable<DataObjects.Setting>>? convert = null)  //SampleSinglePageApplication.DataObjects+Setting
	{
		return await GetSettingAutoPrivate(null, filter, convert);
	}
	public async Task<DataObjects.Setting> GetSettingAuto(Int32 id,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,IQueryable<DataObjects.Setting>>? convert = null)  //SampleSinglePageApplication.DataObjects+Setting
	{
		return await GetSettingAutoPrivate(id, filter, convert);
	}
	private async Task<DataObjects.Setting> GetSettingAutoPrivate(Int32? id, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,IQueryable<DataObjects.Setting>>? convert = null)  //SampleSinglePageApplication.DataObjects+Setting
	{
		DataObjects.Setting output = new DataObjects.Setting();
		output.ActionResponse = GetNewActionResponse();
		List<DataObjects.Setting> records = null;
		if(id != null) {
			records = await GetSettingsAuto(new List<Int32>() { id.Value }, filter, convert );
		} else {
			records = await GetSettingsAuto(null, filter, convert );
		}
		if (records != null && records.Count() > 0) {
			output = records.Single();
			output.ActionResponse.Result = true;
		}
		else {
			output.ActionResponse.Messages.Add("Setting " + id.ToString() + " Does Not Exist");
		}
		return output;
	}
	public async Task<List<DataObjects.Setting>> GetSettingsAuto(List<Int32>? ids = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,IQueryable<DataObjects.Setting>>? convert = null)  //SampleSinglePageApplication.DataObjects+Setting
	{
		List<DataObjects.Setting> output = new List<DataObjects.Setting>();
		IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>? recs = null;
		if (ids != null) {
			recs = data.Settings.Where(o => ids.Any(id => id == o.SettingId)).AsQueryable();
		} else {
			recs = data.Settings.AsQueryable();
		}
		if (filter != null) {
			recs = filter(recs);
		}
		if (convert != null) {
			output = await (convert(recs)).ToListAsync();
		} else {
			List<SampleSinglePageApplication.EFModels.EFModels.Setting> records = await recs.ToListAsync();
			foreach(var o in records) {
				output.Add(ConvertSettingAuto(o));
			}
		}

		return output;
	}
	public async Task<DataObjects.FilterSettingsAuto> GetSettingsFilteredAuto(DataObjects.FilterSettingsAuto filter, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>>? overrideFilter = null,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>>? additionalFilter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>,string, bool ,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>>? additionalOrderByAuto = null, Func<DataObjects.Setting, DataObjects.Setting> additionalDataAuto = null  )                    
	{
		DataObjects.FilterSettingsAuto output = filter;                                                                       
		output.ActionResponse = GetNewActionResponse();
		output.Records = null;
		
		output.Columns = new List<DataObjects.FilterColumn> {
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Setting Id",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "settingId",                                                      
				DataType = "number"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Setting Name",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "settingName",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Setting Type",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "settingType",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Setting Notes",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "settingNotes",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Setting Text",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "settingText",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Tenant Id",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "tenantId",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "User Id",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "userId",                                                      
				DataType = "string"                                                                                    
			},
		};
	
		IQueryable<Setting> recs = data.Settings; 
		recs = recs.Where(x => x.TenantId == output.TenantId);                                               
		if (overrideFilter != null) {
			recs = overrideFilter(recs);
		} else {
			if(additionalFilter != null) {
				recs = additionalFilter(recs);
			}
			if (filter.SettingId.HasValue) {
				recs = recs.Where(o => o.SettingId == filter.SettingId); // Int32 : SettingId
			}
			if (!string.IsNullOrWhiteSpace(filter.SettingName)) {
				if (filter.SettingNameFilterExact) {
					recs = recs.Where(o => o.SettingName == filter.SettingName); // String : SettingName
				} else {
					recs = recs.Where(o => o.SettingName.Contains(filter.SettingName)); // String : SettingName
				}
			}
			if (!string.IsNullOrWhiteSpace(filter.SettingType)) {
				if (filter.SettingTypeFilterExact) {
					recs = recs.Where(o => o.SettingType == filter.SettingType); // String : SettingType
				} else {
					recs = recs.Where(o => o.SettingType.Contains(filter.SettingType)); // String : SettingType
				}
			}
			if (!string.IsNullOrWhiteSpace(filter.SettingNotes)) {
				if (filter.SettingNotesFilterExact) {
					recs = recs.Where(o => o.SettingNotes == filter.SettingNotes); // String : SettingNotes
				} else {
					recs = recs.Where(o => o.SettingNotes.Contains(filter.SettingNotes)); // String : SettingNotes
				}
			}
			if (!string.IsNullOrWhiteSpace(filter.SettingText)) {
				if (filter.SettingTextFilterExact) {
					recs = recs.Where(o => o.SettingText == filter.SettingText); // String : SettingText
				} else {
					recs = recs.Where(o => o.SettingText.Contains(filter.SettingText)); // String : SettingText
				}
			}
			// TODO: Guid : TenantId
			if (GuidOrEmpty(filter.UserId) != Guid.Empty) {
				recs = recs.Where(o => GuidOrEmpty(o.UserId) == GuidOrEmpty(filter.UserId)); // Guid : UserId
			}
		}

		if (!string.IsNullOrWhiteSpace(filter.Keyword)) {
			recs = recs.Where(o =>
				(filter.SettingNameIncludeInKeyword && o.SettingName.Contains(string.Empty + filter.SettingName)) || 
				(filter.SettingTypeIncludeInKeyword && o.SettingType.Contains(string.Empty + filter.SettingType)) || 
				(filter.SettingNotesIncludeInKeyword && o.SettingNotes.Contains(string.Empty + filter.SettingNotes)) || 
				(filter.SettingTextIncludeInKeyword && o.SettingText.Contains(string.Empty + filter.SettingText))
			);
		}

		bool Ascending = true;
		if (StringOrEmpty(output.SortOrder).ToUpper() == "DESC")
		{
		    Ascending = false;
		}
		
		switch (StringOrEmpty(output.Sort).ToUpper())
		{
			case "SETTINGID":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.SettingId).ThenBy(x => x.SettingId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.SettingId).ThenByDescending(x => x.SettingId);                    
				}
				break;
			case "SETTINGNAME":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.SettingName).ThenBy(x => x.SettingId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.SettingName).ThenByDescending(x => x.SettingId);                    
				}
				break;
			case "SETTINGTYPE":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.SettingType).ThenBy(x => x.SettingId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.SettingType).ThenByDescending(x => x.SettingId);                    
				}
				break;
			case "SETTINGNOTES":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.SettingNotes).ThenBy(x => x.SettingId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.SettingNotes).ThenByDescending(x => x.SettingId);                    
				}
				break;
			case "SETTINGTEXT":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.SettingText).ThenBy(x => x.SettingId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.SettingText).ThenByDescending(x => x.SettingId);                    
				}
				break;
			case "TENANTID":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.TenantId).ThenBy(x => x.SettingId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.TenantId).ThenByDescending(x => x.SettingId);                    
				}
				break;
			case "USERID":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.UserId).ThenBy(x => x.SettingId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.UserId).ThenByDescending(x => x.SettingId);                    
				}
				break;
		}
		if (additionalOrderByAuto != null) {
			recs = additionalOrderByAuto(recs,StringOrEmpty(output.Sort).ToUpper(),Ascending);
		}
	
		if (recs != null && recs.Count() > 0)
		{
	
			int TotalRecords = recs.Count();
			output.RecordCount = TotalRecords;
	
			if (output.RecordsPerPage > 0)
			{
				// We are filtering records per page
				if (output.RecordsPerPage >= TotalRecords)
					{
					output.Page = 1;
					output.PageCount = 1;
				}
				else
				{
					// Figure out the page count
					if (output.Page < 1) { output.Page = 1; }
					if (output.RecordsPerPage < 1) { output.RecordsPerPage = 25; }
					decimal decPages = (decimal)TotalRecords / (decimal)output.RecordsPerPage;
					decPages = Math.Ceiling(decPages);
					output.PageCount = (int)decPages;
	
					if (output.Page > output.PageCount)
					{
						output.Page = output.PageCount;
					}
	
					if (output.Page > 1)
					{
						recs = recs.Skip((output.Page - 1) * output.RecordsPerPage).Take(output.RecordsPerPage);
					}
					else
					{
						recs = recs.Take(output.RecordsPerPage);
					}
	
				}
			}
	
			// grab the id's now that it is fitered.
			var ids = await recs.Select(o => o.SettingId).ToListAsync();                                                  
			// then use the auto method to read them from the database
			var autoRecs = await this.GetSettingsAuto(ids);                                                               
	
			// loop over the sorted / ordered ids list and build the records output base on that order,
			// not the order returned by the auto recs
			List<DataObjects.Setting> records = new List<DataObjects.Setting>();                                           
			foreach (var id in ids)
			{
			    // find the rec out of the autos
			    var autoRec = autoRecs.Single(o => o.SettingId == id);                                                    
			    // add any addtional data we need
			    if (additionalDataAuto != null) {
					autoRec = additionalDataAuto(autoRec);
			    }
			    records.Add(autoRec);
			}
	
			output.Records = records.ToArray();
		}
	
		output.ActionResponse.Result = true;
	
		return output;
	}
	public async Task<DataObjects.Setting> SaveSettingAuto(DataObjects.Setting item, bool tryLookup = true, bool trySave = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>, DataObjects.Setting, IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>>? lookup = null)  //SampleSinglePageApplication.DataObjects+Setting
	{
		Setting? rec = null;
		item.ActionResponse = GetNewActionResponse();
		if (tryLookup) {
			if (lookup == null) {
				rec = await data.Settings.FirstOrDefaultAsync(o => o.SettingId == item.SettingId);
			} else {
				rec = await lookup(data.Settings.AsQueryable(), item).FirstOrDefaultAsync();
			}
			if(rec != null) {
				 item.SettingId = rec.SettingId;
			}
		}
		var newRecord = false;
		if (rec == null) {
			if (item.SettingId == 0 ) {
				rec = new EFModels.EFModels.Setting();
				// no need to set a primary key for auto increment int
				newRecord = true;
			} else {
				item.ActionResponse.Messages.Add("Error Saving Setting " + item.SettingId.ToString() + " - Record No Longer Exists");
				return item;
			}
		}
		item.SettingName = MaxStringLength(item.SettingName,100);
		item.SettingType = MaxStringLength(item.SettingType,100);

		rec.SettingName = item.SettingName; //OTHER: base(String) : actual(String)
		rec.SettingType = item.SettingType; //OTHER: base(String) : actual(String)
		rec.SettingNotes = item.SettingNotes; //OTHER: base(String) : actual(String)
		rec.SettingText = item.SettingText; //OTHER: base(String) : actual(String)
		rec.TenantId = item.TenantId; //OTHER: base(Nullable`1) : actual(Guid)
		rec.UserId = item.UserId; //OTHER: base(Nullable`1) : actual(Guid)
		//rec.ActionResponse = item.ActionResponse; //OTHER: base(BooleanResponse) : actual(BooleanResponse)

		try
		{
			if (newRecord)
			{
				data.Settings.Add(rec);
			}
			if (trySave) {
				await data.SaveChangesAsync();
				//await SignalRUpdate(new DataObjects.SignalRUpdate
				//{
				//	//TenantId = item.TenantId,
				//	ItemId = item.SettingId.ToString(),
				//	UpdateType = DataObjects.SignalRUpdateType.Setting,
				//	Message = "SettingSaved",
				//	Object = item
				//});
			}
			item.ActionResponse.Result = true;
		}
		catch (Exception ex)
		{
			item.ActionResponse.Messages.Add("Error Saving Setting " + item.SettingId.ToString() + " - " + ex.Message);
		}
		return item;
	}
	public async Task<List<DataObjects.Setting>> SaveSettingsAuto(List<DataObjects.Setting> items, bool tryLookup = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>, DataObjects.Setting, IQueryable<SampleSinglePageApplication.EFModels.EFModels.Setting>>? lookup = null)  //SampleSinglePageApplication.DataObjects+Setting
	{
		List<DataObjects.Setting> output = new List<DataObjects.Setting>();
		foreach(var item in items) {
			DataObjects.Setting saved = await SaveSettingAuto(item, tryLookup, false, lookup);
			if (saved != null && saved.ActionResponse != null && saved.ActionResponse.Result) {
				output.Add(saved);
			}
		}
		await data.SaveChangesAsync();
		return output;
	}

	public Dictionary<string, string> GetSettingIconAuto()
	{
		var output = new Dictionary<string, string>();
		return output;
	}
	public Dictionary<string, string> GetSettingLanguageAuto()
	{
		var output = new Dictionary<string, string>();
		output.Add("Setting", "Setting");
		output.Add("Setting.AddNew", "Add New");
		output.Add("Setting.Back", "Back");
		output.Add("Setting.Cancel", "Cancel");
		output.Add("Setting.CancelDeleteFilter", "Cancel");
		output.Add("Setting.Clear", "Clear");
		output.Add("Setting.ConfirmDelete", "Confirm Delete");
		output.Add("Setting.ConfirmDeleteFilter", "Confirm Delete");
		output.Add("Setting.Delete", "Delete");
		output.Add("Setting.DeleteFilter", "Delete Filter");
		output.Add("Setting.Edit", "Edit");
		output.Add("Setting.EditTableButton", "Edit");
		output.Add("Setting.FilterCardView", "Card View");
		output.Add("Setting.FilterExport", "Export");
		output.Add("Setting.HidingDetails", "Hiding Details");
		output.Add("Setting.ListView", "List View");
		output.Add("Setting.ShowingDetails", "Showing Details");
		output.Add("Setting.HideFilter", "Hide Filter");
		output.Add("Settings", "Settings");
		output.Add("Setting.Refresh", "Refresh");
		output.Add("Setting.Save", "Save");
		output.Add("Setting.SaveFilter", "Save Filter");
		output.Add("Setting.ShowFilter", "Show Filter");
		output.Add("Setting.SavedFilters", "Saved Filters");
		output.Add("Setting.SavedFilterName", "Saved Filter Name");
		output.Add("Setting.NoRecords", "No Records");
		output.Add("Setting.Loading", "Loading Settings, Please Wait");
		output.Add("Setting.Setting", "Setting");
		output.Add("Setting.SettingStart", "Setting Start");
		output.Add("Setting.SettingEnd", "Setting End");
		output.Add("Setting.SettingFilterExact", "Exact");
		output.Add("Setting.SettingIncludeInKeyword", "Keyword");
		output.Add("Setting.SettingNoRecords", "NoSettingRecords");
		output.Add("Setting.SettingId","Setting Id");
		output.Add("Setting.SettingName","Setting Name");
		output.Add("Setting.SettingNameFilterExact","Exact");
		output.Add("Setting.SettingNameIncludeInKeyword","Keyword");
		output.Add("Setting.SettingType","Setting Type");
		output.Add("Setting.SettingTypeFilterExact","Exact");
		output.Add("Setting.SettingTypeIncludeInKeyword","Keyword");
		output.Add("Setting.SettingNotes","Setting Notes");
		output.Add("Setting.SettingNotesFilterExact","Exact");
		output.Add("Setting.SettingNotesIncludeInKeyword","Keyword");
		output.Add("Setting.SettingText","Setting Text");
		output.Add("Setting.SettingTextFilterExact","Exact");
		output.Add("Setting.SettingTextIncludeInKeyword","Keyword");
		output.Add("Setting.TenantId","Tenant Id");
		output.Add("Setting.UserId","User Id");
		return output;
	}

}
