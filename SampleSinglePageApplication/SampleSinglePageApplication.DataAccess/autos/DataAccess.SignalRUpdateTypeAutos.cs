/// 
/// SignalRUpdateType
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
namespace SampleSinglePageApplication;
public partial interface IDataAccess
{
	static DataObjects.SignalRUpdateType? ConvertSignalRUpdateTypeFromString(string? value) => throw new NotImplementedException();
	static string ConvertSignalRUpdateTypeToString(DataObjects.SignalRUpdateType? value) => throw new NotImplementedException();
}

public partial class DataAccess
{
	public static DataObjects.SignalRUpdateType? ConvertSignalRUpdateTypeFromString(string? value)  //SampleSinglePageApplication.DataObjects+SignalRUpdateType
	{
		DataObjects.SignalRUpdateType? output = DataObjects.SignalRUpdateType.Unknown;

		if (!string.IsNullOrWhiteSpace(value)) {
			var lowerValue = ("" + value.ToString()).ToLower();
			switch (lowerValue) {
				case "datamigration":
					output = DataObjects.SignalRUpdateType.DataMigration;
					break;
				case "department":
					output = DataObjects.SignalRUpdateType.Department;
					break;
				case "departmentgroup":
					output = DataObjects.SignalRUpdateType.DepartmentGroup;
					break;
				case "files":
					output = DataObjects.SignalRUpdateType.Files;
					break;
				case "filestorage":
					output = DataObjects.SignalRUpdateType.FileStorage;
					break;
				case "setting":
					output = DataObjects.SignalRUpdateType.Setting;
					break;
				case "tenant":
					output = DataObjects.SignalRUpdateType.Tenant;
					break;
				case "that":
					output = DataObjects.SignalRUpdateType.That;
					break;
				case "this":
					output = DataObjects.SignalRUpdateType.This;
					break;
				case "unknown":
					output = DataObjects.SignalRUpdateType.Unknown;
					break;
				case "user":
					output = DataObjects.SignalRUpdateType.User;
					break;
				case "usergroup":
					output = DataObjects.SignalRUpdateType.UserGroup;
					break;
				default:
					break;
			}
		}

		return output;
	}
	///
	/// SignalRUpdateType
	///
	/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
	/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
	///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
	///
	public static string ConvertSignalRUpdateTypeToString(DataObjects.SignalRUpdateType? value) //SampleSinglePageApplication.DataObjects+SignalRUpdateType
	{
		var output = "unknown";

		if (value != null)
		{
			switch (value)
			{
				case DataObjects.SignalRUpdateType.This:
					output = "this";
					break;
				case DataObjects.SignalRUpdateType.That:
					output = "that";
					break;
				case DataObjects.SignalRUpdateType.Setting:
					output = "setting";
					break;
				case DataObjects.SignalRUpdateType.Unknown:
					output = "unknown";
					break;
				case DataObjects.SignalRUpdateType.Files:
					output = "files";
					break;
				case DataObjects.SignalRUpdateType.DataMigration:
					output = "datamigration";
					break;
				case DataObjects.SignalRUpdateType.Department:
					output = "department";
					break;
				case DataObjects.SignalRUpdateType.DepartmentGroup:
					output = "departmentgroup";
					break;
				case DataObjects.SignalRUpdateType.FileStorage:
					output = "filestorage";
					break;
				case DataObjects.SignalRUpdateType.Tenant:
					output = "tenant";
					break;
				case DataObjects.SignalRUpdateType.User:
					output = "user";
					break;
				case DataObjects.SignalRUpdateType.UserGroup:
					output = "usergroup";
					break;
			default:
				break;
			}
		}

		return output;
	}

}
