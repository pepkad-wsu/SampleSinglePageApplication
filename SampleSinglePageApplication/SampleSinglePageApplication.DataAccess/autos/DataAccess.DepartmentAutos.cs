/// 
/// Department
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
namespace SampleSinglePageApplication;
public partial interface IDataAccess
{
	DataObjects.Department ConvertDepartmentAuto(SampleSinglePageApplication.EFModels.EFModels.Department item);
	Task<DataObjects.BooleanResponse> DeleteDepartmentAuto(Guid departmentId, bool trySave = true);
	Task<DataObjects.BooleanResponse> DeleteDepartmentsAuto(List<Guid> departmentIds);
	Task<DataObjects.Department> GetDepartmentAuto(Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,IQueryable<DataObjects.Department>>? convert = null);
	Task<DataObjects.Department> GetDepartmentAuto(Guid id,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,IQueryable<DataObjects.Department>>? convert = null);
	Task<List<DataObjects.Department>> GetDepartmentsAuto(List<Guid>? ids = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,IQueryable<DataObjects.Department>>? convert = null);
	Task<DataObjects.FilterDepartmentsAuto> GetDepartmentsFilteredAuto(DataObjects.FilterDepartmentsAuto filter, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>>? overrideFilter = null,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>>? additionalFilter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,string, bool ,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>>? additionalOrderByAuto = null, Func<DataObjects.Department, DataObjects.Department> additionalDataAuto = null  );
	Task<DataObjects.Department> SaveDepartmentAuto(DataObjects.Department item, bool tryLookup = true, bool trySave = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>, DataObjects.Department, IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>>? lookup = null);
	Task<List<DataObjects.Department>> SaveDepartmentsAuto(List<DataObjects.Department> items, bool tryLookup = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>, DataObjects.Department, IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>>? lookup = null);
	Dictionary<string, string> GetDepartmentIconAuto();

	Dictionary<string, string> GetDepartmentLanguageAuto();
}
public partial class DataAccess
{
	public DataObjects.Department ConvertDepartmentAuto(SampleSinglePageApplication.EFModels.EFModels.Department item) //SampleSinglePageApplication.DataObjects+Department
	{
		var output = new DataObjects.Department {
			DepartmentId = item.DepartmentId, //OTHER: base(Guid) : actual(Guid)
			TenantId = GuidOrEmpty(item.TenantId), //GUID nullable on ef model: base(Guid) : actual(Guid)
			DepartmentName = item.DepartmentName ?? "", //string nullable on ef model: base(String) : actual(String)
			ActiveDirectoryNames = item.ActiveDirectoryNames ?? "", //string nullable on ef model: base(String) : actual(String)
			Enabled = item.Enabled ?? false, //BOOL nullable on ef model: base(Boolean) : actual(Boolean)
			DepartmentGroupId = item.DepartmentGroupId, //OTHER: base(Nullable`1) : actual(Guid)
		};
		return output;
	}
	public async Task<DataObjects.BooleanResponse> DeleteDepartmentAuto(Guid departmentId, bool trySave = true) //SampleSinglePageApplication.DataObjects+Department
	{
		DataObjects.BooleanResponse output = new DataObjects.BooleanResponse();
		var rec = await data.Departments.FirstOrDefaultAsync(x => x.DepartmentId == departmentId);
		if (rec == null) {
			output.Messages.Add("Error Deleting Department " + departmentId.ToString() + " - Record No Longer Exists");
		} else {
			data.Departments.Remove(rec);
			try {
				if (trySave) {
					await data.SaveChangesAsync();
				}
				output.Result = true;
				
				await SignalRUpdate(new DataObjects.SignalRUpdate {
					TenantId = rec.TenantId,
					ItemId = rec.DepartmentId.ToString(),
					UpdateType = DataObjects.SignalRUpdateType.Department,
					Message = "DeletedDepartment"
				});
			} catch (Exception ex) {
				output.Messages.Add("Error Deleting Department " + departmentId.ToString() + " - " + ex.Message);
			}
		}
		return output;
	}

	public async Task<DataObjects.BooleanResponse> DeleteDepartmentsAuto(List<Guid> departmentIds)  //SampleSinglePageApplication.DataObjects+Department
	{
		DataObjects.BooleanResponse output = new DataObjects.BooleanResponse();
		var recs = await data.Departments.Where(x => departmentIds.Any(id => id == x.DepartmentId)).ToListAsync();
		data.Departments.RemoveRange(recs);
		try {
			await data.SaveChangesAsync();
			output.Result = true;
		} catch (Exception ex) {
			output.Messages.Add("Error Deleting Departments " + string.Join(",", departmentIds.Select(o => o.ToString())) + " - " + ex.Message);
		}
		return output;
	}

	public async Task<DataObjects.Department> GetDepartmentAuto(Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,IQueryable<DataObjects.Department>>? convert = null)  //SampleSinglePageApplication.DataObjects+Department
	{
		return await GetDepartmentAutoPrivate(null, filter, convert);
	}
	public async Task<DataObjects.Department> GetDepartmentAuto(Guid id,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,IQueryable<DataObjects.Department>>? convert = null)  //SampleSinglePageApplication.DataObjects+Department
	{
		return await GetDepartmentAutoPrivate(id, filter, convert);
	}
	private async Task<DataObjects.Department> GetDepartmentAutoPrivate(Guid? id, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,IQueryable<DataObjects.Department>>? convert = null)  //SampleSinglePageApplication.DataObjects+Department
	{
		DataObjects.Department output = new DataObjects.Department();
		output.ActionResponse = GetNewActionResponse();
		List<DataObjects.Department> records = null;
		if(id != null) {
			records = await GetDepartmentsAuto(new List<Guid>() { id.Value }, filter, convert );
		} else {
			records = await GetDepartmentsAuto(null, filter, convert );
		}
		if (records != null && records.Count() > 0) {
			output = records.Single();
			output.ActionResponse.Result = true;
		}
		else {
			output.ActionResponse.Messages.Add("Department " + id.ToString() + " Does Not Exist");
		}
		return output;
	}
	public async Task<List<DataObjects.Department>> GetDepartmentsAuto(List<Guid>? ids = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>>? filter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,IQueryable<DataObjects.Department>>? convert = null)  //SampleSinglePageApplication.DataObjects+Department
	{
		List<DataObjects.Department> output = new List<DataObjects.Department>();
		IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>? recs = null;
		if (ids != null) {
			recs = data.Departments.Where(o => ids.Any(id => id == o.DepartmentId)).AsQueryable();
		} else {
			recs = data.Departments.AsQueryable();
		}
		if (filter != null) {
			recs = filter(recs);
		}
		if (convert != null) {
			output = await (convert(recs)).ToListAsync();
		} else {
			List<SampleSinglePageApplication.EFModels.EFModels.Department> records = await recs.ToListAsync();
			foreach(var o in records) {
				output.Add(ConvertDepartmentAuto(o));
			}
		}

		return output;
	}
	public async Task<DataObjects.FilterDepartmentsAuto> GetDepartmentsFilteredAuto(DataObjects.FilterDepartmentsAuto filter, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>>? overrideFilter = null,Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>>? additionalFilter = null, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>,string, bool ,IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>>? additionalOrderByAuto = null, Func<DataObjects.Department, DataObjects.Department> additionalDataAuto = null  )                    
	{
		DataObjects.FilterDepartmentsAuto output = filter;                                                                       
		output.ActionResponse = GetNewActionResponse();
		output.Records = null;
		
		output.Columns = new List<DataObjects.FilterColumn> {
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Department Id",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "departmentId",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Tenant Id",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "tenantId",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Department Name",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "departmentName",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Active Directory Names",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "activeDirectoryNames",                                                      
				DataType = "string"                                                                                    
			},
			new DataObjects.FilterColumn{
				Align = "center",                                                                                      
				Label = "Enabled",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "enabled",                                                      
				DataType = "boolean"                                                                                   
			},
			new DataObjects.FilterColumn{
				Align = "",                                                                                            
				Label = "Department Group Id",                                                                   
				TipText = "",                                                                                          
				Sortable = true,                                                                                         
				DataElementName = "departmentGroupId",                                                      
				DataType = "string"                                                                                    
			},
		};
	
		IQueryable<Department> recs = data.Departments; 
		recs = recs.Where(x => x.TenantId == output.TenantId);                                               
		if (overrideFilter != null) {
			recs = overrideFilter(recs);
		} else {
			if(additionalFilter != null) {
				recs = additionalFilter(recs);
			}
			if (GuidOrEmpty(filter.DepartmentId) != Guid.Empty) {
				recs = recs.Where(o => GuidOrEmpty(o.DepartmentId) == GuidOrEmpty(filter.DepartmentId)); // Guid : DepartmentId
			}
			// TODO: Guid : TenantId
			if (!string.IsNullOrWhiteSpace(filter.DepartmentName)) {
				if (filter.DepartmentNameFilterExact) {
					recs = recs.Where(o => o.DepartmentName == filter.DepartmentName); // String : DepartmentName
				} else {
					recs = recs.Where(o => o.DepartmentName.Contains(filter.DepartmentName)); // String : DepartmentName
				}
			}
			if (!string.IsNullOrWhiteSpace(filter.ActiveDirectoryNames)) {
				if (filter.ActiveDirectoryNamesFilterExact) {
					recs = recs.Where(o => o.ActiveDirectoryNames == filter.ActiveDirectoryNames); // String : ActiveDirectoryNames
				} else {
					recs = recs.Where(o => o.ActiveDirectoryNames.Contains(filter.ActiveDirectoryNames)); // String : ActiveDirectoryNames
				}
			}
			if (filter.Enabled.HasValue) {
				if( filter.Enabled.Value ) {
					recs = recs.Where(o => o.Enabled == true);
				} else {
					recs = recs.Where(o => o.Enabled == false || o.Enabled == null);
				}
			}
			if (GuidOrEmpty(filter.DepartmentGroupId) != Guid.Empty) {
				recs = recs.Where(o => GuidOrEmpty(o.DepartmentGroupId) == GuidOrEmpty(filter.DepartmentGroupId)); // Guid : DepartmentGroupId
			}
		}

		if (!string.IsNullOrWhiteSpace(filter.Keyword)) {
			recs = recs.Where(o =>
				(filter.DepartmentNameIncludeInKeyword && o.DepartmentName.Contains(string.Empty + filter.DepartmentName)) || 
				(filter.ActiveDirectoryNamesIncludeInKeyword && o.ActiveDirectoryNames.Contains(string.Empty + filter.ActiveDirectoryNames))
			);
		}

		bool Ascending = true;
		if (StringOrEmpty(output.SortOrder).ToUpper() == "DESC")
		{
		    Ascending = false;
		}
		
		switch (StringOrEmpty(output.Sort).ToUpper())
		{
			case "DEPARTMENTID":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.DepartmentId).ThenBy(x => x.DepartmentId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.DepartmentId).ThenByDescending(x => x.DepartmentId);                    
				}
				break;
			case "TENANTID":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.TenantId).ThenBy(x => x.DepartmentId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.TenantId).ThenByDescending(x => x.DepartmentId);                    
				}
				break;
			case "DEPARTMENTNAME":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.DepartmentName).ThenBy(x => x.DepartmentId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.DepartmentName).ThenByDescending(x => x.DepartmentId);                    
				}
				break;
			case "ACTIVEDIRECTORYNAMES":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.ActiveDirectoryNames).ThenBy(x => x.DepartmentId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.ActiveDirectoryNames).ThenByDescending(x => x.DepartmentId);                    
				}
				break;
			case "ENABLED":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.Enabled).ThenBy(x => x.DepartmentId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.Enabled).ThenByDescending(x => x.DepartmentId);                    
				}
				break;
			case "DEPARTMENTGROUPID":                                                        
				if (Ascending)
				{
					recs = recs.OrderBy(x => x.DepartmentGroupId).ThenBy(x => x.DepartmentId);     
				}
				else
				{
					recs = recs.OrderByDescending(x => x.DepartmentGroupId).ThenByDescending(x => x.DepartmentId);                    
				}
				break;
		}
		if (additionalOrderByAuto != null) {
			recs = additionalOrderByAuto(recs,StringOrEmpty(output.Sort).ToUpper(),Ascending);
		}
	
		if (recs != null && recs.Count() > 0)
		{
	
			int TotalRecords = recs.Count();
			output.RecordCount = TotalRecords;
	
			if (output.RecordsPerPage > 0)
			{
				// We are filtering records per page
				if (output.RecordsPerPage >= TotalRecords)
					{
					output.Page = 1;
					output.PageCount = 1;
				}
				else
				{
					// Figure out the page count
					if (output.Page < 1) { output.Page = 1; }
					if (output.RecordsPerPage < 1) { output.RecordsPerPage = 25; }
					decimal decPages = (decimal)TotalRecords / (decimal)output.RecordsPerPage;
					decPages = Math.Ceiling(decPages);
					output.PageCount = (int)decPages;
	
					if (output.Page > output.PageCount)
					{
						output.Page = output.PageCount;
					}
	
					if (output.Page > 1)
					{
						recs = recs.Skip((output.Page - 1) * output.RecordsPerPage).Take(output.RecordsPerPage);
					}
					else
					{
						recs = recs.Take(output.RecordsPerPage);
					}
	
				}
			}
	
			// grab the id's now that it is fitered.
			var ids = await recs.Select(o => o.DepartmentId).ToListAsync();                                                  
			// then use the auto method to read them from the database
			var autoRecs = await this.GetDepartmentsAuto(ids);                                                               
	
			// loop over the sorted / ordered ids list and build the records output base on that order,
			// not the order returned by the auto recs
			List<DataObjects.Department> records = new List<DataObjects.Department>();                                           
			foreach (var id in ids)
			{
			    // find the rec out of the autos
			    var autoRec = autoRecs.Single(o => o.DepartmentId == id);                                                    
			    // add any addtional data we need
			    if (additionalDataAuto != null) {
					autoRec = additionalDataAuto(autoRec);
			    }
			    records.Add(autoRec);
			}
	
			output.Records = records.ToArray();
		}
	
		output.ActionResponse.Result = true;
	
		return output;
	}
	public async Task<DataObjects.Department> SaveDepartmentAuto(DataObjects.Department item, bool tryLookup = true, bool trySave = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>, DataObjects.Department, IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>>? lookup = null)  //SampleSinglePageApplication.DataObjects+Department
	{
		Department? rec = null;
		item.ActionResponse = GetNewActionResponse();
		if (tryLookup) {
			if (lookup == null) {
				rec = await data.Departments.FirstOrDefaultAsync(o => o.DepartmentId == item.DepartmentId);
			} else {
				rec = await lookup(data.Departments.AsQueryable(), item).FirstOrDefaultAsync();
			}
			if(rec != null) {
				 item.DepartmentId = rec.DepartmentId;
			}
		}
		var newRecord = false;
		if (rec == null) {
			if (item.DepartmentId == Guid.Empty){
				rec = new EFModels.EFModels.Department();
				item.DepartmentId = Guid.NewGuid();
				rec.DepartmentId = item.DepartmentId;
				newRecord = true;
			} else {
				item.ActionResponse.Messages.Add("Error Saving Department " + item.DepartmentId.ToString() + " - Record No Longer Exists");
				return item;
			}
		}
		item.DepartmentName = MaxStringLength(item.DepartmentName,100);
		item.ActiveDirectoryNames = MaxStringLength(item.ActiveDirectoryNames,100);

		rec.TenantId = item.TenantId; //OTHER: base(Guid) : actual(Guid)
		rec.DepartmentName = item.DepartmentName; //OTHER: base(String) : actual(String)
		rec.ActiveDirectoryNames = item.ActiveDirectoryNames; //OTHER: base(String) : actual(String)
		rec.Enabled = item.Enabled; //OTHER: base(Boolean) : actual(Boolean)
		rec.DepartmentGroupId = item.DepartmentGroupId; //OTHER: base(Nullable`1) : actual(Guid)
		//rec.ActionResponse = item.ActionResponse; //OTHER: base(BooleanResponse) : actual(BooleanResponse)

		try
		{
			if (newRecord)
			{
				data.Departments.Add(rec);
			}
			if (trySave) {
				await data.SaveChangesAsync();
				//await SignalRUpdate(new DataObjects.SignalRUpdate
				//{
				//	//TenantId = item.TenantId,
				//	ItemId = item.DepartmentId.ToString(),
				//	UpdateType = DataObjects.SignalRUpdateType.Department,
				//	Message = "DepartmentSaved",
				//	Object = item
				//});
			}
			item.ActionResponse.Result = true;
		}
		catch (Exception ex)
		{
			item.ActionResponse.Messages.Add("Error Saving Department " + item.DepartmentId.ToString() + " - " + ex.Message);
		}
		return item;
	}
	public async Task<List<DataObjects.Department>> SaveDepartmentsAuto(List<DataObjects.Department> items, bool tryLookup = true, Func<IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>, DataObjects.Department, IQueryable<SampleSinglePageApplication.EFModels.EFModels.Department>>? lookup = null)  //SampleSinglePageApplication.DataObjects+Department
	{
		List<DataObjects.Department> output = new List<DataObjects.Department>();
		foreach(var item in items) {
			DataObjects.Department saved = await SaveDepartmentAuto(item, tryLookup, false, lookup);
			if (saved != null && saved.ActionResponse != null && saved.ActionResponse.Result) {
				output.Add(saved);
			}
		}
		await data.SaveChangesAsync();
		return output;
	}

	public Dictionary<string, string> GetDepartmentIconAuto()
	{
		var output = new Dictionary<string, string>();
		return output;
	}
	public Dictionary<string, string> GetDepartmentLanguageAuto()
	{
		var output = new Dictionary<string, string>();
		output.Add("Department", "Department");
		output.Add("Department.AddNew", "Add New");
		output.Add("Department.Back", "Back");
		output.Add("Department.Cancel", "Cancel");
		output.Add("Department.CancelDeleteFilter", "Cancel");
		output.Add("Department.Clear", "Clear");
		output.Add("Department.ConfirmDelete", "Confirm Delete");
		output.Add("Department.ConfirmDeleteFilter", "Confirm Delete");
		output.Add("Department.Delete", "Delete");
		output.Add("Department.DeleteFilter", "Delete Filter");
		output.Add("Department.Edit", "Edit");
		output.Add("Department.EditTableButton", "Edit");
		output.Add("Department.FilterCardView", "Card View");
		output.Add("Department.FilterExport", "Export");
		output.Add("Department.HidingDetails", "Hiding Details");
		output.Add("Department.ListView", "List View");
		output.Add("Department.ShowingDetails", "Showing Details");
		output.Add("Department.HideFilter", "Hide Filter");
		output.Add("Departments", "Departments");
		output.Add("Department.Refresh", "Refresh");
		output.Add("Department.Save", "Save");
		output.Add("Department.SaveFilter", "Save Filter");
		output.Add("Department.ShowFilter", "Show Filter");
		output.Add("Department.SavedFilters", "Saved Filters");
		output.Add("Department.SavedFilterName", "Saved Filter Name");
		output.Add("Department.NoRecords", "No Records");
		output.Add("Department.Loading", "Loading Departments, Please Wait");
		output.Add("Department.Department", "Department");
		output.Add("Department.DepartmentStart", "Department Start");
		output.Add("Department.DepartmentEnd", "Department End");
		output.Add("Department.DepartmentFilterExact", "Exact");
		output.Add("Department.DepartmentIncludeInKeyword", "Keyword");
		output.Add("Department.DepartmentNoRecords", "NoDepartmentRecords");
		output.Add("Department.DepartmentId","Department Id");
		output.Add("Department.TenantId","Tenant Id");
		output.Add("Department.DepartmentName","Department Name");
		output.Add("Department.DepartmentNameFilterExact","Exact");
		output.Add("Department.DepartmentNameIncludeInKeyword","Keyword");
		output.Add("Department.ActiveDirectoryNames","Active Directory Names");
		output.Add("Department.ActiveDirectoryNamesFilterExact","Exact");
		output.Add("Department.ActiveDirectoryNamesIncludeInKeyword","Keyword");
		output.Add("Department.Enabled","Enabled");
		output.Add("Department.DepartmentGroupId","Department Group Id");
		return output;
	}

}
