@using SampleSinglePageApplication;
@model DataObjects.ConnectionStringConfig
@inject IHttpContextAccessor context;
@inject IDataAccess data;
@{
    Layout = "_LayoutNotLoggedIn";

    data.SetHttpContext(context.HttpContext);
    string title = data.GetLanguageItem("Login");
    ViewBag.Title = title;

    var settings = data.GetApplicationSettings();
    RouteHelper routeHelper = new RouteHelper(context.HttpContext, settings.UseTenantCodeInUrl);
    string baseUrl = routeHelper.GetBaseUrl();
    string id = routeHelper.Id;

    string errorMessage = "<div class='container-fluid'><h1 class='display-7'>{0}</h1><a href='" + baseUrl + "' class='btn btn-dark'><i class='fas fa-arrow-left'></i> Back</a></div>";

    Guid tenantId = Guid.Empty;
    try {
        tenantId = new Guid(id);
    } catch { }

    if (tenantId == Guid.Empty) {
        // Check the Extra routeHelper items.
        if (routeHelper.Extra != null && routeHelper.Extra.Any()) {
            foreach (var item in routeHelper.Extra) {
                if (tenantId == Guid.Empty) {
                    try {
                        tenantId = new Guid(item);
                    } catch { }
                }
            }
        }
    }

    if (tenantId == Guid.Empty) {
        @Html.Raw(errorMessage.Replace("{0}", "Invalid TenantId in URL"))
        return;
    }

    string returnUrl = baseUrl + "Authorization/Custom/" + tenantId.ToString();

    var tenantSettings = data.GetTenantSettings(tenantId);
    string customCode = tenantSettings.CustomAuthenticationCode;
    string customCodeName = data.StringValue(tenantSettings.CustomAuthenticationName);
    if (String.IsNullOrWhiteSpace(customCodeName)) {
        customCodeName = "Custom Authentication Provider";
    }

    if (String.IsNullOrWhiteSpace(customCode)) {
        @Html.Raw(errorMessage.Replace("{0}", "No Custom Authentication Code Detected in the Tenant Settings"))
        return;
    }

    DataObjects.User? user = data.ExecuteDynamicCSharpCode<DataObjects.User>(customCode,
        new object[] { data, returnUrl }, null, "CustomAuthenticationProvider", "Authentication", "Authenticate");

    if (user != null && !String.IsNullOrWhiteSpace(user.Email)) {
        Guid userId = Guid.Empty;

        var exists = await data.GetUserByEmailAddress(tenantId, user.Email);

        if (exists != null && exists.ActionResponse.Result) {
            userId = exists.UserId;
        } else {
            // See if this tenant allows creating new users.
            if (tenantSettings.RequirePreExistingAccountToLogIn) {
                @Html.Raw(errorMessage.Replace("{0}", "No local account configured. Please contact the application admin."))
                return;
            } else {
                // Create the new account
                DataObjects.User addUser = new DataObjects.User {
                            UserId = Guid.Empty,
                            TenantId = tenantId,
                            FirstName = user.FirstName,
                            LastName = user.LastName,
                            Email = user.Email,
                            EmployeeId = user.EmployeeId,
                            DepartmentName = user.DepartmentName,
                            Title = user.Title,
                            Username = user.Username,
                            Admin = false,
                            Enabled = true,
                            Source = customCodeName
                        };

                var savedUser = await data.SaveUser(addUser);

                if (savedUser != null && savedUser.ActionResponse.Result) {
                    userId = savedUser.UserId;
                }
            }
        }

        if (userId != Guid.Empty) {
            string token = data.GetUserToken(tenantId, userId);
            data.CookieWrite("Token-" + tenantId.ToString(), token);
            data.CookieWrite("Login-Method", "Custom");

            context.HttpContext.Response.Redirect(baseUrl);
        } else {
            @Html.Raw(errorMessage.Replace("{0}", "Login Error"))
            ;
        }
    }
}