<script src="~/js/viewModels/users.js?v=@Html.Raw(Guid.NewGuid().ToString().Replace("-", ""))"></script>
<div id="view-users">
    <div data-bind="visible:MainModel().CurrentView() == 'users'">
        <div data-bind="css:{fixed: MainModel().StickyMenus() == true}">
            <i class="sticky-menu-icon" data-bind="html:MainModel().StickyIcon(), click:function(){MainModel().ToggleStickyMenus()}"></i>
            <h1 class="display-7"><i data-bind="html:MainModel().IconAndText('Users')"></i></h1>

            <div class="btn-group mb-2" role="group">
                <button type="button" class="btn btn-success" data-bind="click:function(){ MainModel().Nav('NewUser') }">
                    <i data-bind="html:MainModel().IconAndText('AddNewUser')"></i>
                </button>
                <button type="button" class="btn btn-primary" data-bind="click:ClearFilter">
                    <i data-bind="html:MainModel().IconAndText('Clear')"></i>
                </button>
                <button type="button" class="btn btn-dark" data-bind="visible:Filter().showFilters() == false, click:ToggleShowFilter">
                    <i data-bind="html:MainModel().IconAndText('ShowFilter')"></i>
                </button>
                <button type="button" class="btn btn-dark" data-bind="visible:Filter().showFilters() == true, click:ToggleShowFilter">
                    <i data-bind="html:MainModel().IconAndText('HideFilter')"></i>
                </button>
                <button type="button" class="btn btn-dark" data-bind="click:RefreshFilter">
                    <i data-bind="html:MainModel().IconAndText('Refresh')"></i>
                </button>
            </div>
            <div class="keyword-search mb-2" data-bind="visible:Filter().showFilters() == true && Loading() == false">
                <label for="users-filter-keyword">Keyword</label>
                <div class="fixed-200">
                    <input type="text" id="users-filter-keyword" class="form-control" data-bind="value:Filter().keyword" placeholder="Search Users" />
                </div>
            </div>
        </div>


        <div class="row" data-bind="visible:Loading() == true">
            <div class="col-sm-12" data-bind="html:MainModel().Language('LoadingWait');"></div>
        </div>

        <div class="row" data-bind="visible:Loading() == false">
            <div data-bind="visible:Filter().showFilters() == true">
                <div class="row mb-2">
                    <div class="col-sm-3" data-bind="visible:MainModel().BlockModuleDepartments() == false">
                        <label for="users-filter-departments">Department</label>
                        <select class="form-control" multiple="multiple" id="users-filter-departments" size="4"
                                data-bind="selectedOptions:Filter().filterDepartments,
                                options: MainModel().Tenant().departments,
                                optionsText: function(item){return item.departmentName},
                                optionsValue: function(item){return item.departmentId},
                                valueAllowUnset: true"></select>
                    </div>

                    <div class="col-sm-3">
                        <label for="users-filter-enabled" data-bind="html:MainModel().Language('Enabled')"></label>
                        <select class="form-control" size="4" id="users-filter-enabled" data-bind="value:Filter().enabled, valueAllowUnset: true">
                            <option value="">All</option>
                            <option value="enabled">Enabled Users Only</option>
                            <option value="disabled">Disabled Users Only</option>
                        </select>
                    </div>

                    <div class="col-sm-3">
                        <label for="users-filter-admin" data-bind="html:MainModel().Language('Admin')"></label>
                        <select class="form-control" size="4" id="users-filter-admin" data-bind="value:Filter().admin, valueAllowUnset: true">
                            <option value="">All</option>
                            <option value="admin">Admin Users Only</option>
                            <option value="standard">Non-Admin Users Only</option>
                        </select>
                    </div>

                    <div class="col-3 mb-2" data-bind="visible:MainModel().UDFShowInFilter('Users', 1) == true">
                        <label for="users-filter-udf01" data-bind="text:MainModel().UDFLabel('Users', 1)"></label>
                        <select class="form-control" id="users-filter-udf01" size="4"
                                data-bind="value:Filter().udf01,
                            options: MainModel().UDFFilterOptions('Users', 1),
                            optionsCaption: '',
                            valueAllowUnset: true">
                        </select>
                    </div>

                    <div class="col-3 mb-2" data-bind="visible:MainModel().UDFShowInFilter('Users', 2) == true">
                        <label for="users-filter-udf02" data-bind="text:MainModel().UDFLabel('Users', 2)"></label>
                        <select class="form-control" id="users-filter-udf02" size="4"
                                data-bind="value:Filter().udf02,
                            options: MainModel().UDFFilterOptions('Users', 2),
                            optionsCaption: '',
                            valueAllowUnset: true">
                        </select>
                    </div>

                    <div class="col-3 mb-2" data-bind="visible:MainModel().UDFShowInFilter('Users', 3) == true">
                        <label for="users-filter-udf03" data-bind="text:MainModel().UDFLabel('Users', 3)"></label>
                        <select class="form-control" id="users-filter-udf03" size="4"
                                data-bind="value:Filter().udf03,
                            options: MainModel().UDFFilterOptions('Users', 3),
                            optionsCaption: '',
                            valueAllowUnset: true">
                        </select>
                    </div>

                    <div class="col-3 mb-2" data-bind="visible:MainModel().UDFShowInFilter('Users', 4) == true">
                        <label for="users-filter-udf04" data-bind="text:MainModel().UDFLabel('Users', 4)"></label>
                        <select class="form-control" id="users-filter-udf04" size="4"
                                data-bind="value:Filter().udf04,
                            options: MainModel().UDFFilterOptions('Users', 4),
                            optionsCaption: '',
                            valueAllowUnset: true">
                        </select>
                    </div>

                    <div class="col-3 mb-2" data-bind="visible:MainModel().UDFShowInFilter('Users', 5) == true">
                        <label for="users-filter-udf05" data-bind="text:MainModel().UDFLabel('Users', 5)"></label>
                        <select class="form-control" id="users-filter-udf05" size="4"
                                data-bind="value:Filter().udf05,
                            options: MainModel().UDFFilterOptions('Users', 5),
                            optionsCaption: '',
                            valueAllowUnset: true">
                        </select>
                    </div>

                    <div class="col-3 mb-2" data-bind="visible:MainModel().UDFShowInFilter('Users', 6) == true">
                        <label for="users-filter-udf06" data-bind="text:MainModel().UDFLabel('Users', 6)"></label>
                        <select class="form-control" id="users-filter-udf06" size="4"
                                data-bind="value:Filter().udf06,
                            options: MainModel().UDFFilterOptions('Users', 6),
                            optionsCaption: '',
                            valueAllowUnset: true">
                        </select>
                    </div>

                    <div class="col-3 mb-2" data-bind="visible:MainModel().UDFShowInFilter('Users', 7) == true">
                        <label for="users-filter-udf07" data-bind="text:MainModel().UDFLabel('Users', 7)"></label>
                        <select class="form-control" id="users-filter-udf07" size="4"
                                data-bind="value:Filter().udf07,
                            options: MainModel().UDFFilterOptions('Users', 7),
                            optionsCaption: '',
                            valueAllowUnset: true">
                        </select>
                    </div>

                    <div class="col-3 mb-2" data-bind="visible:MainModel().UDFShowInFilter('Users', 8) == true">
                        <label for="users-filter-udf08" data-bind="text:MainModel().UDFLabel('Users', 8)"></label>
                        <select class="form-control" id="users-filter-udf08" size="4"
                                data-bind="value:Filter().udf08,
                            options: MainModel().UDFFilterOptions('Users', 8),
                            optionsCaption: '',
                            valueAllowUnset: true">
                        </select>
                    </div>

                    <div class="col-3 mb-2" data-bind="visible:MainModel().UDFShowInFilter('Users', 9) == true">
                        <label for="users-filter-udf09" data-bind="text:MainModel().UDFLabel('Users', 9)"></label>
                        <select class="form-control" id="users-filter-udf09" size="4"
                                data-bind="value:Filter().udf09,
                            options: MainModel().UDFFilterOptions('Users', 9),
                            optionsCaption: '',
                            valueAllowUnset: true">
                        </select>
                    </div>

                    <div class="col-3 mb-2" data-bind="visible:MainModel().UDFShowInFilter('Users', 10) == true">
                        <label for="users-filter-udf10" data-bind="text:MainModel().UDFLabel('Users', 10)"></label>
                        <select class="form-control" id="users-filter-udf10" size="4"
                                data-bind="value:Filter().udf10,
                            options: MainModel().UDFFilterOptions('Users', 10),
                            optionsCaption: '',
                            valueAllowUnset: true">
                        </select>
                    </div>
                </div>
            </div>

            <div data-bind="visible:Filter().recordCount() == 0, html:MainModel().Language('NoRecords')"></div>

            <div data-bind="visible:Filter().recordCount() > 0">
                <div id="user-records"></div>
            </div>
        </div>
    </div>

    <div data-bind="visible:ResettingUserPassword() == true && MainModel().CurrentView() == 'edituser'">
        <div data-bind="css:{fixed: MainModel().StickyMenus() == true}">
            <i class="sticky-menu-icon" data-bind="html:MainModel().StickyIcon(), click:function(){MainModel().ToggleStickyMenus()}"></i>
            <h1 class="display-7" data-bind="html:MainModel().IconAndText('ResetUserPassword')"></h1>

            <div class="mb-2">
                <button type="button" class="btn btn-dark" data-bind="html:MainModel().IconAndText('Cancel'), click:function(){ ResettingUserPassword(false) }"></button>
                <button type="button" class="btn btn-warning" data-bind="html:MainModel().IconAndText('UpdatePassword'), click:ResetUserPasswordUpdate"></button>
            </div>
        </div>

        <div class="mb-2">
            <label for="reset-user-password" data-bind="html:MainModel().Language('NewPassword')"></label>
            <br /><input type="text" class="form-control fixed-300" id="reset-user-password" data-bind="value:NewPassword" />
        </div>
    </div>

    <div data-bind="visible:(MainModel().CurrentView() == 'edituser' || MainModel().CurrentView() == 'newuser') && ResettingUserPassword() == false">
        <div data-bind="css:{fixed: MainModel().StickyMenus() == true}">
            <i class="sticky-menu-icon" data-bind="html:MainModel().StickyIcon(), click:function(){MainModel().ToggleStickyMenus()}"></i>
            <h1 class="display-7">
                <!-- ko if: MainModel().CurrentView() == 'edituser' -->
                <i data-bind="html:MainModel().IconAndText('EditUser')"></i>
                <span class="element-id" data-bind="visible:Loading() == false">&ldquo;<span data-bind="text:MainModel().Id()"></span>&rdquo;</span>
                <!-- /ko -->
                <!-- ko if: MainModel().CurrentView() == 'newuser' -->
                <i data-bind="html:MainModel().Icon('Users')"></i><span class="icon-text" data-bind="html:MainModel().Language('AddNewUser')"></span>
                <span class="element-id" data-bind="visible:User().userId() != null && User().userId() != MainModel().GuidEmpty()">
                    &ldquo;<span data-bind="text:User().userId"></span>&rdquo;
                </span>
                <!-- /ko -->
            </h1>

            <div class="mb-2">
                <button type="button" class="btn btn-dark" data-bind="click:function(){ MainModel().Nav('Users') }, html:MainModel().IconAndText('Back')"></button>
                <button type="button" class="btn btn-success" data-bind="click:SaveUser, html:MainModel().IconAndText('Save')"></button>
                <!-- ko if: MainModel().Id() != null && MainModel().Id() != '' -->
                <button type="button" class="btn btn-warning" data-bind="html:MainModel().IconAndText('ResetUserPassword'), click:ResetUserPassword"></button>

                <!-- ko if: ConfirmDelete() != MainModel().Id() -->
                <button type="button" class="btn btn-danger" data-bind="html:MainModel().IconAndText('Delete'), click:function(){ ConfirmDelete(MainModel().Id()) }"></button>
                <!-- /ko -->
                <!-- ko if: ConfirmDelete() == MainModel().Id() -->
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-dark" data-bind="html:MainModel().IconAndText('Cancel'), click:function(){ ConfirmDelete('') }"></button>
                    <button type="button" class="btn btn-danger" data-bind="html:MainModel().IconAndText('ConfirmDelete'), click:DeleteUser"></button>
                </div>
                <!-- /ko -->
                <!-- /ko -->
            </div>
        </div>

        <div data-bind="visible:Loading() == true, html:MainModel().Language('LoadingWait')"></div>

        <div data-bind="visible:User().userId() != null && Loading() == false">
            <!-- ko if: User().lastLockoutDate() != null -->
            <div class="alert alert-danger">
                <div class="mb-2" data-bind="html:MainModel().Language('UserLockedOut', '', false, [tsUtilities.FormatDateTime(User().lastLockoutDate())])"></div>

                <button type="button" class="btn btn-danger" data-bind="html:MainModel().IconAndText('UnlockUserAccount'), click:UnlockUserAccount"></button>
            </div>
            <!-- /ko -->

            <table class="table first-column-small first-column-bold first-column-right">
                <tr>
                    <td><label for="edit-user-firstName" data-bind="html:MainModel().Language('FirstName', null, true)"></label></td>
                    <td><input type="text" id="edit-user-firstName" class="form-control" data-bind="value:User().firstName" /></td>
                </tr>
                <tr>
                    <td><label for="edit-user-lastName" data-bind="html:MainModel().Language('LastName', null, true)"></label></td>
                    <td><input type="text" id="edit-user-lastName" class="form-control" data-bind="value:User().lastName" /></td>
                </tr>
                <tr>
                    <td><label for="edit-user-email" data-bind="html:MainModel().Language('Email', null, true)"></label></td>
                    <td><input type="text" id="edit-user-email" class="form-control" data-bind="value:User().email" /></td>
                </tr>
                <tr>
                    <td><label for="edit-user-username" data-bind="html:MainModel().Language('Username', null, true)"></label></td>
                    <td><input type="text" id="edit-user-username" class="form-control" data-bind="value:User().username" /></td>
                </tr>
                <!-- ko if: MainModel().BlockModuleEmployeeId() == false -->
                <tr>
                    <td><label for="edit-user-employeeId" data-bind="html:MainModel().Language('EmployeeId', null, true)"></label></td>
                    <td><input type="text" id="edit-user-employeeId" class="form-control" data-bind="value:User().employeeId" /></td>
                </tr>
                <!-- /ko -->
                <tr>
                    <td><label for="edit-user-title" data-bind="html:MainModel().Language('Title', null, true)"></label></td>
                    <td><input type="text" id="edit-user-title" class="form-control" data-bind="value:User().title" /></td>
                </tr>
                <!-- ko if: MainModel().BlockModuleLocation() == false -->
                <tr>
                    <td><label for="edit-user-location" data-bind="html:MainModel().Language('Location', null, true)"></label></td>
                    <td><input type="text" id="edit-user-location" class="form-control" data-bind="value:User().location" /></td>
                </tr>
                <!-- /ko -->
                <tr>
                    <td><label for="edit-user-phone" data-bind="html:MainModel().Language('PhoneNumber', null, true)"></label></td>
                    <td><input type="text" id="edit-user-phone" class="form-control" data-bind="value:User().phone" /></td>
                </tr>
                <!-- ko if: MainModel().BlockModuleDepartments() == false -->
                <tr>
                    <td><label for="edit-user-department" data-bind="html:MainModel().Language('Department', null, true)"></label></td>
                    <td>
                        <select id="edit-user-department" class="form-select"
                                data-bind="value:User().departmentId,
                            options: MainModel().Tenant().departments(),
                            optionsText: function(item){return item.departmentName()},
                            optionsValue: function(item){return item.departmentId},
                            optionsCaption: '',
                            valueAllowUnset: true"></select>
                    </td>
                </tr>
                <!-- /ko -->
                <tr>
                    <td><label for="edit-user-source" data-bind="html:MainModel().Language('Source', null, true)"></label></td>
                    <td><input type="text" id="edit-user-source" class="form-control" data-bind="value:User().source" /></td>
                </tr>
                <tr>
                    <td>
                        <div class="form-check form-switch right">
                            <input type="checkbox" id="edit-user-enabled" role="switch" class="form-check-input" data-bind="checked:User().enabled" />
                        </div>
                    </td>
                    <td><label for="edit-user-enabled" class="form-check-label" data-bind="html:MainModel().Language('Enabled')"></label></td>
                </tr>
                <tr>
                    <td>
                        <div class="form-check form-switch right">
                            <input type="checkbox" id="edit-user-preventPasswordChange" role="switch" class="form-check-input" data-bind="checked:User().preventPasswordChange" />
                        </div>
                    </td>
                    <td><label for="edit-user-preventPasswordChange" class="form-check-label" data-bind="html:MainModel().Language('PreventPasswordChange')"></label></td>
                </tr>
                <tr>
                    <td>
                        <div class="form-check form-switch right">
                            <input type="checkbox" id="edit-user-admin" role="switch" class="form-check-input" data-bind="checked:User().admin" />
                        </div>
                    </td>
                    <td><label for="edit-user-admin" class="form-check-label" data-bind="html:MainModel().Language('Admin')"></label></td>
                </tr>
                <tr data-bind="visible:User().userId() != MainModel().GuidEmpty()">
                    <td><label for="edit-user-photo" data-bind="html:MainModel().Language('Photo')"></label></td>
                    <td>
                        <table class="full padded">
                            <tr>
                                <td style="width:1%;" class="center" data-bind="visible:User().photo() != null && User().photo() != ''">
                                    <button type="button" class="btn btn-danger btn-xs nowrap" data-bind="click:DeleteUserPhoto">
                                        <i data-bind="html:MainModel().IconAndText('Delete')"></i>
                                    </button>
                                    <!-- ko if: User().photo() != null && User().photo() != '' -->
                                    <img class="user-icon-small" data-bind="attr: { src: window.baseURL + 'File/View/' + User().photo() }" />
                                    <!-- /ko -->
                                </td>
                                <td style="width:99%;">
                                    <div id="dropZoneUploadUserPhotoArea">
                                        <form action="~/api/Data/UploadUserPhoto/" class="dropzone" id="dropZoneUploadUserPhoto" method="post" enctype="multipart/form-data">
                                            <button type="button" class="btn btn-default" data-bind="attr: {'aria-label': MainModel().Language('UploadFile')}">
                                                <i data-bind="html:MainModel().IconAndText('UploadFile')"></i>
                                            </button>
                                            <input type="hidden" name="admin-user-photo-userid" id="admin-user-photo-userid" data-bind="value:User().userId()" />
                                            <input type="hidden" name="admin-user-photo-tenantid" id="admin-user-photo-tenantid" data-bind="value:User().tenantId()" />
                                            <input type="hidden" name="admin-user-photo-token" id="admin-user-photo-token" data-bind="value:MainModel().Token()" />
                                            <div class="dz-message">
                                                <span data-bind="html:MainModel().Language('ManageAvatarInstructionsAdmin')"></span>
                                                <br />
                                                <span class="note">
                                                    <span data-bind="html:MainModel().Language('AllowedFileTypes')"></span>:
                                                    GIF, JPG, PNG
                                                </span>
                                            </div>
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
        </div>

        <div id="edit-user-udf-fields" data-bind="visible:Loading() == false"></div>
    </div>
</div>

<script type="text/javascript">
    function resetUserPhotoDropZone() {
        Dropzone.forElement("#dropZoneUploadUserPhoto").removeAllFiles();
    }

    function setupUserPhotoDropZone() {
        Dropzone.options.dropZoneUploadUserPhoto = {
            paramName: "file",
            maxFilesize: 20,
            clickable: '#dropZoneUploadUserPhotoArea',
            accept: function (file, done) {
                console.debug("Checkfile DropZone File", file);
                if (window.mainModel.AllowedFileTypeImage(file.name)) {
                    done();
                } else {
                    done("Invalid File Type");
                    this.removeFile(file);
                }
            },
            success: function (file) {
                this.removeFile(file);
            },
            complete: function (e) {
                window.usersModel.PhotoUploadComplete(e.xhr.response);
            }
        };
        var dz = new Dropzone("#dropZoneUploadUserPhoto");
    }
</script>