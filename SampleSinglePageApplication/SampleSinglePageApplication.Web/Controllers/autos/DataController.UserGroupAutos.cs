/// 
/// UserGroup
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
using Microsoft.AspNetCore.Mvc;
using SampleSinglePageApplication.EFModels.EFModels;

namespace SampleSinglePageApplication.Web.Controllers
{
	public partial class DataController : ControllerBase
	{

		[HttpGet]
		[Route("~/api/Data/GetUserGroupAuto/{userGroupId}")]
		public async Task<ActionResult<DataObjects.UserGroup>> GetUserGroupAuto(Guid userGroupId)
		{
			DataObjects.UserGroup? output = null;

			if (CurrentUser.Admin) {
				output = await da.GetUserGroupAuto(userGroupId);
				if (output != null && output.TenantId == CurrentUser.TenantId) {
				    return Ok(output);
				} else {
				    return Unauthorized("Access Denied");
				}
			} else {
				return Unauthorized("Access Denied");
			}
		}

		[HttpPost]
		[Route("~/api/Data/GetUserGroupsFilteredAuto/")]
		public async Task<ActionResult<DataObjects.FilterUserGroupsAuto>> GetUserGroupsFilteredAuto(DataObjects.FilterUserGroupsAuto filter)
		{
			if (CurrentUser.Admin) {
				filter.TenantId = CurrentUser.TenantId;
				var output = await da.GetUserGroupsFilteredAuto(filter);
				return Ok(output);
			} else {
				return Unauthorized("Access Denied");
			}
		}

		[HttpGet]
		[Route("~/api/Data/DeleteUserGroupAuto/{userGroupId}")]
		public async Task<ActionResult<bool>> DeleteUserGroupAuto(Guid userGroupId)
		{
			if (CurrentUser.Admin) {
				var existing = await da.GetUserGroupAuto(userGroupId);
				if (existing != null && existing.TenantId == CurrentUser.TenantId) {
					var output = await da.DeleteUserGroupAuto(userGroupId);
					return Ok(output);
			} else {
					return Unauthorized("Access Denied");
			}
			} else {
				return Unauthorized("Access Denied");
			}
		}

		[HttpPost]
		[Route("~/api/Data/SaveUserGroupAuto/")]
		public async Task<ActionResult<DataObjects.UserGroup>> SaveUserGroupAuto(DataObjects.UserGroup userGroup)
		{
            DataObjects.UserGroup output = new DataObjects.UserGroup();

            userGroup.TenantId = CurrentUser.TenantId;
            if (CurrentUser.Admin) {
				output = await da.SaveUserGroupAuto(userGroup);
				return Ok(output);
            } else {
				return Unauthorized("Access Denied");
            }
		}
    }
}
