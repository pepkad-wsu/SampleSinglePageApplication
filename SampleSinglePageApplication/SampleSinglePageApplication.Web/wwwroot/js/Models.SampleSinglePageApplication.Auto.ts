interface Window {
	// NOT EF MODEL //actionResponseObjectsModelAuto: ActionResponseObjectsModelAuto;            
	// NOT EF MODEL //activeDirectorySearchResultssModelAuto: ActiveDirectorySearchResultssModelAuto;            
	// NOT EF MODEL //activeDirectoryUserInfosModelAuto: ActiveDirectoryUserInfosModelAuto;            
	// NOT EF MODEL //addModulesModelAuto: AddModulesModelAuto;            
	// NOT EF MODEL //ajaxLookupsModelAuto: AjaxLookupsModelAuto;            
	// NOT EF MODEL //ajaxResultssModelAuto: AjaxResultssModelAuto;            
	// NOT EF MODEL //applicationSettingssModelAuto: ApplicationSettingssModelAuto;            
	// NOT EF MODEL //authenticatesModelAuto: AuthenticatesModelAuto;            
	// NOT EF MODEL //booleanResponsesModelAuto: BooleanResponsesModelAuto;            
	// NOT EF MODEL //connectionStringConfigsModelAuto: ConnectionStringConfigsModelAuto;            
	// NOT EF MODEL //dataMigrationsModelAuto: DataMigrationsModelAuto;            
	departmentsModelAuto: DepartmentsModelAuto;            
	departmentGroupsModelAuto: DepartmentGroupsModelAuto;            
	// NOT EF MODEL //dictionarysModelAuto: DictionarysModelAuto;            
	// NOT EF MODEL //dropDownEnumsModelAuto: DropDownEnumsModelAuto;            
	// NOT EF MODEL //emailMessagesModelAuto: EmailMessagesModelAuto;            
	// NOT EF MODEL //externalDataSourcesModelAuto: ExternalDataSourcesModelAuto;            
	fileStoragesModelAuto: FileStoragesModelAuto;            
	// NOT EF MODEL //filtersModelAuto: FiltersModelAuto;            
	// NOT EF MODEL //filterColumnsModelAuto: FilterColumnsModelAuto;            
	// NOT EF MODEL //filterDepartmentGroupsAutosModelAuto: FilterDepartmentGroupsAutosModelAuto;            
	// NOT EF MODEL //filterDepartmentsAutosModelAuto: FilterDepartmentsAutosModelAuto;            
	// NOT EF MODEL //filterFileStoragesAutosModelAuto: FilterFileStoragesAutosModelAuto;            
	// NOT EF MODEL //filterSettingsAutosModelAuto: FilterSettingsAutosModelAuto;            
	// NOT EF MODEL //filterTenantsAutosModelAuto: FilterTenantsAutosModelAuto;            
	// NOT EF MODEL //filterUserGroupsAutosModelAuto: FilterUserGroupsAutosModelAuto;            
	// NOT EF MODEL //filterUserssModelAuto: FilterUserssModelAuto;            
	// NOT EF MODEL //filterUsersAutosModelAuto: FilterUsersAutosModelAuto;            
	// NOT EF MODEL //languagesModelAuto: LanguagesModelAuto;            
	// NOT EF MODEL //listItemsModelAuto: ListItemsModelAuto;            
	// NOT EF MODEL //mailServerConfigsModelAuto: MailServerConfigsModelAuto;            
	// NOT EF MODEL //optionPairsModelAuto: OptionPairsModelAuto;            
	// NOT EF MODEL //savedFilterDepartmentGroupsAutosModelAuto: SavedFilterDepartmentGroupsAutosModelAuto;            
	// NOT EF MODEL //savedFilterDepartmentsAutosModelAuto: SavedFilterDepartmentsAutosModelAuto;            
	// NOT EF MODEL //savedFilterFileStoragesAutosModelAuto: SavedFilterFileStoragesAutosModelAuto;            
	// NOT EF MODEL //savedFilterSettingsAutosModelAuto: SavedFilterSettingsAutosModelAuto;            
	// NOT EF MODEL //savedFilterTenantsAutosModelAuto: SavedFilterTenantsAutosModelAuto;            
	// NOT EF MODEL //savedFilterUserGroupsAutosModelAuto: SavedFilterUserGroupsAutosModelAuto;            
	// NOT EF MODEL //savedFilterUsersAutosModelAuto: SavedFilterUsersAutosModelAuto;            
	settingsModelAuto: SettingsModelAuto;            
	// NOT EF MODEL //signalRUpdatesModelAuto: SignalRUpdatesModelAuto;            
	// NOT EF MODEL //simplePostsModelAuto: SimplePostsModelAuto;            
	// NOT EF MODEL //simpleResponsesModelAuto: SimpleResponsesModelAuto;            
	tenantsModelAuto: TenantsModelAuto;            
	// NOT EF MODEL //tenantListsModelAuto: TenantListsModelAuto;            
	// NOT EF MODEL //tenantSettingssModelAuto: TenantSettingssModelAuto;            
	// NOT EF MODEL //todoUserAutosModelAuto: TodoUserAutosModelAuto;            
	// NOT EF MODEL //udfLabelsModelAuto: udfLabelsModelAuto;            
	usersModelAuto: UsersModelAuto;            
	userGroupsModelAuto: UserGroupsModelAuto;            
	// NOT EF MODEL //userGroupSettingssModelAuto: UserGroupSettingssModelAuto;            
	// NOT EF MODEL //userPasswordResetsModelAuto: UserPasswordResetsModelAuto;            
	// NOT EF MODEL //userTenantsModelAuto: UserTenantsModelAuto;            
	// NOT EF MODEL //versionInfosModelAuto: VersionInfosModelAuto;            
	// NOT EF MODEL //workSchedulesModelAuto: WorkSchedulesModelAuto;            
}
namespace sampleSinglePageApplicationEnumAutos {
	/// 
	/// SettingType
	/// 
	/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
	/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
	///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
	///
	/**
	 * SettingType
	 */
	export function ConvertSettingTypeToHumanReadableString(value: number | string | server.settingType): string {//SampleSinglePageApplication.DataObjects+SettingType
		let output: string = "";

		if (tsUtilities.HasValue("" + value)) {
			switch (value) {
				case 0:
				case "0":
					output = "Boolean";
					break;
				case 1:
				case "1":
					output = "DateTime";
					break;
				case 2:
				case "2":
					output = "EncryptedText";
					break;
				case 3:
				case "3":
					output = "Guid";
					break;
				case 4:
				case "4":
					output = "NumberDecimal";
					break;
				case 5:
				case "5":
					output = "NumberDouble";
					break;
				case 6:
				case "6":
					output = "NumberInt";
					break;
				case 7:
				case "7":
					output = "Object";
					break;
				case 8:
				case "8":
					output = "Text";
					break;
			default:
				break;
			}
		}

		return output;
	}

	/**
	 * SettingType
	 */
	export function ConvertSettingTypeToString(value: number | string | server.settingType): string {//SampleSinglePageApplication.DataObjects+SettingType
		let output: string = "";

		if (tsUtilities.HasValue("" + value)) {
			switch (value) {
				case 0:
				case "0":
					output = "boolean";
					break;
				case 1:
				case "1":
					output = "datetime";
					break;
				case 2:
				case "2":
					output = "encryptedtext";
					break;
				case 3:
				case "3":
					output = "guid";
					break;
				case 4:
				case "4":
					output = "numberdecimal";
					break;
				case 5:
				case "5":
					output = "numberdouble";
					break;
				case 6:
				case "6":
					output = "numberint";
					break;
				case 7:
				case "7":
					output = "object";
					break;
				case 8:
				case "8":
					output = "text";
					break;
			default:
				break;
			}
		}

		return output;
	}
	/**
	 * SettingType
	 */
	export function ConvertSettingTypeFromString(value: number | string): server.settingType {//SampleSinglePageApplication.DataObjects+SettingType
		let output: server.settingType = null;

		if (tsUtilities.HasValue("" + value)) {
			let lowerValue = ("" + value).toLowerCase();
			switch (lowerValue) {
				case "0":
				case "boolean":
					output = 0
					break;
				case "1":
				case "datetime":
					output = 1
					break;
				case "2":
				case "encryptedtext":
					output = 2
					break;
				case "3":
				case "guid":
					output = 3
					break;
				case "4":
				case "numberdecimal":
					output = 4
					break;
				case "5":
				case "numberdouble":
					output = 5
					break;
				case "6":
				case "numberint":
					output = 6
					break;
				case "7":
				case "object":
					output = 7
					break;
				case "8":
				case "text":
					output = 8
					break;
			default:
				break;
			}
		}

		return output;
	}
	/**
	 * SettingType
	 */
	export function GetDropdownSettingType(includeDefault: boolean = false): server.dropDownEnum[] {//SampleSinglePageApplication.DataObjects+SettingType
		let output: server.dropDownEnum[] = [];
		if (includeDefault) {
			let itemChoose: server.dropDownEnum = { name: "Please chose a SettingType", value: null };
			output.push(itemChoose);
		}
		let itemBoolean: server.dropDownEnum = { name: "Boolean", value: 0 }; // "boolean":
		output.push(itemBoolean);
		let itemDateTime: server.dropDownEnum = { name: "DateTime", value: 1 }; // "datetime":
		output.push(itemDateTime);
		let itemEncryptedText: server.dropDownEnum = { name: "EncryptedText", value: 2 }; // "encryptedtext":
		output.push(itemEncryptedText);
		let itemGuid: server.dropDownEnum = { name: "Guid", value: 3 }; // "guid":
		output.push(itemGuid);
		let itemNumberDecimal: server.dropDownEnum = { name: "NumberDecimal", value: 4 }; // "numberdecimal":
		output.push(itemNumberDecimal);
		let itemNumberDouble: server.dropDownEnum = { name: "NumberDouble", value: 5 }; // "numberdouble":
		output.push(itemNumberDouble);
		let itemNumberInt: server.dropDownEnum = { name: "NumberInt", value: 6 }; // "numberint":
		output.push(itemNumberInt);
		let itemObject: server.dropDownEnum = { name: "Object", value: 7 }; // "object":
		output.push(itemObject);
		let itemText: server.dropDownEnum = { name: "Text", value: 8 }; // "text":
		output.push(itemText);
		return output;
	}
	/// 
	/// SignalRUpdateType
	/// 
	/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
	/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
	///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
	///
	/**
	 * SignalRUpdateType
	 */
	export function ConvertSignalRUpdateTypeToHumanReadableString(value: number | string | server.signalRUpdateType): string {//SampleSinglePageApplication.DataObjects+SignalRUpdateType
		let output: string = "";

		if (tsUtilities.HasValue("" + value)) {
			switch (value) {
				case 0:
				case "0":
					output = "This";
					break;
				case 1:
				case "1":
					output = "That";
					break;
				case 2:
				case "2":
					output = "Setting";
					break;
				case 3:
				case "3":
					output = "Unknown";
					break;
				case 4:
				case "4":
					output = "Files";
					break;
				case 5:
				case "5":
					output = "DataMigration";
					break;
				case 6:
				case "6":
					output = "Department";
					break;
				case 7:
				case "7":
					output = "DepartmentGroup";
					break;
				case 8:
				case "8":
					output = "FileStorage";
					break;
				case 9:
				case "9":
					output = "Tenant";
					break;
				case 10:
				case "10":
					output = "User";
					break;
				case 11:
				case "11":
					output = "UserGroup";
					break;
			default:
				break;
			}
		}

		return output;
	}

	/**
	 * SignalRUpdateType
	 */
	export function ConvertSignalRUpdateTypeToString(value: number | string | server.signalRUpdateType): string {//SampleSinglePageApplication.DataObjects+SignalRUpdateType
		let output: string = "";

		if (tsUtilities.HasValue("" + value)) {
			switch (value) {
				case 0:
				case "0":
					output = "this";
					break;
				case 1:
				case "1":
					output = "that";
					break;
				case 2:
				case "2":
					output = "setting";
					break;
				case 3:
				case "3":
					output = "unknown";
					break;
				case 4:
				case "4":
					output = "files";
					break;
				case 5:
				case "5":
					output = "datamigration";
					break;
				case 6:
				case "6":
					output = "department";
					break;
				case 7:
				case "7":
					output = "departmentgroup";
					break;
				case 8:
				case "8":
					output = "filestorage";
					break;
				case 9:
				case "9":
					output = "tenant";
					break;
				case 10:
				case "10":
					output = "user";
					break;
				case 11:
				case "11":
					output = "usergroup";
					break;
			default:
				break;
			}
		}

		return output;
	}
	/**
	 * SignalRUpdateType
	 */
	export function ConvertSignalRUpdateTypeFromString(value: number | string): server.signalRUpdateType {//SampleSinglePageApplication.DataObjects+SignalRUpdateType
		let output: server.signalRUpdateType = null;

		if (tsUtilities.HasValue("" + value)) {
			let lowerValue = ("" + value).toLowerCase();
			switch (lowerValue) {
				case "0":
				case "this":
					output = 0
					break;
				case "1":
				case "that":
					output = 1
					break;
				case "2":
				case "setting":
					output = 2
					break;
				case "3":
				case "unknown":
					output = 3
					break;
				case "4":
				case "files":
					output = 4
					break;
				case "5":
				case "datamigration":
					output = 5
					break;
				case "6":
				case "department":
					output = 6
					break;
				case "7":
				case "departmentgroup":
					output = 7
					break;
				case "8":
				case "filestorage":
					output = 8
					break;
				case "9":
				case "tenant":
					output = 9
					break;
				case "10":
				case "user":
					output = 10
					break;
				case "11":
				case "usergroup":
					output = 11
					break;
			default:
				break;
			}
		}

		return output;
	}
	/**
	 * SignalRUpdateType
	 */
	export function GetDropdownSignalRUpdateType(includeDefault: boolean = false): server.dropDownEnum[] {//SampleSinglePageApplication.DataObjects+SignalRUpdateType
		let output: server.dropDownEnum[] = [];
		if (includeDefault) {
			let itemChoose: server.dropDownEnum = { name: "Please chose a SignalRUpdateType", value: null };
			output.push(itemChoose);
		}
		let itemThis: server.dropDownEnum = { name: "This", value: 0 }; // "this":
		output.push(itemThis);
		let itemThat: server.dropDownEnum = { name: "That", value: 1 }; // "that":
		output.push(itemThat);
		let itemSetting: server.dropDownEnum = { name: "Setting", value: 2 }; // "setting":
		output.push(itemSetting);
		let itemUnknown: server.dropDownEnum = { name: "Unknown", value: 3 }; // "unknown":
		output.push(itemUnknown);
		let itemFiles: server.dropDownEnum = { name: "Files", value: 4 }; // "files":
		output.push(itemFiles);
		let itemDataMigration: server.dropDownEnum = { name: "DataMigration", value: 5 }; // "datamigration":
		output.push(itemDataMigration);
		let itemDepartment: server.dropDownEnum = { name: "Department", value: 6 }; // "department":
		output.push(itemDepartment);
		let itemDepartmentGroup: server.dropDownEnum = { name: "DepartmentGroup", value: 7 }; // "departmentgroup":
		output.push(itemDepartmentGroup);
		let itemFileStorage: server.dropDownEnum = { name: "FileStorage", value: 8 }; // "filestorage":
		output.push(itemFileStorage);
		let itemTenant: server.dropDownEnum = { name: "Tenant", value: 9 }; // "tenant":
		output.push(itemTenant);
		let itemUser: server.dropDownEnum = { name: "User", value: 10 }; // "user":
		output.push(itemUser);
		let itemUserGroup: server.dropDownEnum = { name: "UserGroup", value: 11 }; // "usergroup":
		output.push(itemUserGroup);
		return output;
	}
	/// 
	/// UserLookupType
	/// 
	/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
	/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
	///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
	///
	/**
	 * UserLookupType
	 */
	export function ConvertUserLookupTypeToHumanReadableString(value: number | string | server.userLookupType): string {//SampleSinglePageApplication.DataObjects+UserLookupType
		let output: string = "";

		if (tsUtilities.HasValue("" + value)) {
			switch (value) {
				case 0:
				case "0":
					output = "Email";
					break;
				case 1:
				case "1":
					output = "EmployeeId";
					break;
				case 2:
				case "2":
					output = "Guid";
					break;
				case 3:
				case "3":
					output = "Username";
					break;
			default:
				break;
			}
		}

		return output;
	}

	/**
	 * UserLookupType
	 */
	export function ConvertUserLookupTypeToString(value: number | string | server.userLookupType): string {//SampleSinglePageApplication.DataObjects+UserLookupType
		let output: string = "";

		if (tsUtilities.HasValue("" + value)) {
			switch (value) {
				case 0:
				case "0":
					output = "email";
					break;
				case 1:
				case "1":
					output = "employeeid";
					break;
				case 2:
				case "2":
					output = "guid";
					break;
				case 3:
				case "3":
					output = "username";
					break;
			default:
				break;
			}
		}

		return output;
	}
	/**
	 * UserLookupType
	 */
	export function ConvertUserLookupTypeFromString(value: number | string): server.userLookupType {//SampleSinglePageApplication.DataObjects+UserLookupType
		let output: server.userLookupType = null;

		if (tsUtilities.HasValue("" + value)) {
			let lowerValue = ("" + value).toLowerCase();
			switch (lowerValue) {
				case "0":
				case "email":
					output = 0
					break;
				case "1":
				case "employeeid":
					output = 1
					break;
				case "2":
				case "guid":
					output = 2
					break;
				case "3":
				case "username":
					output = 3
					break;
			default:
				break;
			}
		}

		return output;
	}
	/**
	 * UserLookupType
	 */
	export function GetDropdownUserLookupType(includeDefault: boolean = false): server.dropDownEnum[] {//SampleSinglePageApplication.DataObjects+UserLookupType
		let output: server.dropDownEnum[] = [];
		if (includeDefault) {
			let itemChoose: server.dropDownEnum = { name: "Please chose a UserLookupType", value: null };
			output.push(itemChoose);
		}
		let itemEmail: server.dropDownEnum = { name: "Email", value: 0 }; // "email":
		output.push(itemEmail);
		let itemEmployeeId: server.dropDownEnum = { name: "EmployeeId", value: 1 }; // "employeeid":
		output.push(itemEmployeeId);
		let itemGuid: server.dropDownEnum = { name: "Guid", value: 2 }; // "guid":
		output.push(itemGuid);
		let itemUsername: server.dropDownEnum = { name: "Username", value: 3 }; // "username":
		output.push(itemUsername);
		return output;
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+ActionResponseObject
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class actionResponseObject { // SampleSinglePageApplication.DataObjects+ActionResponseObject
	actionResponse: KnockoutObservable<booleanResponse> = ko.observable(new booleanResponse); //SampleSinglePageApplication.DataObjects+BooleanResponse: ActionResponse

	Load(data: server.actionResponseObject) {
		if (data != null) {
			this.actionResponse().Load(data.actionResponse);
		}
		else {
			this.actionResponse(new booleanResponse);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+ActiveDirectorySearchResults
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class activeDirectorySearchResults { // SampleSinglePageApplication.DataObjects+ActiveDirectorySearchResults
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	userId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: UserId
	firstName: KnockoutObservable<string> = ko.observable(null); //System.String: FirstName
	lastName: KnockoutObservable<string> = ko.observable(null); //System.String: LastName
	email: KnockoutObservable<string> = ko.observable(null); //System.String: Email
	department: KnockoutObservable<string> = ko.observable(null); //System.String: Department
	location: KnockoutObservable<string> = ko.observable(null); //System.String: Location

	Load(data: server.activeDirectorySearchResults) {
		if (data != null) {
			this.tenantId(data.tenantId);
			this.userId(data.userId);
			this.firstName(data.firstName);
			this.lastName(data.lastName);
			this.email(data.email);
			this.department(data.department);
			this.location(data.location);
		}
		else {
			this.tenantId(null);
			this.userId(null);
			this.firstName(null);
			this.lastName(null);
			this.email(null);
			this.department(null);
			this.location(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+ActiveDirectoryUserInfo
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class activeDirectoryUserInfo { // SampleSinglePageApplication.DataObjects+ActiveDirectoryUserInfo
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	userId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: UserId
	department: KnockoutObservable<string> = ko.observable(null); //System.String: Department
	username: KnockoutObservable<string> = ko.observable(null); //System.String: Username
	firstName: KnockoutObservable<string> = ko.observable(null); //System.String: FirstName
	lastName: KnockoutObservable<string> = ko.observable(null); //System.String: LastName
	email: KnockoutObservable<string> = ko.observable(null); //System.String: Email
	phone: KnockoutObservable<string> = ko.observable(null); //System.String: Phone
	employeeId: KnockoutObservable<string> = ko.observable(null); //System.String: EmployeeId
	title: KnockoutObservable<string> = ko.observable(null); //System.String: Title
	location: KnockoutObservable<string> = ko.observable(null); //System.String: Location

	Load(data: server.activeDirectoryUserInfo) {
		if (data != null) {
			this.tenantId(data.tenantId);
			this.userId(data.userId);
			this.department(data.department);
			this.username(data.username);
			this.firstName(data.firstName);
			this.lastName(data.lastName);
			this.email(data.email);
			this.phone(data.phone);
			this.employeeId(data.employeeId);
			this.title(data.title);
			this.location(data.location);
		}
		else {
			this.tenantId(null);
			this.userId(null);
			this.department(null);
			this.username(null);
			this.firstName(null);
			this.lastName(null);
			this.email(null);
			this.phone(null);
			this.employeeId(null);
			this.title(null);
			this.location(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+AddModule
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class addModule { // SampleSinglePageApplication.DataObjects+AddModule
	module: KnockoutObservable<string> = ko.observable(null); //System.String: Module
	name: KnockoutObservable<string> = ko.observable(null); //System.String: Name

	Load(data: server.addModule) {
		if (data != null) {
			this.module(data.module);
			this.name(data.name);
		}
		else {
			this.module(null);
			this.name(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+AjaxLookup
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class ajaxLookup extends actionResponseObject { // SampleSinglePageApplication.DataObjects+AjaxLookup
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	search: KnockoutObservable<string> = ko.observable(null); //System.String: Search
	parameters: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.String]: Parameters
	results: KnockoutObservableArray<ajaxResults> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+AjaxResults]: Results

	Load(data: server.ajaxLookup) {
		super.Load(data);
		if (data != null) {
			this.tenantId(data.tenantId);
			this.search(data.search);
			this.parameters(data.parameters);
			let __results: ajaxResults[] = [];
			if (data.results != null) {
				data.results.forEach((e: server.ajaxResults) => {
					let item: ajaxResults = new ajaxResults();
					item.Load(e);
					__results.push(item);
				});
			}
			this.results(__results);
		}
		else {
			this.tenantId(null);
			this.search(null);
			this.parameters([]);
			this.results([]);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+AjaxResults
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class ajaxResults { // SampleSinglePageApplication.DataObjects+AjaxResults
	label: KnockoutObservable<string> = ko.observable(null); //System.String: label
	value: KnockoutObservable<string> = ko.observable(null); //System.String: value
	email: KnockoutObservable<string> = ko.observable(null); //System.String: email
	username: KnockoutObservable<string> = ko.observable(null); //System.String: username
	extra1: KnockoutObservable<string> = ko.observable(null); //System.String: extra1
	extra2: KnockoutObservable<string> = ko.observable(null); //System.String: extra2
	extra3: KnockoutObservable<string> = ko.observable(null); //System.String: extra3

	Load(data: server.ajaxResults) {
		if (data != null) {
			this.label(data.label);
			this.value(data.value);
			this.email(data.email);
			this.username(data.username);
			this.extra1(data.extra1);
			this.extra2(data.extra2);
			this.extra3(data.extra3);
		}
		else {
			this.label(null);
			this.value(null);
			this.email(null);
			this.username(null);
			this.extra1(null);
			this.extra2(null);
			this.extra3(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+ApplicationSettings
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class applicationSettings extends actionResponseObject { // SampleSinglePageApplication.DataObjects+ApplicationSettings
	applicationURL: KnockoutObservable<string> = ko.observable(null); //System.String: ApplicationURL
	defaultTenantCode: KnockoutObservable<string> = ko.observable(null); //System.String: DefaultTenantCode
	encryptionKey: KnockoutObservable<string> = ko.observable(null); //System.String: EncryptionKey
	mailServer: KnockoutObservable<string> = ko.observable(null); //System.String: MailServer
	mailServerPassword: KnockoutObservable<string> = ko.observable(null); //System.String: MailServerPassword
	mailServerPort: KnockoutObservable<number> = ko.observable(null); //System.Nullable`1[System.Int32]: MailServerPort
	mailServerUsername: KnockoutObservable<string> = ko.observable(null); //System.String: MailServerUsername
	mailServerUseSSL: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: MailServerUseSSL
	defaultReplyToAddress: KnockoutObservable<string> = ko.observable(null); //System.String: DefaultReplyToAddress
	useTenantCodeInUrl: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: UseTenantCodeInUrl
	showTenantCodeFieldOnLoginForm: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: ShowTenantCodeFieldOnLoginForm
	showTenantListingWhenMissingTenantCode: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: ShowTenantListingWhenMissingTenantCode

	Load(data: server.applicationSettings) {
		super.Load(data);
		if (data != null) {
			this.applicationURL(data.applicationURL);
			this.defaultTenantCode(data.defaultTenantCode);
			this.encryptionKey(data.encryptionKey);
			this.mailServer(data.mailServer);
			this.mailServerPassword(data.mailServerPassword);
			this.mailServerPort(data.mailServerPort);
			this.mailServerUsername(data.mailServerUsername);
			this.mailServerUseSSL(data.mailServerUseSSL);
			this.defaultReplyToAddress(data.defaultReplyToAddress);
			this.useTenantCodeInUrl(data.useTenantCodeInUrl);
			this.showTenantCodeFieldOnLoginForm(data.showTenantCodeFieldOnLoginForm);
			this.showTenantListingWhenMissingTenantCode(data.showTenantListingWhenMissingTenantCode);
		}
		else {
			this.applicationURL(null);
			this.defaultTenantCode(null);
			this.encryptionKey(null);
			this.mailServer(null);
			this.mailServerPassword(null);
			this.mailServerPort(null);
			this.mailServerUsername(null);
			this.mailServerUseSSL(false);
			this.defaultReplyToAddress(null);
			this.useTenantCodeInUrl(false);
			this.showTenantCodeFieldOnLoginForm(false);
			this.showTenantListingWhenMissingTenantCode(false);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+Authenticate
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class authenticate { // SampleSinglePageApplication.DataObjects+Authenticate
	username: KnockoutObservable<string> = ko.observable(null); //System.String: Username
	password: KnockoutObservable<string> = ko.observable(null); //System.String: Password
	tenantCode: KnockoutObservable<string> = ko.observable(null); //System.String: TenantCode

	Load(data: server.authenticate) {
		if (data != null) {
			this.username(data.username);
			this.password(data.password);
			this.tenantCode(data.tenantCode);
		}
		else {
			this.username(null);
			this.password(null);
			this.tenantCode(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+BooleanResponse
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class booleanResponse { // SampleSinglePageApplication.DataObjects+BooleanResponse
	messages: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.String]: Messages
	result: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: Result

	Load(data: server.booleanResponse) {
		if (data != null) {
			this.messages(data.messages);
			this.result(data.result);
		}
		else {
			this.messages([]);
			this.result(false);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+ConnectionStringConfig
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class connectionStringConfig extends actionResponseObject { // SampleSinglePageApplication.DataObjects+ConnectionStringConfig
	connectionString: KnockoutObservable<string> = ko.observable(null); //System.String: ConnectionString
	databaseType: KnockoutObservable<string> = ko.observable(null); //System.String: DatabaseType
	mySQL_Server: KnockoutObservable<string> = ko.observable(null); //System.String: MySQL_Server
	mySQL_Database: KnockoutObservable<string> = ko.observable(null); //System.String: MySQL_Database
	mySQL_User: KnockoutObservable<string> = ko.observable(null); //System.String: MySQL_User
	mySQL_Password: KnockoutObservable<string> = ko.observable(null); //System.String: MySQL_Password
	postgreSql_Host: KnockoutObservable<string> = ko.observable(null); //System.String: PostgreSql_Host
	postgreSql_Database: KnockoutObservable<string> = ko.observable(null); //System.String: PostgreSql_Database
	postgreSql_Username: KnockoutObservable<string> = ko.observable(null); //System.String: PostgreSql_Username
	postgreSql_Password: KnockoutObservable<string> = ko.observable(null); //System.String: PostgreSql_Password
	sqLiteDatabase: KnockoutObservable<string> = ko.observable(null); //System.String: SQLiteDatabase
	sqlServer_Server: KnockoutObservable<string> = ko.observable(null); //System.String: SqlServer_Server
	sqlServer_Database: KnockoutObservable<string> = ko.observable(null); //System.String: SqlServer_Database
	sqlServer_UserId: KnockoutObservable<string> = ko.observable(null); //System.String: SqlServer_UserId
	sqlServer_Password: KnockoutObservable<string> = ko.observable(null); //System.String: SqlServer_Password
	sqlServer_IntegratedSecurity: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: SqlServer_IntegratedSecurity
	sqlServer_PersistSecurityInfo: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: SqlServer_PersistSecurityInfo
	sqlServer_TrustServerCertificate: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: SqlServer_TrustServerCertificate

	Load(data: server.connectionStringConfig) {
		super.Load(data);
		if (data != null) {
			this.connectionString(data.connectionString);
			this.databaseType(data.databaseType);
			this.mySQL_Server(data.mySQL_Server);
			this.mySQL_Database(data.mySQL_Database);
			this.mySQL_User(data.mySQL_User);
			this.mySQL_Password(data.mySQL_Password);
			this.postgreSql_Host(data.postgreSql_Host);
			this.postgreSql_Database(data.postgreSql_Database);
			this.postgreSql_Username(data.postgreSql_Username);
			this.postgreSql_Password(data.postgreSql_Password);
			this.sqLiteDatabase(data.sqLiteDatabase);
			this.sqlServer_Server(data.sqlServer_Server);
			this.sqlServer_Database(data.sqlServer_Database);
			this.sqlServer_UserId(data.sqlServer_UserId);
			this.sqlServer_Password(data.sqlServer_Password);
			this.sqlServer_IntegratedSecurity(data.sqlServer_IntegratedSecurity);
			this.sqlServer_PersistSecurityInfo(data.sqlServer_PersistSecurityInfo);
			this.sqlServer_TrustServerCertificate(data.sqlServer_TrustServerCertificate);
		}
		else {
			this.connectionString(null);
			this.databaseType(null);
			this.mySQL_Server(null);
			this.mySQL_Database(null);
			this.mySQL_User(null);
			this.mySQL_Password(null);
			this.postgreSql_Host(null);
			this.postgreSql_Database(null);
			this.postgreSql_Username(null);
			this.postgreSql_Password(null);
			this.sqLiteDatabase(null);
			this.sqlServer_Server(null);
			this.sqlServer_Database(null);
			this.sqlServer_UserId(null);
			this.sqlServer_Password(null);
			this.sqlServer_IntegratedSecurity(false);
			this.sqlServer_PersistSecurityInfo(false);
			this.sqlServer_TrustServerCertificate(false);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+DataMigration
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class dataMigration extends actionResponseObject { // SampleSinglePageApplication.DataObjects+DataMigration
	migration: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.String]: Migration
	migrationId: KnockoutObservable<string> = ko.observable(null); //System.String: MigrationId

	Load(data: server.dataMigration) {
		super.Load(data);
		if (data != null) {
			this.migration(data.migration);
			this.migrationId(data.migrationId);
		}
		else {
			this.migration([]);
			this.migrationId(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+Department
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class department extends actionResponseObject { // SampleSinglePageApplication.DataObjects+Department
	departmentId: KnockoutObservable<string> = ko.observable(null); //System.Guid: DepartmentId
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	departmentName: KnockoutObservable<string> = ko.observable(null); //System.String: DepartmentName
	activeDirectoryNames: KnockoutObservable<string> = ko.observable(null); //System.String: ActiveDirectoryNames
	enabled: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: Enabled
	departmentGroupId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: DepartmentGroupId

	Load(data: server.department) {
		super.Load(data);
		if (data != null) {
			this.departmentId(data.departmentId);
			this.tenantId(data.tenantId);
			this.departmentName(data.departmentName);
			this.activeDirectoryNames(data.activeDirectoryNames);
			this.enabled(data.enabled);
			this.departmentGroupId(data.departmentGroupId);
		}
		else {
			this.departmentId(null);
			this.tenantId(null);
			this.departmentName(null);
			this.activeDirectoryNames(null);
			this.enabled(false);
			this.departmentGroupId(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+DepartmentGroup
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class departmentGroup extends actionResponseObject { // SampleSinglePageApplication.DataObjects+DepartmentGroup
	departmentGroupId: KnockoutObservable<string> = ko.observable(null); //System.Guid: DepartmentGroupId
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	departmentGroupName: KnockoutObservable<string> = ko.observable(null); //System.String: DepartmentGroupName

	Load(data: server.departmentGroup) {
		super.Load(data);
		if (data != null) {
			this.departmentGroupId(data.departmentGroupId);
			this.tenantId(data.tenantId);
			this.departmentGroupName(data.departmentGroupName);
		}
		else {
			this.departmentGroupId(null);
			this.tenantId(null);
			this.departmentGroupName(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+Dictionary
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class dictionary { // SampleSinglePageApplication.DataObjects+Dictionary
	key: KnockoutObservable<string> = ko.observable(null); //System.String: Key
	value: KnockoutObservable<string> = ko.observable(null); //System.String: Value

	Load(data: server.dictionary) {
		if (data != null) {
			this.key(data.key);
			this.value(data.value);
		}
		else {
			this.key(null);
			this.value(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+DropDownEnum
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class dropDownEnum { // SampleSinglePageApplication.DataObjects+DropDownEnum
	name: KnockoutObservable<string> = ko.observable(null); //System.String: Name
	value: KnockoutObservable<number> = ko.observable(0); //System.Int32: Value

	Load(data: server.dropDownEnum) {
		if (data != null) {
			this.name(data.name);
			this.value(data.value);
		}
		else {
			this.name(null);
			this.value(0);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+EmailMessage
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class emailMessage extends actionResponseObject { // SampleSinglePageApplication.DataObjects+EmailMessage
	from: KnockoutObservable<string> = ko.observable(null); //System.String: From
	fromDisplayName: KnockoutObservable<string> = ko.observable(null); //System.String: FromDisplayName
	to: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.String]: To
	cc: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.String]: Cc
	bcc: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.String]: Bcc
	subject: KnockoutObservable<string> = ko.observable(null); //System.String: Subject
	body: KnockoutObservable<string> = ko.observable(null); //System.String: Body
	files: KnockoutObservableArray<fileStorage> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+FileStorage]: Files

	Load(data: server.emailMessage) {
		super.Load(data);
		if (data != null) {
			this.from(data.from);
			this.fromDisplayName(data.fromDisplayName);
			this.to(data.to);
			this.cc(data.cc);
			this.bcc(data.bcc);
			this.subject(data.subject);
			this.body(data.body);
			let __files: fileStorage[] = [];
			if (data.files != null) {
				data.files.forEach((e: server.fileStorage) => {
					let item: fileStorage = new fileStorage();
					item.Load(e);
					__files.push(item);
				});
			}
			this.files(__files);
		}
		else {
			this.from(null);
			this.fromDisplayName(null);
			this.to([]);
			this.cc([]);
			this.bcc([]);
			this.subject(null);
			this.body(null);
			this.files([]);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+ExternalDataSource
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class externalDataSource { // SampleSinglePageApplication.DataObjects+ExternalDataSource
	name: KnockoutObservable<string> = ko.observable(null); //System.String: Name
	type: KnockoutObservable<string> = ko.observable(null); //System.String: Type
	connectionString: KnockoutObservable<string> = ko.observable(null); //System.String: ConnectionString
	source: KnockoutObservable<string> = ko.observable(null); //System.String: Source
	sortOrder: KnockoutObservable<number> = ko.observable(0); //System.Int32: SortOrder
	active: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: Active

	Load(data: server.externalDataSource) {
		if (data != null) {
			this.name(data.name);
			this.type(data.type);
			this.connectionString(data.connectionString);
			this.source(data.source);
			this.sortOrder(data.sortOrder);
			this.active(data.active);
		}
		else {
			this.name(null);
			this.type(null);
			this.connectionString(null);
			this.source(null);
			this.sortOrder(0);
			this.active(false);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+FileStorage
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class fileStorage extends actionResponseObject { // SampleSinglePageApplication.DataObjects+FileStorage
	fileId: KnockoutObservable<string> = ko.observable(null); //System.Guid: FileId
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	itemId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: ItemId
	fileName: KnockoutObservable<string> = ko.observable(null); //System.String: FileName
	extension: KnockoutObservable<string> = ko.observable(null); //System.String: Extension
	sourceFileId: KnockoutObservable<string> = ko.observable(null); //System.String: SourceFileId
	bytes: KnockoutObservable<number> = ko.observable(null); //System.Nullable`1[System.Int64]: Bytes
	value: KnockoutObservableArray<any> = ko.observableArray([]); //System.Byte[]: Value
	uploadDate: KnockoutObservable<Date> = ko.observable(new Date); //System.DateTime: UploadDate
	userId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: UserId
	base64value: KnockoutObservable<string> = ko.observable(null); //System.String: Base64value

	Load(data: server.fileStorage) {
		super.Load(data);
		if (data != null) {
			this.fileId(data.fileId);
			this.tenantId(data.tenantId);
			this.itemId(data.itemId);
			this.fileName(data.fileName);
			this.extension(data.extension);
			this.sourceFileId(data.sourceFileId);
			this.bytes(data.bytes);
			this.value(data.value);
			this.uploadDate(data.uploadDate);
			this.userId(data.userId);
			this.base64value(data.base64value);
		}
		else {
			this.fileId(null);
			this.tenantId(null);
			this.itemId(null);
			this.fileName(null);
			this.extension(null);
			this.sourceFileId(null);
			this.bytes(null);
			this.value([]);
			this.uploadDate(new Date);
			this.userId(null);
			this.base64value(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+Filter
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class filter extends actionResponseObject { // SampleSinglePageApplication.DataObjects+Filter
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	executionTime: KnockoutObservable<number> = ko.observable(0); //System.Double: ExecutionTime
	showFilters: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: ShowFilters
	start: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: Start
	end: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: End
	filterId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: FilterId
	keyword: KnockoutObservable<string> = ko.observable(null); //System.String: Keyword
	sort: KnockoutObservable<string> = ko.observable(null); //System.String: Sort
	sortOrder: KnockoutObservable<string> = ko.observable(null); //System.String: SortOrder
	recordsPerPage: KnockoutObservable<number> = ko.observable(0); //System.Int32: RecordsPerPage
	pageCount: KnockoutObservable<number> = ko.observable(0); //System.Int32: PageCount
	recordCount: KnockoutObservable<number> = ko.observable(0); //System.Int32: RecordCount
	page: KnockoutObservable<number> = ko.observable(0); //System.Int32: Page
	export: KnockoutObservableArray<any> = ko.observableArray([]); //System.Byte[]: Export
	tenants: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.Guid]: Tenants
	columns: KnockoutObservableArray<filterColumn> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+FilterColumn]: Columns
	records: KnockoutObservableArray<any> = ko.observableArray([]); //System.Object[]: Records
	cultureCode: KnockoutObservable<string> = ko.observable(null); //System.String: CultureCode
	udf01: KnockoutObservable<string> = ko.observable(null); //System.String: udf01
	udf02: KnockoutObservable<string> = ko.observable(null); //System.String: udf02
	udf03: KnockoutObservable<string> = ko.observable(null); //System.String: udf03
	udf04: KnockoutObservable<string> = ko.observable(null); //System.String: udf04
	udf05: KnockoutObservable<string> = ko.observable(null); //System.String: udf05
	udf06: KnockoutObservable<string> = ko.observable(null); //System.String: udf06
	udf07: KnockoutObservable<string> = ko.observable(null); //System.String: udf07
	udf08: KnockoutObservable<string> = ko.observable(null); //System.String: udf08
	udf09: KnockoutObservable<string> = ko.observable(null); //System.String: udf09
	udf10: KnockoutObservable<string> = ko.observable(null); //System.String: udf10

	Load(data: server.filter) {
		super.Load(data);
		if (data != null) {
			this.tenantId(data.tenantId);
			this.executionTime(data.executionTime);
			this.showFilters(data.showFilters);
			this.start(data.start);
			this.end(data.end);
			this.filterId(data.filterId);
			this.keyword(data.keyword);
			this.sort(data.sort);
			this.sortOrder(data.sortOrder);
			this.recordsPerPage(data.recordsPerPage);
			this.pageCount(data.pageCount);
			this.recordCount(data.recordCount);
			this.page(data.page);
			this.export(data.export);
			this.tenants(data.tenants);
			let __columns: filterColumn[] = [];
			if (data.columns != null) {
				data.columns.forEach((e: server.filterColumn) => {
					let item: filterColumn = new filterColumn();
					item.Load(e);
					__columns.push(item);
				});
			}
			this.columns(__columns);
			this.records(data.records);
			this.cultureCode(data.cultureCode);
			this.udf01(data.udf01);
			this.udf02(data.udf02);
			this.udf03(data.udf03);
			this.udf04(data.udf04);
			this.udf05(data.udf05);
			this.udf06(data.udf06);
			this.udf07(data.udf07);
			this.udf08(data.udf08);
			this.udf09(data.udf09);
			this.udf10(data.udf10);
		}
		else {
			this.tenantId(null);
			this.executionTime(0);
			this.showFilters(false);
			this.start(null);
			this.end(null);
			this.filterId(null);
			this.keyword(null);
			this.sort(null);
			this.sortOrder(null);
			this.recordsPerPage(0);
			this.pageCount(0);
			this.recordCount(0);
			this.page(0);
			this.export([]);
			this.tenants([]);
			this.columns([]);
			this.records([]);
			this.cultureCode(null);
			this.udf01(null);
			this.udf02(null);
			this.udf03(null);
			this.udf04(null);
			this.udf05(null);
			this.udf06(null);
			this.udf07(null);
			this.udf08(null);
			this.udf09(null);
			this.udf10(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+FilterColumn
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class filterColumn { // SampleSinglePageApplication.DataObjects+FilterColumn
	align: KnockoutObservable<string> = ko.observable(null); //System.String: Align
	label: KnockoutObservable<string> = ko.observable(null); //System.String: Label
	tipText: KnockoutObservable<string> = ko.observable(null); //System.String: TipText
	dataElementName: KnockoutObservable<string> = ko.observable(null); //System.String: DataElementName
	dataType: KnockoutObservable<string> = ko.observable(null); //System.String: DataType
	sortable: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: Sortable
	class: KnockoutObservable<string> = ko.observable(null); //System.String: Class
	booleanIcon: KnockoutObservable<string> = ko.observable(null); //System.String: BooleanIcon

	Load(data: server.filterColumn) {
		if (data != null) {
			this.align(data.align);
			this.label(data.label);
			this.tipText(data.tipText);
			this.dataElementName(data.dataElementName);
			this.dataType(data.dataType);
			this.sortable(data.sortable);
			this.class(data.class);
			this.booleanIcon(data.booleanIcon);
		}
		else {
			this.align(null);
			this.label(null);
			this.tipText(null);
			this.dataElementName(null);
			this.dataType(null);
			this.sortable(false);
			this.class(null);
			this.booleanIcon(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+FilterDepartmentGroupsAuto
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class filterDepartmentGroupsAuto extends actionResponseObject { // SampleSinglePageApplication.DataObjects+FilterDepartmentGroupsAuto
	departmentGroupId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: DepartmentGroupId
	departmentGroupName: KnockoutObservable<string> = ko.observable(null); //System.String: DepartmentGroupName
	departmentGroupNameFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: DepartmentGroupNameFilterExact
	departmentGroupNameIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: DepartmentGroupNameIncludeInKeyword
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	executionTime: KnockoutObservable<number> = ko.observable(0); //System.Double: ExecutionTime
	showFilters: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: ShowFilters
	start: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: Start
	end: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: End
	filterId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: FilterId
	keyword: KnockoutObservable<string> = ko.observable(null); //System.String: Keyword
	sort: KnockoutObservable<string> = ko.observable(null); //System.String: Sort
	sortOrder: KnockoutObservable<string> = ko.observable(null); //System.String: SortOrder
	recordsPerPage: KnockoutObservable<number> = ko.observable(0); //System.Int32: RecordsPerPage
	pageCount: KnockoutObservable<number> = ko.observable(0); //System.Int32: PageCount
	recordCount: KnockoutObservable<number> = ko.observable(0); //System.Int32: RecordCount
	page: KnockoutObservable<number> = ko.observable(0); //System.Int32: Page
	export: KnockoutObservableArray<any> = ko.observableArray([]); //System.Byte[]: Export
	tenants: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.Guid]: Tenants
	columns: KnockoutObservableArray<filterColumn> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+FilterColumn]: Columns
	records: KnockoutObservableArray<any> = ko.observableArray([]); //System.Object[]: Records
	cultureCode: KnockoutObservable<string> = ko.observable(null); //System.String: CultureCode
	udf01: KnockoutObservable<string> = ko.observable(null); //System.String: udf01
	udf02: KnockoutObservable<string> = ko.observable(null); //System.String: udf02
	udf03: KnockoutObservable<string> = ko.observable(null); //System.String: udf03
	udf04: KnockoutObservable<string> = ko.observable(null); //System.String: udf04
	udf05: KnockoutObservable<string> = ko.observable(null); //System.String: udf05
	udf06: KnockoutObservable<string> = ko.observable(null); //System.String: udf06
	udf07: KnockoutObservable<string> = ko.observable(null); //System.String: udf07
	udf08: KnockoutObservable<string> = ko.observable(null); //System.String: udf08
	udf09: KnockoutObservable<string> = ko.observable(null); //System.String: udf09
	udf10: KnockoutObservable<string> = ko.observable(null); //System.String: udf10

	Load(data: server.filterDepartmentGroupsAuto) {
		super.Load(data);
		if (data != null) {
			this.departmentGroupId(data.departmentGroupId);
			this.departmentGroupName(data.departmentGroupName);
			this.departmentGroupNameFilterExact(data.departmentGroupNameFilterExact);
			this.departmentGroupNameIncludeInKeyword(data.departmentGroupNameIncludeInKeyword);
			this.tenantId(data.tenantId);
			this.executionTime(data.executionTime);
			this.showFilters(data.showFilters);
			this.start(data.start);
			this.end(data.end);
			this.filterId(data.filterId);
			this.keyword(data.keyword);
			this.sort(data.sort);
			this.sortOrder(data.sortOrder);
			this.recordsPerPage(data.recordsPerPage);
			this.pageCount(data.pageCount);
			this.recordCount(data.recordCount);
			this.page(data.page);
			this.export(data.export);
			this.tenants(data.tenants);
			let __columns: filterColumn[] = [];
			if (data.columns != null) {
				data.columns.forEach((e: server.filterColumn) => {
					let item: filterColumn = new filterColumn();
					item.Load(e);
					__columns.push(item);
				});
			}
			this.columns(__columns);
			let __records: departmentGroup[] = [];
			if (data.records != null) {
				data.records.forEach((e: server.departmentGroup) => {
					let item: departmentGroup = new departmentGroup();
					item.Load(e);
					__records.push(item);
				});
			}
			this.records(__records);
			this.cultureCode(data.cultureCode);
			this.udf01(data.udf01);
			this.udf02(data.udf02);
			this.udf03(data.udf03);
			this.udf04(data.udf04);
			this.udf05(data.udf05);
			this.udf06(data.udf06);
			this.udf07(data.udf07);
			this.udf08(data.udf08);
			this.udf09(data.udf09);
			this.udf10(data.udf10);
		}
		else {
			this.departmentGroupId(null);
			this.departmentGroupName(null);
			this.departmentGroupNameFilterExact(false);
			this.departmentGroupNameIncludeInKeyword(false);
			this.tenantId(null);
			this.executionTime(0);
			this.showFilters(false);
			this.start(null);
			this.end(null);
			this.filterId(null);
			this.keyword(null);
			this.sort(null);
			this.sortOrder(null);
			this.recordsPerPage(0);
			this.pageCount(0);
			this.recordCount(0);
			this.page(0);
			this.export([]);
			this.tenants([]);
			this.columns([]);
			this.records([]);
			this.cultureCode(null);
			this.udf01(null);
			this.udf02(null);
			this.udf03(null);
			this.udf04(null);
			this.udf05(null);
			this.udf06(null);
			this.udf07(null);
			this.udf08(null);
			this.udf09(null);
			this.udf10(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+FilterDepartmentsAuto
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class filterDepartmentsAuto extends actionResponseObject { // SampleSinglePageApplication.DataObjects+FilterDepartmentsAuto
	departmentId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: DepartmentId
	departmentName: KnockoutObservable<string> = ko.observable(null); //System.String: DepartmentName
	departmentNameFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: DepartmentNameFilterExact
	departmentNameIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: DepartmentNameIncludeInKeyword
	activeDirectoryNames: KnockoutObservable<string> = ko.observable(null); //System.String: ActiveDirectoryNames
	activeDirectoryNamesFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: ActiveDirectoryNamesFilterExact
	activeDirectoryNamesIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: ActiveDirectoryNamesIncludeInKeyword
	enabled: KnockoutObservable<string> = ko.observable(""); //System.Nullable`1[System.Boolean]: Enabled
	departmentGroupId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: DepartmentGroupId
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	executionTime: KnockoutObservable<number> = ko.observable(0); //System.Double: ExecutionTime
	showFilters: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: ShowFilters
	start: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: Start
	end: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: End
	filterId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: FilterId
	keyword: KnockoutObservable<string> = ko.observable(null); //System.String: Keyword
	sort: KnockoutObservable<string> = ko.observable(null); //System.String: Sort
	sortOrder: KnockoutObservable<string> = ko.observable(null); //System.String: SortOrder
	recordsPerPage: KnockoutObservable<number> = ko.observable(0); //System.Int32: RecordsPerPage
	pageCount: KnockoutObservable<number> = ko.observable(0); //System.Int32: PageCount
	recordCount: KnockoutObservable<number> = ko.observable(0); //System.Int32: RecordCount
	page: KnockoutObservable<number> = ko.observable(0); //System.Int32: Page
	export: KnockoutObservableArray<any> = ko.observableArray([]); //System.Byte[]: Export
	tenants: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.Guid]: Tenants
	columns: KnockoutObservableArray<filterColumn> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+FilterColumn]: Columns
	records: KnockoutObservableArray<any> = ko.observableArray([]); //System.Object[]: Records
	cultureCode: KnockoutObservable<string> = ko.observable(null); //System.String: CultureCode
	udf01: KnockoutObservable<string> = ko.observable(null); //System.String: udf01
	udf02: KnockoutObservable<string> = ko.observable(null); //System.String: udf02
	udf03: KnockoutObservable<string> = ko.observable(null); //System.String: udf03
	udf04: KnockoutObservable<string> = ko.observable(null); //System.String: udf04
	udf05: KnockoutObservable<string> = ko.observable(null); //System.String: udf05
	udf06: KnockoutObservable<string> = ko.observable(null); //System.String: udf06
	udf07: KnockoutObservable<string> = ko.observable(null); //System.String: udf07
	udf08: KnockoutObservable<string> = ko.observable(null); //System.String: udf08
	udf09: KnockoutObservable<string> = ko.observable(null); //System.String: udf09
	udf10: KnockoutObservable<string> = ko.observable(null); //System.String: udf10

	Load(data: server.filterDepartmentsAuto) {
		super.Load(data);
		if (data != null) {
			this.departmentId(data.departmentId);
			this.departmentName(data.departmentName);
			this.departmentNameFilterExact(data.departmentNameFilterExact);
			this.departmentNameIncludeInKeyword(data.departmentNameIncludeInKeyword);
			this.activeDirectoryNames(data.activeDirectoryNames);
			this.activeDirectoryNamesFilterExact(data.activeDirectoryNamesFilterExact);
			this.activeDirectoryNamesIncludeInKeyword(data.activeDirectoryNamesIncludeInKeyword);
			this.enabled(autoUtility.ConvertBooleanToString(data.enabled));
			this.departmentGroupId(data.departmentGroupId);
			this.tenantId(data.tenantId);
			this.executionTime(data.executionTime);
			this.showFilters(data.showFilters);
			this.start(data.start);
			this.end(data.end);
			this.filterId(data.filterId);
			this.keyword(data.keyword);
			this.sort(data.sort);
			this.sortOrder(data.sortOrder);
			this.recordsPerPage(data.recordsPerPage);
			this.pageCount(data.pageCount);
			this.recordCount(data.recordCount);
			this.page(data.page);
			this.export(data.export);
			this.tenants(data.tenants);
			let __columns: filterColumn[] = [];
			if (data.columns != null) {
				data.columns.forEach((e: server.filterColumn) => {
					let item: filterColumn = new filterColumn();
					item.Load(e);
					__columns.push(item);
				});
			}
			this.columns(__columns);
			let __records: department[] = [];
			if (data.records != null) {
				data.records.forEach((e: server.department) => {
					let item: department = new department();
					item.Load(e);
					__records.push(item);
				});
			}
			this.records(__records);
			this.cultureCode(data.cultureCode);
			this.udf01(data.udf01);
			this.udf02(data.udf02);
			this.udf03(data.udf03);
			this.udf04(data.udf04);
			this.udf05(data.udf05);
			this.udf06(data.udf06);
			this.udf07(data.udf07);
			this.udf08(data.udf08);
			this.udf09(data.udf09);
			this.udf10(data.udf10);
		}
		else {
			this.departmentId(null);
			this.departmentName(null);
			this.departmentNameFilterExact(false);
			this.departmentNameIncludeInKeyword(false);
			this.activeDirectoryNames(null);
			this.activeDirectoryNamesFilterExact(false);
			this.activeDirectoryNamesIncludeInKeyword(false);
			this.enabled(null);
			this.departmentGroupId(null);
			this.tenantId(null);
			this.executionTime(0);
			this.showFilters(false);
			this.start(null);
			this.end(null);
			this.filterId(null);
			this.keyword(null);
			this.sort(null);
			this.sortOrder(null);
			this.recordsPerPage(0);
			this.pageCount(0);
			this.recordCount(0);
			this.page(0);
			this.export([]);
			this.tenants([]);
			this.columns([]);
			this.records([]);
			this.cultureCode(null);
			this.udf01(null);
			this.udf02(null);
			this.udf03(null);
			this.udf04(null);
			this.udf05(null);
			this.udf06(null);
			this.udf07(null);
			this.udf08(null);
			this.udf09(null);
			this.udf10(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+FilterFileStoragesAuto
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class filterFileStoragesAuto extends actionResponseObject { // SampleSinglePageApplication.DataObjects+FilterFileStoragesAuto
	fileId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: FileId
	itemId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: ItemId
	fileName: KnockoutObservable<string> = ko.observable(null); //System.String: FileName
	fileNameFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: FileNameFilterExact
	fileNameIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: FileNameIncludeInKeyword
	extension: KnockoutObservable<string> = ko.observable(null); //System.String: Extension
	extensionFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: ExtensionFilterExact
	extensionIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: ExtensionIncludeInKeyword
	sourceFileId: KnockoutObservable<string> = ko.observable(null); //System.String: SourceFileId
	sourceFileIdFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: SourceFileIdFilterExact
	sourceFileIdIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: SourceFileIdIncludeInKeyword
	bytes: KnockoutObservable<number> = ko.observable(null); //System.Nullable`1[System.Int64]: Bytes
	uploadDateStart: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: UploadDateStart
	uploadDateEnd: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: UploadDateEnd
	uploadDate: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: UploadDate
	userId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: UserId
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	executionTime: KnockoutObservable<number> = ko.observable(0); //System.Double: ExecutionTime
	showFilters: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: ShowFilters
	start: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: Start
	end: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: End
	filterId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: FilterId
	keyword: KnockoutObservable<string> = ko.observable(null); //System.String: Keyword
	sort: KnockoutObservable<string> = ko.observable(null); //System.String: Sort
	sortOrder: KnockoutObservable<string> = ko.observable(null); //System.String: SortOrder
	recordsPerPage: KnockoutObservable<number> = ko.observable(0); //System.Int32: RecordsPerPage
	pageCount: KnockoutObservable<number> = ko.observable(0); //System.Int32: PageCount
	recordCount: KnockoutObservable<number> = ko.observable(0); //System.Int32: RecordCount
	page: KnockoutObservable<number> = ko.observable(0); //System.Int32: Page
	export: KnockoutObservableArray<any> = ko.observableArray([]); //System.Byte[]: Export
	tenants: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.Guid]: Tenants
	columns: KnockoutObservableArray<filterColumn> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+FilterColumn]: Columns
	records: KnockoutObservableArray<any> = ko.observableArray([]); //System.Object[]: Records
	cultureCode: KnockoutObservable<string> = ko.observable(null); //System.String: CultureCode
	udf01: KnockoutObservable<string> = ko.observable(null); //System.String: udf01
	udf02: KnockoutObservable<string> = ko.observable(null); //System.String: udf02
	udf03: KnockoutObservable<string> = ko.observable(null); //System.String: udf03
	udf04: KnockoutObservable<string> = ko.observable(null); //System.String: udf04
	udf05: KnockoutObservable<string> = ko.observable(null); //System.String: udf05
	udf06: KnockoutObservable<string> = ko.observable(null); //System.String: udf06
	udf07: KnockoutObservable<string> = ko.observable(null); //System.String: udf07
	udf08: KnockoutObservable<string> = ko.observable(null); //System.String: udf08
	udf09: KnockoutObservable<string> = ko.observable(null); //System.String: udf09
	udf10: KnockoutObservable<string> = ko.observable(null); //System.String: udf10

	Load(data: server.filterFileStoragesAuto) {
		super.Load(data);
		if (data != null) {
			this.fileId(data.fileId);
			this.itemId(data.itemId);
			this.fileName(data.fileName);
			this.fileNameFilterExact(data.fileNameFilterExact);
			this.fileNameIncludeInKeyword(data.fileNameIncludeInKeyword);
			this.extension(data.extension);
			this.extensionFilterExact(data.extensionFilterExact);
			this.extensionIncludeInKeyword(data.extensionIncludeInKeyword);
			this.sourceFileId(data.sourceFileId);
			this.sourceFileIdFilterExact(data.sourceFileIdFilterExact);
			this.sourceFileIdIncludeInKeyword(data.sourceFileIdIncludeInKeyword);
			this.bytes(data.bytes);
			this.uploadDateStart(data.uploadDateStart);
			this.uploadDateEnd(data.uploadDateEnd);
			this.uploadDate(data.uploadDate);
			this.userId(data.userId);
			this.tenantId(data.tenantId);
			this.executionTime(data.executionTime);
			this.showFilters(data.showFilters);
			this.start(data.start);
			this.end(data.end);
			this.filterId(data.filterId);
			this.keyword(data.keyword);
			this.sort(data.sort);
			this.sortOrder(data.sortOrder);
			this.recordsPerPage(data.recordsPerPage);
			this.pageCount(data.pageCount);
			this.recordCount(data.recordCount);
			this.page(data.page);
			this.export(data.export);
			this.tenants(data.tenants);
			let __columns: filterColumn[] = [];
			if (data.columns != null) {
				data.columns.forEach((e: server.filterColumn) => {
					let item: filterColumn = new filterColumn();
					item.Load(e);
					__columns.push(item);
				});
			}
			this.columns(__columns);
			let __records: fileStorage[] = [];
			if (data.records != null) {
				data.records.forEach((e: server.fileStorage) => {
					let item: fileStorage = new fileStorage();
					item.Load(e);
					__records.push(item);
				});
			}
			this.records(__records);
			this.cultureCode(data.cultureCode);
			this.udf01(data.udf01);
			this.udf02(data.udf02);
			this.udf03(data.udf03);
			this.udf04(data.udf04);
			this.udf05(data.udf05);
			this.udf06(data.udf06);
			this.udf07(data.udf07);
			this.udf08(data.udf08);
			this.udf09(data.udf09);
			this.udf10(data.udf10);
		}
		else {
			this.fileId(null);
			this.itemId(null);
			this.fileName(null);
			this.fileNameFilterExact(false);
			this.fileNameIncludeInKeyword(false);
			this.extension(null);
			this.extensionFilterExact(false);
			this.extensionIncludeInKeyword(false);
			this.sourceFileId(null);
			this.sourceFileIdFilterExact(false);
			this.sourceFileIdIncludeInKeyword(false);
			this.bytes(null);
			this.uploadDateStart(null);
			this.uploadDateEnd(null);
			this.uploadDate(null);
			this.userId(null);
			this.tenantId(null);
			this.executionTime(0);
			this.showFilters(false);
			this.start(null);
			this.end(null);
			this.filterId(null);
			this.keyword(null);
			this.sort(null);
			this.sortOrder(null);
			this.recordsPerPage(0);
			this.pageCount(0);
			this.recordCount(0);
			this.page(0);
			this.export([]);
			this.tenants([]);
			this.columns([]);
			this.records([]);
			this.cultureCode(null);
			this.udf01(null);
			this.udf02(null);
			this.udf03(null);
			this.udf04(null);
			this.udf05(null);
			this.udf06(null);
			this.udf07(null);
			this.udf08(null);
			this.udf09(null);
			this.udf10(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+FilterSettingsAuto
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class filterSettingsAuto extends actionResponseObject { // SampleSinglePageApplication.DataObjects+FilterSettingsAuto
	settingId: KnockoutObservable<number> = ko.observable(null); //System.Nullable`1[System.Int32]: SettingId
	settingName: KnockoutObservable<string> = ko.observable(null); //System.String: SettingName
	settingNameFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: SettingNameFilterExact
	settingNameIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: SettingNameIncludeInKeyword
	settingType: KnockoutObservable<string> = ko.observable(null); //System.String: SettingType
	settingTypeFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: SettingTypeFilterExact
	settingTypeIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: SettingTypeIncludeInKeyword
	settingNotes: KnockoutObservable<string> = ko.observable(null); //System.String: SettingNotes
	settingNotesFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: SettingNotesFilterExact
	settingNotesIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: SettingNotesIncludeInKeyword
	settingText: KnockoutObservable<string> = ko.observable(null); //System.String: SettingText
	settingTextFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: SettingTextFilterExact
	settingTextIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: SettingTextIncludeInKeyword
	userId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: UserId
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	executionTime: KnockoutObservable<number> = ko.observable(0); //System.Double: ExecutionTime
	showFilters: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: ShowFilters
	start: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: Start
	end: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: End
	filterId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: FilterId
	keyword: KnockoutObservable<string> = ko.observable(null); //System.String: Keyword
	sort: KnockoutObservable<string> = ko.observable(null); //System.String: Sort
	sortOrder: KnockoutObservable<string> = ko.observable(null); //System.String: SortOrder
	recordsPerPage: KnockoutObservable<number> = ko.observable(0); //System.Int32: RecordsPerPage
	pageCount: KnockoutObservable<number> = ko.observable(0); //System.Int32: PageCount
	recordCount: KnockoutObservable<number> = ko.observable(0); //System.Int32: RecordCount
	page: KnockoutObservable<number> = ko.observable(0); //System.Int32: Page
	export: KnockoutObservableArray<any> = ko.observableArray([]); //System.Byte[]: Export
	tenants: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.Guid]: Tenants
	columns: KnockoutObservableArray<filterColumn> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+FilterColumn]: Columns
	records: KnockoutObservableArray<any> = ko.observableArray([]); //System.Object[]: Records
	cultureCode: KnockoutObservable<string> = ko.observable(null); //System.String: CultureCode
	udf01: KnockoutObservable<string> = ko.observable(null); //System.String: udf01
	udf02: KnockoutObservable<string> = ko.observable(null); //System.String: udf02
	udf03: KnockoutObservable<string> = ko.observable(null); //System.String: udf03
	udf04: KnockoutObservable<string> = ko.observable(null); //System.String: udf04
	udf05: KnockoutObservable<string> = ko.observable(null); //System.String: udf05
	udf06: KnockoutObservable<string> = ko.observable(null); //System.String: udf06
	udf07: KnockoutObservable<string> = ko.observable(null); //System.String: udf07
	udf08: KnockoutObservable<string> = ko.observable(null); //System.String: udf08
	udf09: KnockoutObservable<string> = ko.observable(null); //System.String: udf09
	udf10: KnockoutObservable<string> = ko.observable(null); //System.String: udf10

	Load(data: server.filterSettingsAuto) {
		super.Load(data);
		if (data != null) {
			this.settingId(data.settingId);
			this.settingName(data.settingName);
			this.settingNameFilterExact(data.settingNameFilterExact);
			this.settingNameIncludeInKeyword(data.settingNameIncludeInKeyword);
			this.settingType(data.settingType);
			this.settingTypeFilterExact(data.settingTypeFilterExact);
			this.settingTypeIncludeInKeyword(data.settingTypeIncludeInKeyword);
			this.settingNotes(data.settingNotes);
			this.settingNotesFilterExact(data.settingNotesFilterExact);
			this.settingNotesIncludeInKeyword(data.settingNotesIncludeInKeyword);
			this.settingText(data.settingText);
			this.settingTextFilterExact(data.settingTextFilterExact);
			this.settingTextIncludeInKeyword(data.settingTextIncludeInKeyword);
			this.userId(data.userId);
			this.tenantId(data.tenantId);
			this.executionTime(data.executionTime);
			this.showFilters(data.showFilters);
			this.start(data.start);
			this.end(data.end);
			this.filterId(data.filterId);
			this.keyword(data.keyword);
			this.sort(data.sort);
			this.sortOrder(data.sortOrder);
			this.recordsPerPage(data.recordsPerPage);
			this.pageCount(data.pageCount);
			this.recordCount(data.recordCount);
			this.page(data.page);
			this.export(data.export);
			this.tenants(data.tenants);
			let __columns: filterColumn[] = [];
			if (data.columns != null) {
				data.columns.forEach((e: server.filterColumn) => {
					let item: filterColumn = new filterColumn();
					item.Load(e);
					__columns.push(item);
				});
			}
			this.columns(__columns);
			let __records: setting[] = [];
			if (data.records != null) {
				data.records.forEach((e: server.setting) => {
					let item: setting = new setting();
					item.Load(e);
					__records.push(item);
				});
			}
			this.records(__records);
			this.cultureCode(data.cultureCode);
			this.udf01(data.udf01);
			this.udf02(data.udf02);
			this.udf03(data.udf03);
			this.udf04(data.udf04);
			this.udf05(data.udf05);
			this.udf06(data.udf06);
			this.udf07(data.udf07);
			this.udf08(data.udf08);
			this.udf09(data.udf09);
			this.udf10(data.udf10);
		}
		else {
			this.settingId(null);
			this.settingName(null);
			this.settingNameFilterExact(false);
			this.settingNameIncludeInKeyword(false);
			this.settingType(null);
			this.settingTypeFilterExact(false);
			this.settingTypeIncludeInKeyword(false);
			this.settingNotes(null);
			this.settingNotesFilterExact(false);
			this.settingNotesIncludeInKeyword(false);
			this.settingText(null);
			this.settingTextFilterExact(false);
			this.settingTextIncludeInKeyword(false);
			this.userId(null);
			this.tenantId(null);
			this.executionTime(0);
			this.showFilters(false);
			this.start(null);
			this.end(null);
			this.filterId(null);
			this.keyword(null);
			this.sort(null);
			this.sortOrder(null);
			this.recordsPerPage(0);
			this.pageCount(0);
			this.recordCount(0);
			this.page(0);
			this.export([]);
			this.tenants([]);
			this.columns([]);
			this.records([]);
			this.cultureCode(null);
			this.udf01(null);
			this.udf02(null);
			this.udf03(null);
			this.udf04(null);
			this.udf05(null);
			this.udf06(null);
			this.udf07(null);
			this.udf08(null);
			this.udf09(null);
			this.udf10(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+FilterTenantsAuto
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class filterTenantsAuto extends actionResponseObject { // SampleSinglePageApplication.DataObjects+FilterTenantsAuto
	name: KnockoutObservable<string> = ko.observable(null); //System.String: Name
	nameFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: NameFilterExact
	nameIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: NameIncludeInKeyword
	tenantCode: KnockoutObservable<string> = ko.observable(null); //System.String: TenantCode
	tenantCodeFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: TenantCodeFilterExact
	tenantCodeIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: TenantCodeIncludeInKeyword
	enabled: KnockoutObservable<string> = ko.observable(""); //System.Nullable`1[System.Boolean]: Enabled
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	executionTime: KnockoutObservable<number> = ko.observable(0); //System.Double: ExecutionTime
	showFilters: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: ShowFilters
	start: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: Start
	end: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: End
	filterId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: FilterId
	keyword: KnockoutObservable<string> = ko.observable(null); //System.String: Keyword
	sort: KnockoutObservable<string> = ko.observable(null); //System.String: Sort
	sortOrder: KnockoutObservable<string> = ko.observable(null); //System.String: SortOrder
	recordsPerPage: KnockoutObservable<number> = ko.observable(0); //System.Int32: RecordsPerPage
	pageCount: KnockoutObservable<number> = ko.observable(0); //System.Int32: PageCount
	recordCount: KnockoutObservable<number> = ko.observable(0); //System.Int32: RecordCount
	page: KnockoutObservable<number> = ko.observable(0); //System.Int32: Page
	export: KnockoutObservableArray<any> = ko.observableArray([]); //System.Byte[]: Export
	tenants: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.Guid]: Tenants
	columns: KnockoutObservableArray<filterColumn> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+FilterColumn]: Columns
	records: KnockoutObservableArray<any> = ko.observableArray([]); //System.Object[]: Records
	cultureCode: KnockoutObservable<string> = ko.observable(null); //System.String: CultureCode
	udf01: KnockoutObservable<string> = ko.observable(null); //System.String: udf01
	udf02: KnockoutObservable<string> = ko.observable(null); //System.String: udf02
	udf03: KnockoutObservable<string> = ko.observable(null); //System.String: udf03
	udf04: KnockoutObservable<string> = ko.observable(null); //System.String: udf04
	udf05: KnockoutObservable<string> = ko.observable(null); //System.String: udf05
	udf06: KnockoutObservable<string> = ko.observable(null); //System.String: udf06
	udf07: KnockoutObservable<string> = ko.observable(null); //System.String: udf07
	udf08: KnockoutObservable<string> = ko.observable(null); //System.String: udf08
	udf09: KnockoutObservable<string> = ko.observable(null); //System.String: udf09
	udf10: KnockoutObservable<string> = ko.observable(null); //System.String: udf10

	Load(data: server.filterTenantsAuto) {
		super.Load(data);
		if (data != null) {
			this.name(data.name);
			this.nameFilterExact(data.nameFilterExact);
			this.nameIncludeInKeyword(data.nameIncludeInKeyword);
			this.tenantCode(data.tenantCode);
			this.tenantCodeFilterExact(data.tenantCodeFilterExact);
			this.tenantCodeIncludeInKeyword(data.tenantCodeIncludeInKeyword);
			this.enabled(autoUtility.ConvertBooleanToString(data.enabled));
			this.tenantId(data.tenantId);
			this.executionTime(data.executionTime);
			this.showFilters(data.showFilters);
			this.start(data.start);
			this.end(data.end);
			this.filterId(data.filterId);
			this.keyword(data.keyword);
			this.sort(data.sort);
			this.sortOrder(data.sortOrder);
			this.recordsPerPage(data.recordsPerPage);
			this.pageCount(data.pageCount);
			this.recordCount(data.recordCount);
			this.page(data.page);
			this.export(data.export);
			this.tenants(data.tenants);
			let __columns: filterColumn[] = [];
			if (data.columns != null) {
				data.columns.forEach((e: server.filterColumn) => {
					let item: filterColumn = new filterColumn();
					item.Load(e);
					__columns.push(item);
				});
			}
			this.columns(__columns);
			let __records: tenant[] = [];
			if (data.records != null) {
				data.records.forEach((e: server.tenant) => {
					let item: tenant = new tenant();
					item.Load(e);
					__records.push(item);
				});
			}
			this.records(__records);
			this.cultureCode(data.cultureCode);
			this.udf01(data.udf01);
			this.udf02(data.udf02);
			this.udf03(data.udf03);
			this.udf04(data.udf04);
			this.udf05(data.udf05);
			this.udf06(data.udf06);
			this.udf07(data.udf07);
			this.udf08(data.udf08);
			this.udf09(data.udf09);
			this.udf10(data.udf10);
		}
		else {
			this.name(null);
			this.nameFilterExact(false);
			this.nameIncludeInKeyword(false);
			this.tenantCode(null);
			this.tenantCodeFilterExact(false);
			this.tenantCodeIncludeInKeyword(false);
			this.enabled(null);
			this.tenantId(null);
			this.executionTime(0);
			this.showFilters(false);
			this.start(null);
			this.end(null);
			this.filterId(null);
			this.keyword(null);
			this.sort(null);
			this.sortOrder(null);
			this.recordsPerPage(0);
			this.pageCount(0);
			this.recordCount(0);
			this.page(0);
			this.export([]);
			this.tenants([]);
			this.columns([]);
			this.records([]);
			this.cultureCode(null);
			this.udf01(null);
			this.udf02(null);
			this.udf03(null);
			this.udf04(null);
			this.udf05(null);
			this.udf06(null);
			this.udf07(null);
			this.udf08(null);
			this.udf09(null);
			this.udf10(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+FilterUserGroupsAuto
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class filterUserGroupsAuto extends actionResponseObject { // SampleSinglePageApplication.DataObjects+FilterUserGroupsAuto
	groupId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: GroupId
	name: KnockoutObservable<string> = ko.observable(null); //System.String: Name
	nameFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: NameFilterExact
	nameIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: NameIncludeInKeyword
	enabled: KnockoutObservable<string> = ko.observable(""); //System.Nullable`1[System.Boolean]: Enabled
	settings: KnockoutObservable<userGroupSettings> = ko.observable(new userGroupSettings); //SampleSinglePageApplication.DataObjects+UserGroupSettings: Settings
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	executionTime: KnockoutObservable<number> = ko.observable(0); //System.Double: ExecutionTime
	showFilters: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: ShowFilters
	start: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: Start
	end: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: End
	filterId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: FilterId
	keyword: KnockoutObservable<string> = ko.observable(null); //System.String: Keyword
	sort: KnockoutObservable<string> = ko.observable(null); //System.String: Sort
	sortOrder: KnockoutObservable<string> = ko.observable(null); //System.String: SortOrder
	recordsPerPage: KnockoutObservable<number> = ko.observable(0); //System.Int32: RecordsPerPage
	pageCount: KnockoutObservable<number> = ko.observable(0); //System.Int32: PageCount
	recordCount: KnockoutObservable<number> = ko.observable(0); //System.Int32: RecordCount
	page: KnockoutObservable<number> = ko.observable(0); //System.Int32: Page
	export: KnockoutObservableArray<any> = ko.observableArray([]); //System.Byte[]: Export
	tenants: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.Guid]: Tenants
	columns: KnockoutObservableArray<filterColumn> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+FilterColumn]: Columns
	records: KnockoutObservableArray<any> = ko.observableArray([]); //System.Object[]: Records
	cultureCode: KnockoutObservable<string> = ko.observable(null); //System.String: CultureCode
	udf01: KnockoutObservable<string> = ko.observable(null); //System.String: udf01
	udf02: KnockoutObservable<string> = ko.observable(null); //System.String: udf02
	udf03: KnockoutObservable<string> = ko.observable(null); //System.String: udf03
	udf04: KnockoutObservable<string> = ko.observable(null); //System.String: udf04
	udf05: KnockoutObservable<string> = ko.observable(null); //System.String: udf05
	udf06: KnockoutObservable<string> = ko.observable(null); //System.String: udf06
	udf07: KnockoutObservable<string> = ko.observable(null); //System.String: udf07
	udf08: KnockoutObservable<string> = ko.observable(null); //System.String: udf08
	udf09: KnockoutObservable<string> = ko.observable(null); //System.String: udf09
	udf10: KnockoutObservable<string> = ko.observable(null); //System.String: udf10

	Load(data: server.filterUserGroupsAuto) {
		super.Load(data);
		if (data != null) {
			this.groupId(data.groupId);
			this.name(data.name);
			this.nameFilterExact(data.nameFilterExact);
			this.nameIncludeInKeyword(data.nameIncludeInKeyword);
			this.enabled(autoUtility.ConvertBooleanToString(data.enabled));
			this.settings().Load(data.settings);
			this.tenantId(data.tenantId);
			this.executionTime(data.executionTime);
			this.showFilters(data.showFilters);
			this.start(data.start);
			this.end(data.end);
			this.filterId(data.filterId);
			this.keyword(data.keyword);
			this.sort(data.sort);
			this.sortOrder(data.sortOrder);
			this.recordsPerPage(data.recordsPerPage);
			this.pageCount(data.pageCount);
			this.recordCount(data.recordCount);
			this.page(data.page);
			this.export(data.export);
			this.tenants(data.tenants);
			let __columns: filterColumn[] = [];
			if (data.columns != null) {
				data.columns.forEach((e: server.filterColumn) => {
					let item: filterColumn = new filterColumn();
					item.Load(e);
					__columns.push(item);
				});
			}
			this.columns(__columns);
			let __records: userGroup[] = [];
			if (data.records != null) {
				data.records.forEach((e: server.userGroup) => {
					let item: userGroup = new userGroup();
					item.Load(e);
					__records.push(item);
				});
			}
			this.records(__records);
			this.cultureCode(data.cultureCode);
			this.udf01(data.udf01);
			this.udf02(data.udf02);
			this.udf03(data.udf03);
			this.udf04(data.udf04);
			this.udf05(data.udf05);
			this.udf06(data.udf06);
			this.udf07(data.udf07);
			this.udf08(data.udf08);
			this.udf09(data.udf09);
			this.udf10(data.udf10);
		}
		else {
			this.groupId(null);
			this.name(null);
			this.nameFilterExact(false);
			this.nameIncludeInKeyword(false);
			this.enabled(null);
			this.settings(new userGroupSettings);
			this.tenantId(null);
			this.executionTime(0);
			this.showFilters(false);
			this.start(null);
			this.end(null);
			this.filterId(null);
			this.keyword(null);
			this.sort(null);
			this.sortOrder(null);
			this.recordsPerPage(0);
			this.pageCount(0);
			this.recordCount(0);
			this.page(0);
			this.export([]);
			this.tenants([]);
			this.columns([]);
			this.records([]);
			this.cultureCode(null);
			this.udf01(null);
			this.udf02(null);
			this.udf03(null);
			this.udf04(null);
			this.udf05(null);
			this.udf06(null);
			this.udf07(null);
			this.udf08(null);
			this.udf09(null);
			this.udf10(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+FilterUsers
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class filterUsers extends actionResponseObject { // SampleSinglePageApplication.DataObjects+FilterUsers
	loading: KnockoutObservable<string> = ko.observable(null); //System.String: Loading
	filterDepartments: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.Guid]: FilterDepartments
	enabled: KnockoutObservable<string> = ko.observable(null); //System.String: Enabled
	admin: KnockoutObservable<string> = ko.observable(null); //System.String: Admin
	udf01: KnockoutObservable<string> = ko.observable(null); //System.String: udf01
	udf02: KnockoutObservable<string> = ko.observable(null); //System.String: udf02
	udf03: KnockoutObservable<string> = ko.observable(null); //System.String: udf03
	udf04: KnockoutObservable<string> = ko.observable(null); //System.String: udf04
	udf05: KnockoutObservable<string> = ko.observable(null); //System.String: udf05
	udf06: KnockoutObservable<string> = ko.observable(null); //System.String: udf06
	udf07: KnockoutObservable<string> = ko.observable(null); //System.String: udf07
	udf08: KnockoutObservable<string> = ko.observable(null); //System.String: udf08
	udf09: KnockoutObservable<string> = ko.observable(null); //System.String: udf09
	udf10: KnockoutObservable<string> = ko.observable(null); //System.String: udf10
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	executionTime: KnockoutObservable<number> = ko.observable(0); //System.Double: ExecutionTime
	showFilters: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: ShowFilters
	start: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: Start
	end: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: End
	filterId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: FilterId
	keyword: KnockoutObservable<string> = ko.observable(null); //System.String: Keyword
	sort: KnockoutObservable<string> = ko.observable(null); //System.String: Sort
	sortOrder: KnockoutObservable<string> = ko.observable(null); //System.String: SortOrder
	recordsPerPage: KnockoutObservable<number> = ko.observable(0); //System.Int32: RecordsPerPage
	pageCount: KnockoutObservable<number> = ko.observable(0); //System.Int32: PageCount
	recordCount: KnockoutObservable<number> = ko.observable(0); //System.Int32: RecordCount
	page: KnockoutObservable<number> = ko.observable(0); //System.Int32: Page
	export: KnockoutObservableArray<any> = ko.observableArray([]); //System.Byte[]: Export
	tenants: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.Guid]: Tenants
	columns: KnockoutObservableArray<filterColumn> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+FilterColumn]: Columns
	records: KnockoutObservableArray<any> = ko.observableArray([]); //System.Object[]: Records
	cultureCode: KnockoutObservable<string> = ko.observable(null); //System.String: CultureCode

	Load(data: server.filterUsers) {
		super.Load(data);
		if (data != null) {
			this.loading(data.loading);
			this.filterDepartments(data.filterDepartments);
			this.enabled(data.enabled);
			this.admin(data.admin);
			this.udf01(data.udf01);
			this.udf02(data.udf02);
			this.udf03(data.udf03);
			this.udf04(data.udf04);
			this.udf05(data.udf05);
			this.udf06(data.udf06);
			this.udf07(data.udf07);
			this.udf08(data.udf08);
			this.udf09(data.udf09);
			this.udf10(data.udf10);
			this.tenantId(data.tenantId);
			this.executionTime(data.executionTime);
			this.showFilters(data.showFilters);
			this.start(data.start);
			this.end(data.end);
			this.filterId(data.filterId);
			this.keyword(data.keyword);
			this.sort(data.sort);
			this.sortOrder(data.sortOrder);
			this.recordsPerPage(data.recordsPerPage);
			this.pageCount(data.pageCount);
			this.recordCount(data.recordCount);
			this.page(data.page);
			this.export(data.export);
			this.tenants(data.tenants);
			let __columns: filterColumn[] = [];
			if (data.columns != null) {
				data.columns.forEach((e: server.filterColumn) => {
					let item: filterColumn = new filterColumn();
					item.Load(e);
					__columns.push(item);
				});
			}
			this.columns(__columns);
			this.records(data.records);
			this.cultureCode(data.cultureCode);
		}
		else {
			this.loading(null);
			this.filterDepartments([]);
			this.enabled(null);
			this.admin(null);
			this.udf01(null);
			this.udf02(null);
			this.udf03(null);
			this.udf04(null);
			this.udf05(null);
			this.udf06(null);
			this.udf07(null);
			this.udf08(null);
			this.udf09(null);
			this.udf10(null);
			this.tenantId(null);
			this.executionTime(0);
			this.showFilters(false);
			this.start(null);
			this.end(null);
			this.filterId(null);
			this.keyword(null);
			this.sort(null);
			this.sortOrder(null);
			this.recordsPerPage(0);
			this.pageCount(0);
			this.recordCount(0);
			this.page(0);
			this.export([]);
			this.tenants([]);
			this.columns([]);
			this.records([]);
			this.cultureCode(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+FilterUsersAuto
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class filterUsersAuto extends actionResponseObject { // SampleSinglePageApplication.DataObjects+FilterUsersAuto
	userId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: UserId
	firstName: KnockoutObservable<string> = ko.observable(null); //System.String: FirstName
	firstNameFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: FirstNameFilterExact
	firstNameIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: FirstNameIncludeInKeyword
	lastName: KnockoutObservable<string> = ko.observable(null); //System.String: LastName
	lastNameFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: LastNameFilterExact
	lastNameIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: LastNameIncludeInKeyword
	email: KnockoutObservable<string> = ko.observable(null); //System.String: Email
	emailFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: EmailFilterExact
	emailIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: EmailIncludeInKeyword
	phone: KnockoutObservable<string> = ko.observable(null); //System.String: Phone
	phoneFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: PhoneFilterExact
	phoneIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: PhoneIncludeInKeyword
	username: KnockoutObservable<string> = ko.observable(null); //System.String: Username
	usernameFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: UsernameFilterExact
	usernameIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: UsernameIncludeInKeyword
	employeeId: KnockoutObservable<string> = ko.observable(null); //System.String: EmployeeId
	employeeIdFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: EmployeeIdFilterExact
	employeeIdIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: EmployeeIdIncludeInKeyword
	departmentId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: DepartmentId
	title: KnockoutObservable<string> = ko.observable(null); //System.String: Title
	titleFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: TitleFilterExact
	titleIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: TitleIncludeInKeyword
	location: KnockoutObservable<string> = ko.observable(null); //System.String: Location
	locationFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: LocationFilterExact
	locationIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: LocationIncludeInKeyword
	enabled: KnockoutObservable<string> = ko.observable(""); //System.Nullable`1[System.Boolean]: Enabled
	lastLoginStart: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: LastLoginStart
	lastLoginEnd: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: LastLoginEnd
	lastLogin: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: LastLogin
	admin: KnockoutObservable<string> = ko.observable(""); //System.Nullable`1[System.Boolean]: Admin
	password: KnockoutObservable<string> = ko.observable(null); //System.String: Password
	passwordFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: PasswordFilterExact
	passwordIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: PasswordIncludeInKeyword
	preventPasswordChange: KnockoutObservable<string> = ko.observable(""); //System.Nullable`1[System.Boolean]: PreventPasswordChange
	failedLoginAttempts: KnockoutObservable<number> = ko.observable(null); //System.Nullable`1[System.Int32]: FailedLoginAttempts
	lastLockoutDateStart: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: LastLockoutDateStart
	lastLockoutDateEnd: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: LastLockoutDateEnd
	lastLockoutDate: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: LastLockoutDate
	source: KnockoutObservable<string> = ko.observable(null); //System.String: Source
	sourceFilterExact: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: SourceFilterExact
	sourceIncludeInKeyword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: SourceIncludeInKeyword
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	executionTime: KnockoutObservable<number> = ko.observable(0); //System.Double: ExecutionTime
	showFilters: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: ShowFilters
	start: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: Start
	end: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: End
	filterId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: FilterId
	keyword: KnockoutObservable<string> = ko.observable(null); //System.String: Keyword
	sort: KnockoutObservable<string> = ko.observable(null); //System.String: Sort
	sortOrder: KnockoutObservable<string> = ko.observable(null); //System.String: SortOrder
	recordsPerPage: KnockoutObservable<number> = ko.observable(0); //System.Int32: RecordsPerPage
	pageCount: KnockoutObservable<number> = ko.observable(0); //System.Int32: PageCount
	recordCount: KnockoutObservable<number> = ko.observable(0); //System.Int32: RecordCount
	page: KnockoutObservable<number> = ko.observable(0); //System.Int32: Page
	export: KnockoutObservableArray<any> = ko.observableArray([]); //System.Byte[]: Export
	tenants: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.Guid]: Tenants
	columns: KnockoutObservableArray<filterColumn> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+FilterColumn]: Columns
	records: KnockoutObservableArray<any> = ko.observableArray([]); //System.Object[]: Records
	cultureCode: KnockoutObservable<string> = ko.observable(null); //System.String: CultureCode
	udf01: KnockoutObservable<string> = ko.observable(null); //System.String: udf01
	udf02: KnockoutObservable<string> = ko.observable(null); //System.String: udf02
	udf03: KnockoutObservable<string> = ko.observable(null); //System.String: udf03
	udf04: KnockoutObservable<string> = ko.observable(null); //System.String: udf04
	udf05: KnockoutObservable<string> = ko.observable(null); //System.String: udf05
	udf06: KnockoutObservable<string> = ko.observable(null); //System.String: udf06
	udf07: KnockoutObservable<string> = ko.observable(null); //System.String: udf07
	udf08: KnockoutObservable<string> = ko.observable(null); //System.String: udf08
	udf09: KnockoutObservable<string> = ko.observable(null); //System.String: udf09
	udf10: KnockoutObservable<string> = ko.observable(null); //System.String: udf10

	Load(data: server.filterUsersAuto) {
		super.Load(data);
		if (data != null) {
			this.userId(data.userId);
			this.firstName(data.firstName);
			this.firstNameFilterExact(data.firstNameFilterExact);
			this.firstNameIncludeInKeyword(data.firstNameIncludeInKeyword);
			this.lastName(data.lastName);
			this.lastNameFilterExact(data.lastNameFilterExact);
			this.lastNameIncludeInKeyword(data.lastNameIncludeInKeyword);
			this.email(data.email);
			this.emailFilterExact(data.emailFilterExact);
			this.emailIncludeInKeyword(data.emailIncludeInKeyword);
			this.phone(data.phone);
			this.phoneFilterExact(data.phoneFilterExact);
			this.phoneIncludeInKeyword(data.phoneIncludeInKeyword);
			this.username(data.username);
			this.usernameFilterExact(data.usernameFilterExact);
			this.usernameIncludeInKeyword(data.usernameIncludeInKeyword);
			this.employeeId(data.employeeId);
			this.employeeIdFilterExact(data.employeeIdFilterExact);
			this.employeeIdIncludeInKeyword(data.employeeIdIncludeInKeyword);
			this.departmentId(data.departmentId);
			this.title(data.title);
			this.titleFilterExact(data.titleFilterExact);
			this.titleIncludeInKeyword(data.titleIncludeInKeyword);
			this.location(data.location);
			this.locationFilterExact(data.locationFilterExact);
			this.locationIncludeInKeyword(data.locationIncludeInKeyword);
			this.enabled(autoUtility.ConvertBooleanToString(data.enabled));
			this.lastLoginStart(data.lastLoginStart);
			this.lastLoginEnd(data.lastLoginEnd);
			this.lastLogin(data.lastLogin);
			this.admin(autoUtility.ConvertBooleanToString(data.admin));
			this.password(data.password);
			this.passwordFilterExact(data.passwordFilterExact);
			this.passwordIncludeInKeyword(data.passwordIncludeInKeyword);
			this.preventPasswordChange(autoUtility.ConvertBooleanToString(data.preventPasswordChange));
			this.failedLoginAttempts(data.failedLoginAttempts);
			this.lastLockoutDateStart(data.lastLockoutDateStart);
			this.lastLockoutDateEnd(data.lastLockoutDateEnd);
			this.lastLockoutDate(data.lastLockoutDate);
			this.source(data.source);
			this.sourceFilterExact(data.sourceFilterExact);
			this.sourceIncludeInKeyword(data.sourceIncludeInKeyword);
			this.tenantId(data.tenantId);
			this.executionTime(data.executionTime);
			this.showFilters(data.showFilters);
			this.start(data.start);
			this.end(data.end);
			this.filterId(data.filterId);
			this.keyword(data.keyword);
			this.sort(data.sort);
			this.sortOrder(data.sortOrder);
			this.recordsPerPage(data.recordsPerPage);
			this.pageCount(data.pageCount);
			this.recordCount(data.recordCount);
			this.page(data.page);
			this.export(data.export);
			this.tenants(data.tenants);
			let __columns: filterColumn[] = [];
			if (data.columns != null) {
				data.columns.forEach((e: server.filterColumn) => {
					let item: filterColumn = new filterColumn();
					item.Load(e);
					__columns.push(item);
				});
			}
			this.columns(__columns);
			let __records: user[] = [];
			if (data.records != null) {
				data.records.forEach((e: server.user) => {
					let item: user = new user();
					item.Load(e);
					__records.push(item);
				});
			}
			this.records(__records);
			this.cultureCode(data.cultureCode);
			this.udf01(data.udf01);
			this.udf02(data.udf02);
			this.udf03(data.udf03);
			this.udf04(data.udf04);
			this.udf05(data.udf05);
			this.udf06(data.udf06);
			this.udf07(data.udf07);
			this.udf08(data.udf08);
			this.udf09(data.udf09);
			this.udf10(data.udf10);
		}
		else {
			this.userId(null);
			this.firstName(null);
			this.firstNameFilterExact(false);
			this.firstNameIncludeInKeyword(false);
			this.lastName(null);
			this.lastNameFilterExact(false);
			this.lastNameIncludeInKeyword(false);
			this.email(null);
			this.emailFilterExact(false);
			this.emailIncludeInKeyword(false);
			this.phone(null);
			this.phoneFilterExact(false);
			this.phoneIncludeInKeyword(false);
			this.username(null);
			this.usernameFilterExact(false);
			this.usernameIncludeInKeyword(false);
			this.employeeId(null);
			this.employeeIdFilterExact(false);
			this.employeeIdIncludeInKeyword(false);
			this.departmentId(null);
			this.title(null);
			this.titleFilterExact(false);
			this.titleIncludeInKeyword(false);
			this.location(null);
			this.locationFilterExact(false);
			this.locationIncludeInKeyword(false);
			this.enabled(null);
			this.lastLoginStart(null);
			this.lastLoginEnd(null);
			this.lastLogin(null);
			this.admin(null);
			this.password(null);
			this.passwordFilterExact(false);
			this.passwordIncludeInKeyword(false);
			this.preventPasswordChange(null);
			this.failedLoginAttempts(null);
			this.lastLockoutDateStart(null);
			this.lastLockoutDateEnd(null);
			this.lastLockoutDate(null);
			this.source(null);
			this.sourceFilterExact(false);
			this.sourceIncludeInKeyword(false);
			this.tenantId(null);
			this.executionTime(0);
			this.showFilters(false);
			this.start(null);
			this.end(null);
			this.filterId(null);
			this.keyword(null);
			this.sort(null);
			this.sortOrder(null);
			this.recordsPerPage(0);
			this.pageCount(0);
			this.recordCount(0);
			this.page(0);
			this.export([]);
			this.tenants([]);
			this.columns([]);
			this.records([]);
			this.cultureCode(null);
			this.udf01(null);
			this.udf02(null);
			this.udf03(null);
			this.udf04(null);
			this.udf05(null);
			this.udf06(null);
			this.udf07(null);
			this.udf08(null);
			this.udf09(null);
			this.udf10(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+Language
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class language { // SampleSinglePageApplication.DataObjects+Language
	culture: KnockoutObservable<string> = ko.observable(null); //System.String: Culture
	phrases: KnockoutObservableArray<optionPair> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+OptionPair]: Phrases

	Load(data: server.language) {
		if (data != null) {
			this.culture(data.culture);
			let __phrases: optionPair[] = [];
			if (data.phrases != null) {
				data.phrases.forEach((e: server.optionPair) => {
					let item: optionPair = new optionPair();
					item.Load(e);
					__phrases.push(item);
				});
			}
			this.phrases(__phrases);
		}
		else {
			this.culture(null);
			this.phrases([]);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+ListItem
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class listItem extends actionResponseObject { // SampleSinglePageApplication.DataObjects+ListItem
	id: KnockoutObservable<string> = ko.observable(null); //System.Guid: Id
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	type: KnockoutObservable<string> = ko.observable(null); //System.String: Type
	name: KnockoutObservable<string> = ko.observable(null); //System.String: Name
	sortOrder: KnockoutObservable<number> = ko.observable(0); //System.Int32: SortOrder
	enabled: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: Enabled

	Load(data: server.listItem) {
		super.Load(data);
		if (data != null) {
			this.id(data.id);
			this.tenantId(data.tenantId);
			this.type(data.type);
			this.name(data.name);
			this.sortOrder(data.sortOrder);
			this.enabled(data.enabled);
		}
		else {
			this.id(null);
			this.tenantId(null);
			this.type(null);
			this.name(null);
			this.sortOrder(0);
			this.enabled(false);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+MailServerConfig
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class mailServerConfig { // SampleSinglePageApplication.DataObjects+MailServerConfig
	server: KnockoutObservable<string> = ko.observable(null); //System.String: Server
	port: KnockoutObservable<number> = ko.observable(0); //System.Int32: Port
	useSSL: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: UseSSL
	username: KnockoutObservable<string> = ko.observable(null); //System.String: Username
	password: KnockoutObservable<string> = ko.observable(null); //System.String: Password

	Load(data: server.mailServerConfig) {
		if (data != null) {
			this.server(data.server);
			this.port(data.port);
			this.useSSL(data.useSSL);
			this.username(data.username);
			this.password(data.password);
		}
		else {
			this.server(null);
			this.port(0);
			this.useSSL(false);
			this.username(null);
			this.password(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+OptionPair
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class optionPair { // SampleSinglePageApplication.DataObjects+OptionPair
	id: KnockoutObservable<string> = ko.observable(null); //System.String: Id
	value: KnockoutObservable<string> = ko.observable(null); //System.String: Value

	Load(data: server.optionPair) {
		if (data != null) {
			this.id(data.id);
			this.value(data.value);
		}
		else {
			this.id(null);
			this.value(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+SavedFilterDepartmentGroupsAuto
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class savedFilterDepartmentGroupsAuto extends actionResponseObject { // SampleSinglePageApplication.DataObjects+SavedFilterDepartmentGroupsAuto
	description: KnockoutObservable<string> = ko.observable(null); //System.String: Description
	filter: KnockoutObservable<filterDepartmentGroupsAuto> = ko.observable(new filterDepartmentGroupsAuto); //SampleSinglePageApplication.DataObjects+FilterDepartmentGroupsAuto: Filter
	savedFilterId: KnockoutObservable<string> = ko.observable(null); //System.Guid: SavedFilterId
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	userId: KnockoutObservable<string> = ko.observable(null); //System.Guid: UserId

	Load(data: server.savedFilterDepartmentGroupsAuto) {
		super.Load(data);
		if (data != null) {
			this.description(data.description);
			this.filter().Load(data.filter);
			this.savedFilterId(data.savedFilterId);
			this.tenantId(data.tenantId);
			this.userId(data.userId);
		}
		else {
			this.description(null);
			this.filter(new filterDepartmentGroupsAuto);
			this.savedFilterId(null);
			this.tenantId(null);
			this.userId(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+SavedFilterDepartmentsAuto
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class savedFilterDepartmentsAuto extends actionResponseObject { // SampleSinglePageApplication.DataObjects+SavedFilterDepartmentsAuto
	description: KnockoutObservable<string> = ko.observable(null); //System.String: Description
	filter: KnockoutObservable<filterDepartmentsAuto> = ko.observable(new filterDepartmentsAuto); //SampleSinglePageApplication.DataObjects+FilterDepartmentsAuto: Filter
	savedFilterId: KnockoutObservable<string> = ko.observable(null); //System.Guid: SavedFilterId
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	userId: KnockoutObservable<string> = ko.observable(null); //System.Guid: UserId

	Load(data: server.savedFilterDepartmentsAuto) {
		super.Load(data);
		if (data != null) {
			this.description(data.description);
			this.filter().Load(data.filter);
			this.savedFilterId(data.savedFilterId);
			this.tenantId(data.tenantId);
			this.userId(data.userId);
		}
		else {
			this.description(null);
			this.filter(new filterDepartmentsAuto);
			this.savedFilterId(null);
			this.tenantId(null);
			this.userId(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+SavedFilterFileStoragesAuto
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class savedFilterFileStoragesAuto extends actionResponseObject { // SampleSinglePageApplication.DataObjects+SavedFilterFileStoragesAuto
	description: KnockoutObservable<string> = ko.observable(null); //System.String: Description
	filter: KnockoutObservable<filterFileStoragesAuto> = ko.observable(new filterFileStoragesAuto); //SampleSinglePageApplication.DataObjects+FilterFileStoragesAuto: Filter
	savedFilterId: KnockoutObservable<string> = ko.observable(null); //System.Guid: SavedFilterId
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	userId: KnockoutObservable<string> = ko.observable(null); //System.Guid: UserId

	Load(data: server.savedFilterFileStoragesAuto) {
		super.Load(data);
		if (data != null) {
			this.description(data.description);
			this.filter().Load(data.filter);
			this.savedFilterId(data.savedFilterId);
			this.tenantId(data.tenantId);
			this.userId(data.userId);
		}
		else {
			this.description(null);
			this.filter(new filterFileStoragesAuto);
			this.savedFilterId(null);
			this.tenantId(null);
			this.userId(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+SavedFilterSettingsAuto
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class savedFilterSettingsAuto extends actionResponseObject { // SampleSinglePageApplication.DataObjects+SavedFilterSettingsAuto
	description: KnockoutObservable<string> = ko.observable(null); //System.String: Description
	filter: KnockoutObservable<filterSettingsAuto> = ko.observable(new filterSettingsAuto); //SampleSinglePageApplication.DataObjects+FilterSettingsAuto: Filter
	savedFilterId: KnockoutObservable<string> = ko.observable(null); //System.Guid: SavedFilterId
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	userId: KnockoutObservable<string> = ko.observable(null); //System.Guid: UserId

	Load(data: server.savedFilterSettingsAuto) {
		super.Load(data);
		if (data != null) {
			this.description(data.description);
			this.filter().Load(data.filter);
			this.savedFilterId(data.savedFilterId);
			this.tenantId(data.tenantId);
			this.userId(data.userId);
		}
		else {
			this.description(null);
			this.filter(new filterSettingsAuto);
			this.savedFilterId(null);
			this.tenantId(null);
			this.userId(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+SavedFilterTenantsAuto
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class savedFilterTenantsAuto extends actionResponseObject { // SampleSinglePageApplication.DataObjects+SavedFilterTenantsAuto
	description: KnockoutObservable<string> = ko.observable(null); //System.String: Description
	filter: KnockoutObservable<filterTenantsAuto> = ko.observable(new filterTenantsAuto); //SampleSinglePageApplication.DataObjects+FilterTenantsAuto: Filter
	savedFilterId: KnockoutObservable<string> = ko.observable(null); //System.Guid: SavedFilterId
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	userId: KnockoutObservable<string> = ko.observable(null); //System.Guid: UserId

	Load(data: server.savedFilterTenantsAuto) {
		super.Load(data);
		if (data != null) {
			this.description(data.description);
			this.filter().Load(data.filter);
			this.savedFilterId(data.savedFilterId);
			this.tenantId(data.tenantId);
			this.userId(data.userId);
		}
		else {
			this.description(null);
			this.filter(new filterTenantsAuto);
			this.savedFilterId(null);
			this.tenantId(null);
			this.userId(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+SavedFilterUserGroupsAuto
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class savedFilterUserGroupsAuto extends actionResponseObject { // SampleSinglePageApplication.DataObjects+SavedFilterUserGroupsAuto
	description: KnockoutObservable<string> = ko.observable(null); //System.String: Description
	filter: KnockoutObservable<filterUserGroupsAuto> = ko.observable(new filterUserGroupsAuto); //SampleSinglePageApplication.DataObjects+FilterUserGroupsAuto: Filter
	savedFilterId: KnockoutObservable<string> = ko.observable(null); //System.Guid: SavedFilterId
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	userId: KnockoutObservable<string> = ko.observable(null); //System.Guid: UserId

	Load(data: server.savedFilterUserGroupsAuto) {
		super.Load(data);
		if (data != null) {
			this.description(data.description);
			this.filter().Load(data.filter);
			this.savedFilterId(data.savedFilterId);
			this.tenantId(data.tenantId);
			this.userId(data.userId);
		}
		else {
			this.description(null);
			this.filter(new filterUserGroupsAuto);
			this.savedFilterId(null);
			this.tenantId(null);
			this.userId(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+SavedFilterUsersAuto
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class savedFilterUsersAuto extends actionResponseObject { // SampleSinglePageApplication.DataObjects+SavedFilterUsersAuto
	description: KnockoutObservable<string> = ko.observable(null); //System.String: Description
	filter: KnockoutObservable<filterUsersAuto> = ko.observable(new filterUsersAuto); //SampleSinglePageApplication.DataObjects+FilterUsersAuto: Filter
	savedFilterId: KnockoutObservable<string> = ko.observable(null); //System.Guid: SavedFilterId
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	userId: KnockoutObservable<string> = ko.observable(null); //System.Guid: UserId

	Load(data: server.savedFilterUsersAuto) {
		super.Load(data);
		if (data != null) {
			this.description(data.description);
			this.filter().Load(data.filter);
			this.savedFilterId(data.savedFilterId);
			this.tenantId(data.tenantId);
			this.userId(data.userId);
		}
		else {
			this.description(null);
			this.filter(new filterUsersAuto);
			this.savedFilterId(null);
			this.tenantId(null);
			this.userId(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+Setting
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class setting extends actionResponseObject { // SampleSinglePageApplication.DataObjects+Setting
	settingId: KnockoutObservable<number> = ko.observable(0); //System.Int32: SettingId
	settingName: KnockoutObservable<string> = ko.observable(null); //System.String: SettingName
	settingType: KnockoutObservable<string> = ko.observable(null); //System.String: SettingType
	settingNotes: KnockoutObservable<string> = ko.observable(null); //System.String: SettingNotes
	settingText: KnockoutObservable<string> = ko.observable(null); //System.String: SettingText
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: TenantId
	userId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: UserId

	Load(data: server.setting) {
		super.Load(data);
		if (data != null) {
			this.settingId(data.settingId);
			this.settingName(data.settingName);
			this.settingType(data.settingType);
			this.settingNotes(data.settingNotes);
			this.settingText(data.settingText);
			this.tenantId(data.tenantId);
			this.userId(data.userId);
		}
		else {
			this.settingId(0);
			this.settingName(null);
			this.settingType(null);
			this.settingNotes(null);
			this.settingText(null);
			this.tenantId(null);
			this.userId(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+SignalRUpdate
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class signalRUpdate { // SampleSinglePageApplication.DataObjects+SignalRUpdate
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: TenantId
	requestId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: RequestId
	itemId: KnockoutObservable<string> = ko.observable(null); //System.String: ItemId
	userId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: UserId
	updateType: KnockoutObservable<server.signalRUpdateType> = ko.observable(0);
	updateTypeLabelAuto = ko.computed((): string => {
		let output: string = null;

		if (this.updateType() != null) {
			output = sampleSinglePageApplicationEnumAutos.ConvertSignalRUpdateTypeToHumanReadableString(this.updateType());
		}

		return output;
	});
	updateTypeString: KnockoutObservable<string> = ko.observable(null); //System.String: UpdateTypeString
	message: KnockoutObservable<string> = ko.observable(null); //System.String: Message
	object: KnockoutObservable<any> = ko.observable(null); //System.Object: Object

	Load(data: server.signalRUpdate) {
		if (data != null) {
			this.tenantId(data.tenantId);
			this.requestId(data.requestId);
			this.itemId(data.itemId);
			this.userId(data.userId);
			this.updateType(data.updateType);
			this.updateTypeString(data.updateTypeString);
			this.message(data.message);
			this.object(data.object);
		}
		else {
			this.tenantId(null);
			this.requestId(null);
			this.itemId(null);
			this.userId(null);
			this.updateType(0);
			this.updateTypeString(null);
			this.message(null);
			this.object(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+SimplePost
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class simplePost { // SampleSinglePageApplication.DataObjects+SimplePost
	singleItem: KnockoutObservable<string> = ko.observable(null); //System.String: SingleItem
	items: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.String]: Items

	Load(data: server.simplePost) {
		if (data != null) {
			this.singleItem(data.singleItem);
			this.items(data.items);
		}
		else {
			this.singleItem(null);
			this.items([]);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+SimpleResponse
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class simpleResponse { // SampleSinglePageApplication.DataObjects+SimpleResponse
	result: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: Result
	message: KnockoutObservable<string> = ko.observable(null); //System.String: Message

	Load(data: server.simpleResponse) {
		if (data != null) {
			this.result(data.result);
			this.message(data.message);
		}
		else {
			this.result(false);
			this.message(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+Tenant
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class tenant extends actionResponseObject { // SampleSinglePageApplication.DataObjects+Tenant
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	name: KnockoutObservable<string> = ko.observable(null); //System.String: Name
	tenantCode: KnockoutObservable<string> = ko.observable(null); //System.String: TenantCode
	enabled: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: Enabled
	departments: KnockoutObservableArray<department> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+Department]: Departments
	departmentGroups: KnockoutObservableArray<departmentGroup> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+DepartmentGroup]: DepartmentGroups
	tenantSettings: KnockoutObservable<tenantSettings> = ko.observable(new tenantSettings); //SampleSinglePageApplication.DataObjects+TenantSettings: TenantSettings
	udfLabels: KnockoutObservableArray<udfLabel> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+udfLabel]: udfLabels
	listItems: KnockoutObservableArray<listItem> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+ListItem]: ListItems

	Load(data: server.tenant) {
		super.Load(data);
		if (data != null) {
			this.tenantId(data.tenantId);
			this.name(data.name);
			this.tenantCode(data.tenantCode);
			this.enabled(data.enabled);
			let __departments: department[] = [];
			if (data.departments != null) {
				data.departments.forEach((e: server.department) => {
					let item: department = new department();
					item.Load(e);
					__departments.push(item);
				});
			}
			this.departments(__departments);
			let __departmentGroups: departmentGroup[] = [];
			if (data.departmentGroups != null) {
				data.departmentGroups.forEach((e: server.departmentGroup) => {
					let item: departmentGroup = new departmentGroup();
					item.Load(e);
					__departmentGroups.push(item);
				});
			}
			this.departmentGroups(__departmentGroups);
			this.tenantSettings().Load(data.tenantSettings);
			let __udfLabels: udfLabel[] = [];
			if (data.udfLabels != null) {
				data.udfLabels.forEach((e: server.udfLabel) => {
					let item: udfLabel = new udfLabel();
					item.Load(e);
					__udfLabels.push(item);
				});
			}
			this.udfLabels(__udfLabels);
			let __listItems: listItem[] = [];
			if (data.listItems != null) {
				data.listItems.forEach((e: server.listItem) => {
					let item: listItem = new listItem();
					item.Load(e);
					__listItems.push(item);
				});
			}
			this.listItems(__listItems);
		}
		else {
			this.tenantId(null);
			this.name(null);
			this.tenantCode(null);
			this.enabled(false);
			this.departments([]);
			this.departmentGroups([]);
			this.tenantSettings(new tenantSettings);
			this.udfLabels([]);
			this.listItems([]);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+TenantList
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class tenantList { // SampleSinglePageApplication.DataObjects+TenantList
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	name: KnockoutObservable<string> = ko.observable(null); //System.String: Name
	tenantCode: KnockoutObservable<string> = ko.observable(null); //System.String: TenantCode

	Load(data: server.tenantList) {
		if (data != null) {
			this.tenantId(data.tenantId);
			this.name(data.name);
			this.tenantCode(data.tenantCode);
		}
		else {
			this.tenantId(null);
			this.name(null);
			this.tenantCode(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+TenantSettings
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class tenantSettings { // SampleSinglePageApplication.DataObjects+TenantSettings
	allowUsersToManageAvatars: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: AllowUsersToManageAvatars
	allowUsersToManageBasicProfileInfo: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: AllowUsersToManageBasicProfileInfo
	allowUsersToManageBasicProfileInfoElements: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.String]: AllowUsersToManageBasicProfileInfoElements
	allowUsersToResetPasswordsForLocalLogin: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: AllowUsersToResetPasswordsForLocalLogin
	allowUsersToSignUpForLocalLogin: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: AllowUsersToSignUpForLocalLogin
	cookieDomain: KnockoutObservable<string> = ko.observable(null); //System.String: CookieDomain
	customAuthenticationCode: KnockoutObservable<string> = ko.observable(null); //System.String: CustomAuthenticationCode
	customAuthenticationName: KnockoutObservable<string> = ko.observable(null); //System.String: CustomAuthenticationName
	defaultCultureCode: KnockoutObservable<string> = ko.observable(null); //System.String: DefaultCultureCode
	defaultReplyToAddress: KnockoutObservable<string> = ko.observable(null); //System.String: DefaultReplyToAddress
	eitSsoUrl: KnockoutObservable<string> = ko.observable(null); //System.String: EitSsoUrl
	jasonWebTokenKey: KnockoutObservable<string> = ko.observable(null); //System.String: JasonWebTokenKey
	ldapLookupRoot: KnockoutObservable<string> = ko.observable(null); //System.String: LdapLookupRoot
	ldapLookupUsername: KnockoutObservable<string> = ko.observable(null); //System.String: LdapLookupUsername
	ldapLookupPassword: KnockoutObservable<string> = ko.observable(null); //System.String: LdapLookupPassword
	ldapLookupSearchBase: KnockoutObservable<string> = ko.observable(null); //System.String: LdapLookupSearchBase
	ldapLookupLocationAttribute: KnockoutObservable<string> = ko.observable(null); //System.String: LdapLookupLocationAttribute
	ldapLookupPort: KnockoutObservable<number> = ko.observable(0); //System.Int32: LdapLookupPort
	loginOptions: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.String]: LoginOptions
	moduleHideElements: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.String]: ModuleHideElements
	workSchedule: KnockoutObservable<workSchedule> = ko.observable(new workSchedule); //SampleSinglePageApplication.DataObjects+WorkSchedule: WorkSchedule
	requirePreExistingAccountToLogIn: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: RequirePreExistingAccountToLogIn
	listItems: KnockoutObservableArray<listItem> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+ListItem]: ListItems
	externalUserDataSources: KnockoutObservableArray<externalDataSource> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+ExternalDataSource]: ExternalUserDataSources

	Load(data: server.tenantSettings) {
		if (data != null) {
			this.allowUsersToManageAvatars(data.allowUsersToManageAvatars);
			this.allowUsersToManageBasicProfileInfo(data.allowUsersToManageBasicProfileInfo);
			this.allowUsersToManageBasicProfileInfoElements(data.allowUsersToManageBasicProfileInfoElements);
			this.allowUsersToResetPasswordsForLocalLogin(data.allowUsersToResetPasswordsForLocalLogin);
			this.allowUsersToSignUpForLocalLogin(data.allowUsersToSignUpForLocalLogin);
			this.cookieDomain(data.cookieDomain);
			this.customAuthenticationCode(data.customAuthenticationCode);
			this.customAuthenticationName(data.customAuthenticationName);
			this.defaultCultureCode(data.defaultCultureCode);
			this.defaultReplyToAddress(data.defaultReplyToAddress);
			this.eitSsoUrl(data.eitSsoUrl);
			this.jasonWebTokenKey(data.jasonWebTokenKey);
			this.ldapLookupRoot(data.ldapLookupRoot);
			this.ldapLookupUsername(data.ldapLookupUsername);
			this.ldapLookupPassword(data.ldapLookupPassword);
			this.ldapLookupSearchBase(data.ldapLookupSearchBase);
			this.ldapLookupLocationAttribute(data.ldapLookupLocationAttribute);
			this.ldapLookupPort(data.ldapLookupPort);
			this.loginOptions(data.loginOptions);
			this.moduleHideElements(data.moduleHideElements);
			this.workSchedule().Load(data.workSchedule);
			this.requirePreExistingAccountToLogIn(data.requirePreExistingAccountToLogIn);
			let __listItems: listItem[] = [];
			if (data.listItems != null) {
				data.listItems.forEach((e: server.listItem) => {
					let item: listItem = new listItem();
					item.Load(e);
					__listItems.push(item);
				});
			}
			this.listItems(__listItems);
			let __externalUserDataSources: externalDataSource[] = [];
			if (data.externalUserDataSources != null) {
				data.externalUserDataSources.forEach((e: server.externalDataSource) => {
					let item: externalDataSource = new externalDataSource();
					item.Load(e);
					__externalUserDataSources.push(item);
				});
			}
			this.externalUserDataSources(__externalUserDataSources);
		}
		else {
			this.allowUsersToManageAvatars(false);
			this.allowUsersToManageBasicProfileInfo(false);
			this.allowUsersToManageBasicProfileInfoElements([]);
			this.allowUsersToResetPasswordsForLocalLogin(false);
			this.allowUsersToSignUpForLocalLogin(false);
			this.cookieDomain(null);
			this.customAuthenticationCode(null);
			this.customAuthenticationName(null);
			this.defaultCultureCode(null);
			this.defaultReplyToAddress(null);
			this.eitSsoUrl(null);
			this.jasonWebTokenKey(null);
			this.ldapLookupRoot(null);
			this.ldapLookupUsername(null);
			this.ldapLookupPassword(null);
			this.ldapLookupSearchBase(null);
			this.ldapLookupLocationAttribute(null);
			this.ldapLookupPort(0);
			this.loginOptions([]);
			this.moduleHideElements([]);
			this.workSchedule(new workSchedule);
			this.requirePreExistingAccountToLogIn(false);
			this.listItems([]);
			this.externalUserDataSources([]);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+TodoUserAuto
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class todoUserAuto extends actionResponseObject { // SampleSinglePageApplication.DataObjects+TodoUserAuto
	savedFiltersDepartmentsAuto: KnockoutObservableArray<savedFilterDepartmentsAuto> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+SavedFilterDepartmentsAuto]: SavedFiltersDepartmentsAuto
	savedFiltersDepartmentGroupsAuto: KnockoutObservableArray<savedFilterDepartmentGroupsAuto> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+SavedFilterDepartmentGroupsAuto]: SavedFiltersDepartmentGroupsAuto
	savedFiltersFileStoragesAuto: KnockoutObservableArray<savedFilterFileStoragesAuto> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+SavedFilterFileStoragesAuto]: SavedFiltersFileStoragesAuto
	savedFiltersSettingsAuto: KnockoutObservableArray<savedFilterSettingsAuto> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+SavedFilterSettingsAuto]: SavedFiltersSettingsAuto
	savedFiltersTenantsAuto: KnockoutObservableArray<savedFilterTenantsAuto> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+SavedFilterTenantsAuto]: SavedFiltersTenantsAuto
	savedFiltersUsersAuto: KnockoutObservableArray<savedFilterUsersAuto> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+SavedFilterUsersAuto]: SavedFiltersUsersAuto
	savedFiltersUserGroupsAuto: KnockoutObservableArray<savedFilterUserGroupsAuto> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+SavedFilterUserGroupsAuto]: SavedFiltersUserGroupsAuto

	Load(data: server.todoUserAuto) {
		super.Load(data);
		if (data != null) {
			let __savedFiltersDepartmentsAuto: savedFilterDepartmentsAuto[] = [];
			if (data.savedFiltersDepartmentsAuto != null) {
				data.savedFiltersDepartmentsAuto.forEach((e: server.savedFilterDepartmentsAuto) => {
					let item: savedFilterDepartmentsAuto = new savedFilterDepartmentsAuto();
					item.Load(e);
					__savedFiltersDepartmentsAuto.push(item);
				});
			}
			this.savedFiltersDepartmentsAuto(__savedFiltersDepartmentsAuto);
			let __savedFiltersDepartmentGroupsAuto: savedFilterDepartmentGroupsAuto[] = [];
			if (data.savedFiltersDepartmentGroupsAuto != null) {
				data.savedFiltersDepartmentGroupsAuto.forEach((e: server.savedFilterDepartmentGroupsAuto) => {
					let item: savedFilterDepartmentGroupsAuto = new savedFilterDepartmentGroupsAuto();
					item.Load(e);
					__savedFiltersDepartmentGroupsAuto.push(item);
				});
			}
			this.savedFiltersDepartmentGroupsAuto(__savedFiltersDepartmentGroupsAuto);
			let __savedFiltersFileStoragesAuto: savedFilterFileStoragesAuto[] = [];
			if (data.savedFiltersFileStoragesAuto != null) {
				data.savedFiltersFileStoragesAuto.forEach((e: server.savedFilterFileStoragesAuto) => {
					let item: savedFilterFileStoragesAuto = new savedFilterFileStoragesAuto();
					item.Load(e);
					__savedFiltersFileStoragesAuto.push(item);
				});
			}
			this.savedFiltersFileStoragesAuto(__savedFiltersFileStoragesAuto);
			let __savedFiltersSettingsAuto: savedFilterSettingsAuto[] = [];
			if (data.savedFiltersSettingsAuto != null) {
				data.savedFiltersSettingsAuto.forEach((e: server.savedFilterSettingsAuto) => {
					let item: savedFilterSettingsAuto = new savedFilterSettingsAuto();
					item.Load(e);
					__savedFiltersSettingsAuto.push(item);
				});
			}
			this.savedFiltersSettingsAuto(__savedFiltersSettingsAuto);
			let __savedFiltersTenantsAuto: savedFilterTenantsAuto[] = [];
			if (data.savedFiltersTenantsAuto != null) {
				data.savedFiltersTenantsAuto.forEach((e: server.savedFilterTenantsAuto) => {
					let item: savedFilterTenantsAuto = new savedFilterTenantsAuto();
					item.Load(e);
					__savedFiltersTenantsAuto.push(item);
				});
			}
			this.savedFiltersTenantsAuto(__savedFiltersTenantsAuto);
			let __savedFiltersUsersAuto: savedFilterUsersAuto[] = [];
			if (data.savedFiltersUsersAuto != null) {
				data.savedFiltersUsersAuto.forEach((e: server.savedFilterUsersAuto) => {
					let item: savedFilterUsersAuto = new savedFilterUsersAuto();
					item.Load(e);
					__savedFiltersUsersAuto.push(item);
				});
			}
			this.savedFiltersUsersAuto(__savedFiltersUsersAuto);
			let __savedFiltersUserGroupsAuto: savedFilterUserGroupsAuto[] = [];
			if (data.savedFiltersUserGroupsAuto != null) {
				data.savedFiltersUserGroupsAuto.forEach((e: server.savedFilterUserGroupsAuto) => {
					let item: savedFilterUserGroupsAuto = new savedFilterUserGroupsAuto();
					item.Load(e);
					__savedFiltersUserGroupsAuto.push(item);
				});
			}
			this.savedFiltersUserGroupsAuto(__savedFiltersUserGroupsAuto);
		}
		else {
			this.savedFiltersDepartmentsAuto([]);
			this.savedFiltersDepartmentGroupsAuto([]);
			this.savedFiltersFileStoragesAuto([]);
			this.savedFiltersSettingsAuto([]);
			this.savedFiltersTenantsAuto([]);
			this.savedFiltersUsersAuto([]);
			this.savedFiltersUserGroupsAuto([]);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+udfLabel
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class udfLabel { // SampleSinglePageApplication.DataObjects+udfLabel
	id: KnockoutObservable<string> = ko.observable(null); //System.Guid: Id
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	module: KnockoutObservable<string> = ko.observable(null); //System.String: Module
	udf: KnockoutObservable<string> = ko.observable(null); //System.String: udf
	label: KnockoutObservable<string> = ko.observable(null); //System.String: Label
	showColumn: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: ShowColumn
	showInFilter: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: ShowInFilter
	includeInSearch: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: IncludeInSearch
	filterOptions: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.String]: FilterOptions

	Load(data: server.udfLabel) {
		if (data != null) {
			this.id(data.id);
			this.tenantId(data.tenantId);
			this.module(data.module);
			this.udf(data.udf);
			this.label(data.label);
			this.showColumn(data.showColumn);
			this.showInFilter(data.showInFilter);
			this.includeInSearch(data.includeInSearch);
			this.filterOptions(data.filterOptions);
		}
		else {
			this.id(null);
			this.tenantId(null);
			this.module(null);
			this.udf(null);
			this.label(null);
			this.showColumn(false);
			this.showInFilter(false);
			this.includeInSearch(false);
			this.filterOptions([]);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+User
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class user extends actionResponseObject { // SampleSinglePageApplication.DataObjects+User
	userId: KnockoutObservable<string> = ko.observable(null); //System.Guid: UserId
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	firstName: KnockoutObservable<string> = ko.observable(null); //System.String: FirstName
	lastName: KnockoutObservable<string> = ko.observable(null); //System.String: LastName
	displayName: KnockoutObservable<string> = ko.observable(null); //System.String: DisplayName
	email: KnockoutObservable<string> = ko.observable(null); //System.String: Email
	phone: KnockoutObservable<string> = ko.observable(null); //System.String: Phone
	username: KnockoutObservable<string> = ko.observable(null); //System.String: Username
	employeeId: KnockoutObservable<string> = ko.observable(null); //System.String: EmployeeId
	departmentId: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: DepartmentId
	departmentName: KnockoutObservable<string> = ko.observable(null); //System.String: DepartmentName
	title: KnockoutObservable<string> = ko.observable(null); //System.String: Title
	location: KnockoutObservable<string> = ko.observable(null); //System.String: Location
	enabled: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: Enabled
	lastLogin: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: LastLogin
	admin: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: Admin
	appAdmin: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: AppAdmin
	photo: KnockoutObservable<string> = ko.observable(null); //System.Nullable`1[System.Guid]: Photo
	password: KnockoutObservable<string> = ko.observable(null); //System.String: Password
	preventPasswordChange: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: PreventPasswordChange
	hasLocalPassword: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: HasLocalPassword
	authToken: KnockoutObservable<string> = ko.observable(null); //System.String: AuthToken
	failedLoginAttempts: KnockoutObservable<number> = ko.observable(0); //System.Int32: FailedLoginAttempts
	lastLockoutDate: KnockoutObservable<Date> = ko.observable(null); //System.Nullable`1[System.DateTime]: LastLockoutDate
	tenants: KnockoutObservableArray<tenant> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+Tenant]: Tenants
	userTenants: KnockoutObservableArray<userTenant> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+UserTenant]: UserTenants
	source: KnockoutObservable<string> = ko.observable(null); //System.String: Source
	udf01: KnockoutObservable<string> = ko.observable(null); //System.String: udf01
	udf02: KnockoutObservable<string> = ko.observable(null); //System.String: udf02
	udf03: KnockoutObservable<string> = ko.observable(null); //System.String: udf03
	udf04: KnockoutObservable<string> = ko.observable(null); //System.String: udf04
	udf05: KnockoutObservable<string> = ko.observable(null); //System.String: udf05
	udf06: KnockoutObservable<string> = ko.observable(null); //System.String: udf06
	udf07: KnockoutObservable<string> = ko.observable(null); //System.String: udf07
	udf08: KnockoutObservable<string> = ko.observable(null); //System.String: udf08
	udf09: KnockoutObservable<string> = ko.observable(null); //System.String: udf09
	udf10: KnockoutObservable<string> = ko.observable(null); //System.String: udf10
	savedFiltersDepartmentsAuto: KnockoutObservableArray<savedFilterDepartmentsAuto> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+SavedFilterDepartmentsAuto]: SavedFiltersDepartmentsAuto
	savedFiltersDepartmentGroupsAuto: KnockoutObservableArray<savedFilterDepartmentGroupsAuto> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+SavedFilterDepartmentGroupsAuto]: SavedFiltersDepartmentGroupsAuto
	savedFiltersFileStoragesAuto: KnockoutObservableArray<savedFilterFileStoragesAuto> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+SavedFilterFileStoragesAuto]: SavedFiltersFileStoragesAuto
	savedFiltersSettingsAuto: KnockoutObservableArray<savedFilterSettingsAuto> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+SavedFilterSettingsAuto]: SavedFiltersSettingsAuto
	savedFiltersTenantsAuto: KnockoutObservableArray<savedFilterTenantsAuto> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+SavedFilterTenantsAuto]: SavedFiltersTenantsAuto
	savedFiltersUsersAuto: KnockoutObservableArray<savedFilterUsersAuto> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+SavedFilterUsersAuto]: SavedFiltersUsersAuto
	savedFiltersUserGroupsAuto: KnockoutObservableArray<savedFilterUserGroupsAuto> = ko.observableArray([]); //System.Collections.Generic.List`1[SampleSinglePageApplication.DataObjects+SavedFilterUserGroupsAuto]: SavedFiltersUserGroupsAuto

	Load(data: server.user) {
		super.Load(data);
		if (data != null) {
			this.userId(data.userId);
			this.tenantId(data.tenantId);
			this.firstName(data.firstName);
			this.lastName(data.lastName);
			this.displayName(data.displayName);
			this.email(data.email);
			this.phone(data.phone);
			this.username(data.username);
			this.employeeId(data.employeeId);
			this.departmentId(data.departmentId);
			this.departmentName(data.departmentName);
			this.title(data.title);
			this.location(data.location);
			this.enabled(data.enabled);
			this.lastLogin(data.lastLogin);
			this.admin(data.admin);
			this.appAdmin(data.appAdmin);
			this.photo(data.photo);
			this.password(data.password);
			this.preventPasswordChange(data.preventPasswordChange);
			this.hasLocalPassword(data.hasLocalPassword);
			this.authToken(data.authToken);
			this.failedLoginAttempts(data.failedLoginAttempts);
			this.lastLockoutDate(data.lastLockoutDate);
			let __tenants: tenant[] = [];
			if (data.tenants != null) {
				data.tenants.forEach((e: server.tenant) => {
					let item: tenant = new tenant();
					item.Load(e);
					__tenants.push(item);
				});
			}
			this.tenants(__tenants);
			let __userTenants: userTenant[] = [];
			if (data.userTenants != null) {
				data.userTenants.forEach((e: server.userTenant) => {
					let item: userTenant = new userTenant();
					item.Load(e);
					__userTenants.push(item);
				});
			}
			this.userTenants(__userTenants);
			this.source(data.source);
			this.udf01(data.udf01);
			this.udf02(data.udf02);
			this.udf03(data.udf03);
			this.udf04(data.udf04);
			this.udf05(data.udf05);
			this.udf06(data.udf06);
			this.udf07(data.udf07);
			this.udf08(data.udf08);
			this.udf09(data.udf09);
			this.udf10(data.udf10);
			let __savedFiltersDepartmentsAuto: savedFilterDepartmentsAuto[] = [];
			if (data.savedFiltersDepartmentsAuto != null) {
				data.savedFiltersDepartmentsAuto.forEach((e: server.savedFilterDepartmentsAuto) => {
					let item: savedFilterDepartmentsAuto = new savedFilterDepartmentsAuto();
					item.Load(e);
					__savedFiltersDepartmentsAuto.push(item);
				});
			}
			this.savedFiltersDepartmentsAuto(__savedFiltersDepartmentsAuto);
			let __savedFiltersDepartmentGroupsAuto: savedFilterDepartmentGroupsAuto[] = [];
			if (data.savedFiltersDepartmentGroupsAuto != null) {
				data.savedFiltersDepartmentGroupsAuto.forEach((e: server.savedFilterDepartmentGroupsAuto) => {
					let item: savedFilterDepartmentGroupsAuto = new savedFilterDepartmentGroupsAuto();
					item.Load(e);
					__savedFiltersDepartmentGroupsAuto.push(item);
				});
			}
			this.savedFiltersDepartmentGroupsAuto(__savedFiltersDepartmentGroupsAuto);
			let __savedFiltersFileStoragesAuto: savedFilterFileStoragesAuto[] = [];
			if (data.savedFiltersFileStoragesAuto != null) {
				data.savedFiltersFileStoragesAuto.forEach((e: server.savedFilterFileStoragesAuto) => {
					let item: savedFilterFileStoragesAuto = new savedFilterFileStoragesAuto();
					item.Load(e);
					__savedFiltersFileStoragesAuto.push(item);
				});
			}
			this.savedFiltersFileStoragesAuto(__savedFiltersFileStoragesAuto);
			let __savedFiltersSettingsAuto: savedFilterSettingsAuto[] = [];
			if (data.savedFiltersSettingsAuto != null) {
				data.savedFiltersSettingsAuto.forEach((e: server.savedFilterSettingsAuto) => {
					let item: savedFilterSettingsAuto = new savedFilterSettingsAuto();
					item.Load(e);
					__savedFiltersSettingsAuto.push(item);
				});
			}
			this.savedFiltersSettingsAuto(__savedFiltersSettingsAuto);
			let __savedFiltersTenantsAuto: savedFilterTenantsAuto[] = [];
			if (data.savedFiltersTenantsAuto != null) {
				data.savedFiltersTenantsAuto.forEach((e: server.savedFilterTenantsAuto) => {
					let item: savedFilterTenantsAuto = new savedFilterTenantsAuto();
					item.Load(e);
					__savedFiltersTenantsAuto.push(item);
				});
			}
			this.savedFiltersTenantsAuto(__savedFiltersTenantsAuto);
			let __savedFiltersUsersAuto: savedFilterUsersAuto[] = [];
			if (data.savedFiltersUsersAuto != null) {
				data.savedFiltersUsersAuto.forEach((e: server.savedFilterUsersAuto) => {
					let item: savedFilterUsersAuto = new savedFilterUsersAuto();
					item.Load(e);
					__savedFiltersUsersAuto.push(item);
				});
			}
			this.savedFiltersUsersAuto(__savedFiltersUsersAuto);
			let __savedFiltersUserGroupsAuto: savedFilterUserGroupsAuto[] = [];
			if (data.savedFiltersUserGroupsAuto != null) {
				data.savedFiltersUserGroupsAuto.forEach((e: server.savedFilterUserGroupsAuto) => {
					let item: savedFilterUserGroupsAuto = new savedFilterUserGroupsAuto();
					item.Load(e);
					__savedFiltersUserGroupsAuto.push(item);
				});
			}
			this.savedFiltersUserGroupsAuto(__savedFiltersUserGroupsAuto);
		}
		else {
			this.userId(null);
			this.tenantId(null);
			this.firstName(null);
			this.lastName(null);
			this.displayName(null);
			this.email(null);
			this.phone(null);
			this.username(null);
			this.employeeId(null);
			this.departmentId(null);
			this.departmentName(null);
			this.title(null);
			this.location(null);
			this.enabled(false);
			this.lastLogin(null);
			this.admin(false);
			this.appAdmin(false);
			this.photo(null);
			this.password(null);
			this.preventPasswordChange(false);
			this.hasLocalPassword(false);
			this.authToken(null);
			this.failedLoginAttempts(0);
			this.lastLockoutDate(null);
			this.tenants([]);
			this.userTenants([]);
			this.source(null);
			this.udf01(null);
			this.udf02(null);
			this.udf03(null);
			this.udf04(null);
			this.udf05(null);
			this.udf06(null);
			this.udf07(null);
			this.udf08(null);
			this.udf09(null);
			this.udf10(null);
			this.savedFiltersDepartmentsAuto([]);
			this.savedFiltersDepartmentGroupsAuto([]);
			this.savedFiltersFileStoragesAuto([]);
			this.savedFiltersSettingsAuto([]);
			this.savedFiltersTenantsAuto([]);
			this.savedFiltersUsersAuto([]);
			this.savedFiltersUserGroupsAuto([]);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+UserGroup
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class userGroup extends actionResponseObject { // SampleSinglePageApplication.DataObjects+UserGroup
	groupId: KnockoutObservable<string> = ko.observable(null); //System.Guid: GroupId
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	name: KnockoutObservable<string> = ko.observable(null); //System.String: Name
	enabled: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: Enabled
	users: KnockoutObservableArray<string> = ko.observableArray([]); //System.Collections.Generic.List`1[System.Guid]: Users
	settings: KnockoutObservable<userGroupSettings> = ko.observable(new userGroupSettings); //SampleSinglePageApplication.DataObjects+UserGroupSettings: Settings

	Load(data: server.userGroup) {
		super.Load(data);
		if (data != null) {
			this.groupId(data.groupId);
			this.tenantId(data.tenantId);
			this.name(data.name);
			this.enabled(data.enabled);
			this.users(data.users);
			this.settings().Load(data.settings);
		}
		else {
			this.groupId(null);
			this.tenantId(null);
			this.name(null);
			this.enabled(false);
			this.users([]);
			this.settings(new userGroupSettings);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+UserGroupSettings
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class userGroupSettings { // SampleSinglePageApplication.DataObjects+UserGroupSettings
	someSetting: KnockoutObservable<string> = ko.observable(null); //System.String: SomeSetting

	Load(data: server.userGroupSettings) {
		if (data != null) {
			this.someSetting(data.someSetting);
		}
		else {
			this.someSetting(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+UserPasswordReset
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class userPasswordReset { // SampleSinglePageApplication.DataObjects+UserPasswordReset
	userId: KnockoutObservable<string> = ko.observable(null); //System.Guid: UserId
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	currentPassword: KnockoutObservable<string> = ko.observable(null); //System.String: CurrentPassword
	newPassword: KnockoutObservable<string> = ko.observable(null); //System.String: NewPassword

	Load(data: server.userPasswordReset) {
		if (data != null) {
			this.userId(data.userId);
			this.tenantId(data.tenantId);
			this.currentPassword(data.currentPassword);
			this.newPassword(data.newPassword);
		}
		else {
			this.userId(null);
			this.tenantId(null);
			this.currentPassword(null);
			this.newPassword(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+UserTenant
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class userTenant { // SampleSinglePageApplication.DataObjects+UserTenant
	userId: KnockoutObservable<string> = ko.observable(null); //System.Guid: UserId
	tenantId: KnockoutObservable<string> = ko.observable(null); //System.Guid: TenantId
	tenantCode: KnockoutObservable<string> = ko.observable(null); //System.String: TenantCode
	tenantName: KnockoutObservable<string> = ko.observable(null); //System.String: TenantName

	Load(data: server.userTenant) {
		if (data != null) {
			this.userId(data.userId);
			this.tenantId(data.tenantId);
			this.tenantCode(data.tenantCode);
			this.tenantName(data.tenantName);
		}
		else {
			this.userId(null);
			this.tenantId(null);
			this.tenantCode(null);
			this.tenantName(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+VersionInfo
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class versionInfo { // SampleSinglePageApplication.DataObjects+VersionInfo
	released: KnockoutObservable<Date> = ko.observable(new Date); //System.DateTime: Released
	runningSince: KnockoutObservable<number> = ko.observable(0); //System.Double: RunningSince
	version: KnockoutObservable<string> = ko.observable(null); //System.String: Version

	Load(data: server.versionInfo) {
		if (data != null) {
			this.released(data.released);
			this.runningSince(data.runningSince);
			this.version(data.version);
		}
		else {
			this.released(new Date);
			this.runningSince(0);
			this.version(null);
		}
	}
}
/// 
///  // SampleSinglePageApplication.DataObjects+WorkSchedule
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class workSchedule { // SampleSinglePageApplication.DataObjects+WorkSchedule
	sunday: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: Sunday
	sundayAllDay: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: SundayAllDay
	sundayStart: KnockoutObservable<string> = ko.observable(null); //System.String: SundayStart
	sundayEnd: KnockoutObservable<string> = ko.observable(null); //System.String: SundayEnd
	monday: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: Monday
	mondayAllDay: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: MondayAllDay
	mondayStart: KnockoutObservable<string> = ko.observable(null); //System.String: MondayStart
	mondayEnd: KnockoutObservable<string> = ko.observable(null); //System.String: MondayEnd
	tuesday: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: Tuesday
	tuesdayAllDay: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: TuesdayAllDay
	tuesdayStart: KnockoutObservable<string> = ko.observable(null); //System.String: TuesdayStart
	tuesdayEnd: KnockoutObservable<string> = ko.observable(null); //System.String: TuesdayEnd
	wednesday: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: Wednesday
	wednesdayAllDay: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: WednesdayAllDay
	wednesdayStart: KnockoutObservable<string> = ko.observable(null); //System.String: WednesdayStart
	wednesdayEnd: KnockoutObservable<string> = ko.observable(null); //System.String: WednesdayEnd
	thursday: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: Thursday
	thursdayAllDay: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: ThursdayAllDay
	thursdayStart: KnockoutObservable<string> = ko.observable(null); //System.String: ThursdayStart
	thursdayEnd: KnockoutObservable<string> = ko.observable(null); //System.String: ThursdayEnd
	friday: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: Friday
	fridayAllDay: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: FridayAllDay
	fridayStart: KnockoutObservable<string> = ko.observable(null); //System.String: FridayStart
	fridayEnd: KnockoutObservable<string> = ko.observable(null); //System.String: FridayEnd
	saturday: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: Saturday
	saturdayAllDay: KnockoutObservable<boolean> = ko.observable(false); //System.Boolean: SaturdayAllDay
	saturdayStart: KnockoutObservable<string> = ko.observable(null); //System.String: SaturdayStart
	saturdayEnd: KnockoutObservable<string> = ko.observable(null); //System.String: SaturdayEnd

	Load(data: server.workSchedule) {
		if (data != null) {
			this.sunday(data.sunday);
			this.sundayAllDay(data.sundayAllDay);
			this.sundayStart(data.sundayStart);
			this.sundayEnd(data.sundayEnd);
			this.monday(data.monday);
			this.mondayAllDay(data.mondayAllDay);
			this.mondayStart(data.mondayStart);
			this.mondayEnd(data.mondayEnd);
			this.tuesday(data.tuesday);
			this.tuesdayAllDay(data.tuesdayAllDay);
			this.tuesdayStart(data.tuesdayStart);
			this.tuesdayEnd(data.tuesdayEnd);
			this.wednesday(data.wednesday);
			this.wednesdayAllDay(data.wednesdayAllDay);
			this.wednesdayStart(data.wednesdayStart);
			this.wednesdayEnd(data.wednesdayEnd);
			this.thursday(data.thursday);
			this.thursdayAllDay(data.thursdayAllDay);
			this.thursdayStart(data.thursdayStart);
			this.thursdayEnd(data.thursdayEnd);
			this.friday(data.friday);
			this.fridayAllDay(data.fridayAllDay);
			this.fridayStart(data.fridayStart);
			this.fridayEnd(data.fridayEnd);
			this.saturday(data.saturday);
			this.saturdayAllDay(data.saturdayAllDay);
			this.saturdayStart(data.saturdayStart);
			this.saturdayEnd(data.saturdayEnd);
		}
		else {
			this.sunday(false);
			this.sundayAllDay(false);
			this.sundayStart(null);
			this.sundayEnd(null);
			this.monday(false);
			this.mondayAllDay(false);
			this.mondayStart(null);
			this.mondayEnd(null);
			this.tuesday(false);
			this.tuesdayAllDay(false);
			this.tuesdayStart(null);
			this.tuesdayEnd(null);
			this.wednesday(false);
			this.wednesdayAllDay(false);
			this.wednesdayStart(null);
			this.wednesdayEnd(null);
			this.thursday(false);
			this.thursdayAllDay(false);
			this.thursdayStart(null);
			this.thursdayEnd(null);
			this.friday(false);
			this.fridayAllDay(false);
			this.fridayStart(null);
			this.fridayEnd(null);
			this.saturday(false);
			this.saturdayAllDay(false);
			this.saturdayStart(null);
			this.saturdayEnd(null);
		}
	}
}
