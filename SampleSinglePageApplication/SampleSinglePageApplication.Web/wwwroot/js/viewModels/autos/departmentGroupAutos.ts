/// 
/// DepartmentGroup
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class DepartmentGroupsModelAuto {
	MainModel: KnockoutObservable<MainModel> = ko.observable(window.mainModel);
	Filter: KnockoutObservable<filterDepartmentGroupsAuto> = ko.observable(new filterDepartmentGroupsAuto);
	DepartmentGroup: KnockoutObservable<departmentGroup> = ko.observable(new departmentGroup);
	DepartmentGroups: KnockoutObservableArray<departmentGroup> = ko.observableArray([]);
	Loading: KnockoutObservable<boolean> = ko.observable(false);
	ConfirmDeleteDepartmentGroup: KnockoutObservable<string> = ko.observable("");
	ShowDepartmentGroupDetails: KnockoutObservable<boolean> = ko.observable(false);
	FilterViewDepartmentGroupType: KnockoutObservable<string> = ko.observable("list");
	GettingSavedDepartmentGroupFilterName: KnockoutObservable<boolean> = ko.observable(false);
	SavedDepartmentGroupFilterName: KnockoutObservable<string> = ko.observable("");

	constructor() {
		this.MainModel().View.subscribe(() => {
			this.ViewChanged();
		});

		this.MainModel().SignalRUpdate.subscribe(() => {
			this.SignalrUpdate();
		});
		//setTimeout("setupUserPhotoDropZone()", 0);
		setTimeout(() => this.StartFilterMonitoring(), 1000);
	}
	//TODO: click: DeleteSavedDepartmentGroupFilter
	DeleteSavedDepartmentGroupFilter(): void {
		this.MainModel().Message_Hide();
		let filterId: string = this.Filter().filterId();
		
		let success: Function = (data: server.booleanResponse) => {
			this.MainModel().Message_Hide();
			
			if (data != null) {
				if (data.result) {
					let existing: savedFilterDepartmentGroupsAuto = ko.utils.arrayFirst(this.MainModel().User().savedFiltersDepartmentGroupsAuto(), function (item) {
						return item.savedFilterId() == filterId;
					});
					if (existing != null) {
						this.MainModel().User().savedFiltersDepartmentGroupsAuto.remove(existing);
					}
					
					this.ClearDepartmentGroupFilter();
				} else {
					this.MainModel().Message_Errors(data.messages);
				}
			} else {
				this.MainModel().Message_Error("An unknown error occurred attempting to delete the saved filter.");
			}
		};
		
		this.MainModel().Message_Deleting();
		tsUtilities.AjaxData(window.baseURL + "api/Data/DeleteSavedDepartmentGroupFilter/" + filterId.toString(), null, success);
	}
	//TODO: click: ExportDepartmentGroup
	ExportDepartmentGroups(): void {
		let filter: filterDepartmentGroupsAuto = new filterDepartmentGroupsAuto;
		filter.Load(JSON.parse(ko.toJSON(this.Filter)));
		filter.records([]);
		$("#departmentgroup-filter").val(ko.toJSON(filter));
		$("#departmentgroup-filter-download").submit();
	}

	ToggleDepartmentGroupDetails(): void {
		if (this.ShowDepartmentGroupDetails()) {
			this.ShowDepartmentGroupDetails(false);
			localStorage.setItem("departmentgroup-details-" + this.MainModel().TenantId(), "0");
		} else {
			this.ShowDepartmentGroupDetails(true);
			localStorage.setItem("departmentgroup-details-" + this.MainModel().TenantId(), "1");
		}
	
		this.RenderDepartmentGroupTable();
	}
	
	/**
	 * Called when the Show or Hide Filter buttons are clicked.
	 */
	ToggleShowDepartmentGroupFilter(): void {
		this.Filter().showFilters(!this.Filter().showFilters());
		this.SaveDepartmentGroupFilter();
	}
	ToggleDepartmentGroupView(): void {
		if (this.FilterViewDepartmentGroupType() == "list") {
			this.FilterViewDepartmentGroupType("card");
		} else {
			this.FilterViewDepartmentGroupType("list");
		}
		localStorage.setItem("departmentgroup-view-" + this.MainModel().TenantId(), this.FilterViewDepartmentGroupType());
		this.RenderDepartmentGroupTable();
	}
	SaveDepartmentGroupFilterRecord(): void {
		if (!tsUtilities.HasValue(this.SavedDepartmentGroupFilterName())) {
			tsUtilities.DelayedFocus("saved-departmentgroup-filter-name");
			return;
		}
		
		let success: Function = (data: server.savedFilterDepartmentGroupsAuto) => {
			this.MainModel().Message_Hide();
			
			if (data != null) {
				if (data.actionResponse.result) {
					let existing: savedFilterDepartmentGroupsAuto = null;
					
					if (this.MainModel().User().savedFiltersDepartmentGroupsAuto() != null && this.MainModel().User().savedFiltersDepartmentGroupsAuto().length > 0) {
						existing = ko.utils.arrayFirst(this.MainModel().User().savedFiltersDepartmentGroupsAuto(), function (item) {
							return item.savedFilterId() == data.savedFilterId;
						});
					}
					
					if (existing != null) {
						existing.Load(data);
					} else {
						let newSavedFilter: savedFilterDepartmentGroupsAuto = new savedFilterDepartmentGroupsAuto();
						newSavedFilter.Load(data);
						this.MainModel().User().savedFiltersDepartmentGroupsAuto.push(newSavedFilter);
					}
					
					this.MainModel().User().savedFiltersDepartmentGroupsAuto.sort(function (l, r) {
						return l.description() > r.description() ? 1 : -1;
					});
					
					this.GettingSavedDepartmentGroupFilterName(false);
				} else {
					this.MainModel().Message_Errors(data.actionResponse.messages);
				}
			} else {
				this.MainModel().Message_Error("An unknown error occurred attempting to save the filter.");
			}
		};
		this.Filter().tenantId(this.MainModel().TenantId());
		
		let f: filterDepartmentGroupsAuto = new filterDepartmentGroupsAuto();
		f.Load(JSON.parse(ko.toJSON(this.Filter)));
		f.columns(null);
		f.records(null);
		
		let postFilter: savedFilterDepartmentGroupsAuto = new savedFilterDepartmentGroupsAuto();
		postFilter.description(this.SavedDepartmentGroupFilterName());
		postFilter.savedFilterId(this.Filter().filterId());
		postFilter.userId(this.MainModel().User().userId());
		postFilter.tenantId(this.MainModel().TenantId());
		postFilter.filter(f);
		
		this.MainModel().Message_Saving();
		tsUtilities.AjaxData(window.baseURL + "api/Data/SaveSavedDepartmentGroupFilter", ko.toJSON(postFilter), success);
	}
	/**
	 * Method fires when the URL action is "NewDepartmentGroup"
	 */
	AddDepartmentGroup(): void {
		this.DepartmentGroup(new departmentGroup);
		this.DepartmentGroup().departmentGroupId(this.MainModel().GuidEmpty());
		this.DepartmentGroup().tenantId(this.MainModel().TenantId());
	
		//this.MainModel().UDFFieldsRender("edit-departmentgroup-udf-fields", "DepartmentGroups", JSON.parse(ko.toJSON(this.DepartmentGroup)));
	
		tsUtilities.DelayedFocus("edit-departmentgroup-departmentgroupid");
	}
	
	/**
	 * Clears the values for the departmentGroup search filter.
	 */
	ClearDepartmentGroupFilter(): void {
	
		this.Loading(true);
	
		this.Filter().keyword(null);
		this.Filter().departmentGroupId(null);
		this.Filter().departmentGroupName(null);
		this.Filter().departmentGroupNameFilterExact(false);
		this.Filter().udf01(null);
		this.Filter().udf02(null);
		this.Filter().udf03(null);
		this.Filter().udf04(null);
		this.Filter().udf05(null);
		this.Filter().udf06(null);
		this.Filter().udf07(null);
		this.Filter().udf08(null);
		this.Filter().udf09(null);
		this.Filter().udf10(null);
		this.Filter().page(1);
	
		//TODO: Callback method for more filtering outside of the autos
	
		this.Loading(false);
		this.GetDepartmentGroups();
	}
	
	/**
	 * Deletes a departmentGroup.
	 */
	DeleteDepartmentGroup(): void {
		let success: Function = (data: server.booleanResponse) => {
			this.MainModel().Message_Hide();
			if (data != null) {
				if (data.result) {
					this.MainModel().Nav("DepartmentGroupsAuto");
				} else {
					this.MainModel().Message_Errors(data.messages);
				}
			} else {
				this.MainModel().Message_Error("An unknown error occurred attempting to delete the Department Group.");
			}
		};
	
		this.MainModel().Message_Deleting();
		tsUtilities.AjaxData(window.baseURL + "api/Data/DeleteDepartmentGroupAuto/" + this.MainModel().Id(), null, success);
	}
	
	/**
	 * Method fires when the URL action is "EditDepartmentGroup"
	 */
	EditDepartmentGroup(): void {
		this.MainModel().Message_Hide();
		let departmentGroupId: string = this.MainModel().Id();
		this.DepartmentGroup(new departmentGroup);
		this.DepartmentGroup().departmentGroupId(null);
	
		if (tsUtilities.HasValue(departmentGroupId)) {
			let success: Function = (data: server.departmentGroup) => {
				if (data != null) {
					if (data.actionResponse.result) {
						this.DepartmentGroup().Load(data);
						tsUtilities.DelayedFocus("edit-departmentGroup-category");
	
						//this.MainModel().UDFFieldsRender("edit-departmentGroup-udf-fields", "DepartmentGroups", JSON.parse(ko.toJSON(this.DepartmentGroup)));
	
						this.Loading(false);
					} else {
						this.MainModel().Message_Errors(data.actionResponse.messages);
					}
				} else {
					this.MainModel().Message_Error("An unknown error occurred attempting to load the Department Group record.");
				}
			};
	
			this.Loading(true);
			tsUtilities.AjaxData(window.baseURL + "api/data/GetDepartmentGroupAuto/" + departmentGroupId, null, success);
		} else {
			this.MainModel().Message_Error("No valid DepartmentGroupId received.");
		}
	
	}
	
	/**
	 * The callback method used by the paged recordset control to handle the action on the record.
	 * @param record {server.departmentGroup} - The object being passed is a JSON object, not an observable.
	 */
	EditDepartmentGroupCallback(record: server.departmentGroup): void {
		if (record != undefined && record != null && tsUtilities.HasValue(record.departmentGroupId)) {
			this.MainModel().Nav("EditDepartmentGroupAuto", record.departmentGroupId);
		}
	}
	
	/**
	 * Called when the departmentGroup filter changes to reload departmentGroup records, unless the filter is changing because
	 * records are being reloaded.
	 */
	FilterChanged(): void {
		if (!this.Loading()) {
			this.GetDepartmentGroups();
		}
	}
	
	/**
	 * Loads the saved filter that is stored in a cookie as a JSON object.
	 */
	GetSavedFilter(): void {
		this.Filter(new filterDepartmentGroupsAuto);
		this.Filter().tenantId(this.MainModel().TenantId());
	
		// maybe this should be specific per tenant?
		let savedFilter: string = localStorage.getItem("saved-filter-departmentGroups-" + this.MainModel().TenantId().toLowerCase());
		if (tsUtilities.HasValue(savedFilter)) {
			this.Filter().Load(JSON.parse(savedFilter));
			this.StartFilterMonitoring();
		}
	
		this.GetDepartmentGroups();
	}
	
	/**
	 * Called when the filter changes or when the page loads to get the departmentGroups matching the current filter.
	 */
	GetDepartmentGroups(): void {
		// Load the filter
		this.Loading(true);
		if (this.Filter().recordsPerPage() == null || this.Filter().recordsPerPage() == 0) {
			this.Filter().recordsPerPage(10);
		}
	
		let success: Function = (data: server.filterDepartmentGroupsAuto) => {
			this.MainModel().Message_Hide();
			if (data != null) {
				if (data.actionResponse.result) {
					this.Filter().Load(data);
	
					this.RenderDepartmentGroupTable();
	
					this.Loading(false);
				} else {
					this.MainModel().Message_Errors(data.actionResponse.messages);
				}
			} else {
				this.MainModel().Message_Error("An unknown error occurred attempting to load Department Group records.");
			}
			this.Loading(false);
		};
	
	
		let postFilter: filterDepartmentGroupsAuto = new filterDepartmentGroupsAuto();
		postFilter.Load(JSON.parse(ko.toJSON(this.Filter)));
		postFilter.columns(null);
		postFilter.records(null);
	
		let jsonData: string = ko.toJSON(postFilter);
		localStorage.setItem("saved-filter-departmentGroups-" + this.MainModel().TenantId().toLowerCase(), jsonData);
		tsUtilities.AjaxData(window.baseURL + "api/Data/GetDepartmentGroupsFilteredAuto/", jsonData, success);
	
	}
	
	/**
	 * Method handles the callback from the paged recordset control when the page changes, the records per page changes, or when the sort order changes.
	 * @param type {string} - The type of change event (count, page, or sort)
	 * @param data {any} - The data passed back, which is a number for count and page and a field column id for the sort.
	 */
	RecordsetCallbackHandler(type: string, data: any): void {
		console.log("RecordsetCallbackHandler", type, data);
		switch (type) {
			case "count":
				window.departmentGroupsModelAuto.Filter().recordsPerPage(data);
				window.departmentGroupsModelAuto.GetDepartmentGroups();
				break;
	
			case "page":
				window.departmentGroupsModelAuto.Filter().page(data);
				window.departmentGroupsModelAuto.GetDepartmentGroups();
				break;
	
			case "sort":
				window.departmentGroupsModelAuto.UpdateSort(data);
				break;
		}
	}
	
	/**
	 * Called when the Refresh Filter button is clicked.
	 */
	RefreshDepartmentGroupFilter(): void {
		this.SaveDepartmentGroupFilter();
		this.GetDepartmentGroups();
	}
	
	/**
	 * Renders the paged recordset view. This happens when the filter loads, but also gets called for certain SignalR events
	 * to update departmentGroups that might be in the current departmentGroup list.
	 */
	RenderDepartmentGroupTable(): void {
		// Load records in the pagedRecordset
		let f: filter = new filter();
		f.Load(JSON.parse(ko.toJSON(this.Filter)));
	
		let records: any = JSON.parse(ko.toJSON(this.Filter().records));
	
		pagedRecordset.Render({
			elementId: "departmentgroup-records-auto",
			data: JSON.parse(ko.toJSON(f)),
			recordsetCallbackHandler: (type: string, data: any) => { this.RecordsetCallbackHandler(type, data); },
			actionHandlers: [
				{
					callbackHandler: (departmentGroup: server.departmentGroup) => { this.EditDepartmentGroupCallback(departmentGroup); },
					actionElement: "<button type='button' class='btn btn-sm btn-primary nowrap'>" + this.MainModel().IconAndText("DepartmentGroup.EditTableButton") + "</button>"
				}
			],
			recordNavigation: "both",
			//photoBaseUrl: photoBaseUrl,
			booleanIcon: this.MainModel().Icon("selected")
		});
	}
	
	/**
	 * Saves the current filter as a JSON object in a cookie. The items that aren't needed are nulled out first
	 * so that the column data and record data are not stored in the cookie.
	 */
	SaveDepartmentGroupFilter(): void {
		let saveFilter: filterDepartmentGroupsAuto = new filterDepartmentGroupsAuto();
		saveFilter.Load(JSON.parse(ko.toJSON(this.Filter)));
		saveFilter.actionResponse(null);
		saveFilter.columns([]);
		saveFilter.records(null);
	
		localStorage.setItem("saved-filter-departmentGroups-" + this.MainModel().TenantId().toLowerCase(), ko.toJSON(saveFilter));
	}
	
	/**
	 * Saves a departmentGroup record for the departmentGroup currently being added or edited.
	 */
	SaveDepartmentGroup(): void {
		this.MainModel().Message_Hide();
		let errors: string[] = [];
		let focus: string = "";
	
	
		if (errors.length > 0) {
			this.MainModel().Message_Errors(errors);
			tsUtilities.DelayedFocus(focus);
			return;
		}
	
		this.MainModel().UDFFieldsGetValues("DepartmentGroups", this.DepartmentGroup());
		let json: string = ko.toJSON(this.DepartmentGroup);
	
		let success: Function = (data: server.departmentGroup) => {
			this.MainModel().Message_Hide();
			if (data != null) {
				if (data.actionResponse.result) {
					this.MainModel().Nav("DepartmentGroupsAuto");
				} else {
					this.MainModel().Message_Errors(data.actionResponse.messages);
				}
			} else {
				this.MainModel().Message_Error("An unknown error occurred attempting to save this Department Group.");
			}
		};
	
		this.MainModel().Message_Saving();
		tsUtilities.AjaxData(window.baseURL + "api/Data/SaveDepartmentGroupAuto", json, success);
	}
	
	/**
	 * This model subscribes to SignalR updates from the MainModel so that departmentGroups in the departmentGroup filter list
	 * can be removed or updated when their data changes or they are deleted.
	 */
	SignalrUpdate(): void {
		//console.log("In Tenants, SignalR Update", JSON.parse(ko.toJSON(this.MainModel().SignalRUpdate)));
		switch (this.MainModel().SignalRUpdate().updateTypeString().toLowerCase()) {
			case "setting":
				let departmentGroupId: string = this.MainModel().SignalRUpdate().itemId();
	
				switch (this.MainModel().SignalRUpdate().message().toLowerCase()) {
					case "deleteddepartmentGroup":
						let records: any[] = [];
						if (this.Filter().records() != null && this.Filter().records().length > 0) {
							this.Filter().records().forEach(function (e) {
								if (e["departmentGroupId"] != departmentGroupId) {
									records.push(e);
								}
							});
						}
						this.Filter().records(records);
						this.RenderDepartmentGroupTable();
	
						break;
	
					case "saveddepartmentGroup":
						let departmentGroupData: any = this.MainModel().SignalRUpdate().object();
	
						let index: number = -1;
						let indexItem: number = -1;
						if (this.Filter().records() != null && this.Filter().records().length > 0) {
							this.Filter().records().forEach(function (e) {
								index++;
								if (e["departmentGroupId"] == departmentGroupId) {
									indexItem = index;
								}
							});
						}
	
						if (indexItem > -1) {
							this.Filter().records()[indexItem] = JSON.parse(departmentGroupData);
							this.RenderDepartmentGroupTable();
						}
				}
	
				break;
		}
	}
	
	/**
	 * Starts observing changes to the filter elements to call FilterChanged when selections are changed.
	 */
	StartFilterMonitoring(): void {
		// Subscribe to filter changed
		this.Filter().keyword.subscribe(() => { this.FilterChanged(); });                                                                                             
		this.Filter().departmentGroupName.subscribe(() => { this.FilterChanged(); });
		this.Filter().departmentGroupNameFilterExact.subscribe(() => { this.FilterChanged(); });
		this.Filter().departmentGroupId.subscribe(() => { this.FilterChanged(); });
		this.Filter().tenantId.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf01.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf02.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf03.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf04.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf05.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf06.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf07.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf08.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf09.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf10.subscribe(() => { this.FilterChanged(); });
	}
	
	
	
	/**
	 * Handles changing the sort order and updating the filter.
	 * @param dataElementName
	 */
	UpdateSort(dataElementName: string): void {
		let currentSort: string = this.Filter().sort();
		if (tsUtilities.HasValue(currentSort)) {
			currentSort = currentSort.toLowerCase();
		} else {
			currentSort = "";
		}
	
		let currentDirection: string = this.Filter().sortOrder();
		if (tsUtilities.HasValue(currentDirection)) {
			currentDirection = currentDirection.toUpperCase();
		}
	
		if (tsUtilities.HasValue(dataElementName)) {
			if (currentSort.toLowerCase() == dataElementName.toLowerCase()) {
				if (currentDirection == "ASC") {
					this.Filter().sortOrder("DESC");
				} else {
					this.Filter().sortOrder("ASC");
				}
			} else {
				this.Filter().sort(dataElementName);
				switch (dataElementName.toLowerCase()) {
					case "modified":
						this.Filter().sortOrder("DESC");
						break;
	
					default:
						this.Filter().sortOrder("ASC");
						break;
				}
			}
			this.GetDepartmentGroups();
		}
	}
	
	/**
	 * Called when the view changes in the MainModel to do any necessary work in this viewModel.
	 */
	ViewChanged(): void {
		this.Loading(false);
	
		switch (this.MainModel().CurrentView().toLowerCase()) {
			case "editdepartmentgroupauto":
				this.EditDepartmentGroup();
				break;
	
			case "newdepartmentgroupauto":
				this.AddDepartmentGroup();
				break;
	
			case "departmentgroupsauto":
				this.GetSavedFilter();
				this.Filter().tenantId(this.MainModel().TenantId());
				break;
		}
	}
}
