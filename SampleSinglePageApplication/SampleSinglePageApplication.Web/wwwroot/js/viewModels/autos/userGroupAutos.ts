/// 
/// UserGroup
/// 
/// WARNING: AUTO GENERATED FILE - DO NOT MODIFY BY HAND
/// GENERATED BY: SampleSinglePageApplication.Transcriber console application.
///   To regenerate the file, first update the path varibale in the program.cs then run the console app.
///
class UserGroupsModelAuto {
	MainModel: KnockoutObservable<MainModel> = ko.observable(window.mainModel);
	Filter: KnockoutObservable<filterUserGroupsAuto> = ko.observable(new filterUserGroupsAuto);
	UserGroup: KnockoutObservable<userGroup> = ko.observable(new userGroup);
	UserGroups: KnockoutObservableArray<userGroup> = ko.observableArray([]);
	Loading: KnockoutObservable<boolean> = ko.observable(false);
	ConfirmDeleteUserGroup: KnockoutObservable<string> = ko.observable("");
	ShowUserGroupDetails: KnockoutObservable<boolean> = ko.observable(false);
	FilterViewUserGroupType: KnockoutObservable<string> = ko.observable("list");
	GettingSavedUserGroupFilterName: KnockoutObservable<boolean> = ko.observable(false);
	SavedUserGroupFilterName: KnockoutObservable<string> = ko.observable("");

	constructor() {
		this.MainModel().View.subscribe(() => {
			this.ViewChanged();
		});

		this.MainModel().SignalRUpdate.subscribe(() => {
			this.SignalrUpdate();
		});
		//setTimeout("setupUserPhotoDropZone()", 0);
		setTimeout(() => this.StartFilterMonitoring(), 1000);
	}
	//TODO: click: DeleteSavedUserGroupFilter
	DeleteSavedUserGroupFilter(): void {
		this.MainModel().Message_Hide();
		let filterId: string = this.Filter().filterId();
		
		let success: Function = (data: server.booleanResponse) => {
			this.MainModel().Message_Hide();
			
			if (data != null) {
				if (data.result) {
					let existing: savedFilterUserGroupsAuto = ko.utils.arrayFirst(this.MainModel().User().savedFiltersUserGroupsAuto(), function (item) {
						return item.savedFilterId() == filterId;
					});
					if (existing != null) {
						this.MainModel().User().savedFiltersUserGroupsAuto.remove(existing);
					}
					
					this.ClearUserGroupFilter();
				} else {
					this.MainModel().Message_Errors(data.messages);
				}
			} else {
				this.MainModel().Message_Error("An unknown error occurred attempting to delete the saved filter.");
			}
		};
		
		this.MainModel().Message_Deleting();
		tsUtilities.AjaxData(window.baseURL + "api/Data/DeleteSavedUserGroupFilter/" + filterId.toString(), null, success);
	}
	//TODO: click: ExportUserGroup
	ExportUserGroups(): void {
		let filter: filterUserGroupsAuto = new filterUserGroupsAuto;
		filter.Load(JSON.parse(ko.toJSON(this.Filter)));
		filter.records([]);
		$("#usergroup-filter").val(ko.toJSON(filter));
		$("#usergroup-filter-download").submit();
	}

	ToggleUserGroupDetails(): void {
		if (this.ShowUserGroupDetails()) {
			this.ShowUserGroupDetails(false);
			localStorage.setItem("usergroup-details-" + this.MainModel().TenantId(), "0");
		} else {
			this.ShowUserGroupDetails(true);
			localStorage.setItem("usergroup-details-" + this.MainModel().TenantId(), "1");
		}
	
		this.RenderUserGroupTable();
	}
	
	/**
	 * Called when the Show or Hide Filter buttons are clicked.
	 */
	ToggleShowUserGroupFilter(): void {
		this.Filter().showFilters(!this.Filter().showFilters());
		this.SaveUserGroupFilter();
	}
	ToggleUserGroupView(): void {
		if (this.FilterViewUserGroupType() == "list") {
			this.FilterViewUserGroupType("card");
		} else {
			this.FilterViewUserGroupType("list");
		}
		localStorage.setItem("usergroup-view-" + this.MainModel().TenantId(), this.FilterViewUserGroupType());
		this.RenderUserGroupTable();
	}
	SaveUserGroupFilterRecord(): void {
		if (!tsUtilities.HasValue(this.SavedUserGroupFilterName())) {
			tsUtilities.DelayedFocus("saved-usergroup-filter-name");
			return;
		}
		
		let success: Function = (data: server.savedFilterUserGroupsAuto) => {
			this.MainModel().Message_Hide();
			
			if (data != null) {
				if (data.actionResponse.result) {
					let existing: savedFilterUserGroupsAuto = null;
					
					if (this.MainModel().User().savedFiltersUserGroupsAuto() != null && this.MainModel().User().savedFiltersUserGroupsAuto().length > 0) {
						existing = ko.utils.arrayFirst(this.MainModel().User().savedFiltersUserGroupsAuto(), function (item) {
							return item.savedFilterId() == data.savedFilterId;
						});
					}
					
					if (existing != null) {
						existing.Load(data);
					} else {
						let newSavedFilter: savedFilterUserGroupsAuto = new savedFilterUserGroupsAuto();
						newSavedFilter.Load(data);
						this.MainModel().User().savedFiltersUserGroupsAuto.push(newSavedFilter);
					}
					
					this.MainModel().User().savedFiltersUserGroupsAuto.sort(function (l, r) {
						return l.description() > r.description() ? 1 : -1;
					});
					
					this.GettingSavedUserGroupFilterName(false);
				} else {
					this.MainModel().Message_Errors(data.actionResponse.messages);
				}
			} else {
				this.MainModel().Message_Error("An unknown error occurred attempting to save the filter.");
			}
		};
		this.Filter().tenantId(this.MainModel().TenantId());
		
		let f: filterUserGroupsAuto = new filterUserGroupsAuto();
		f.Load(JSON.parse(ko.toJSON(this.Filter)));
		f.columns(null);
		f.records(null);
		
		let postFilter: savedFilterUserGroupsAuto = new savedFilterUserGroupsAuto();
		postFilter.description(this.SavedUserGroupFilterName());
		postFilter.savedFilterId(this.Filter().filterId());
		postFilter.userId(this.MainModel().User().userId());
		postFilter.tenantId(this.MainModel().TenantId());
		postFilter.filter(f);
		
		this.MainModel().Message_Saving();
		tsUtilities.AjaxData(window.baseURL + "api/Data/SaveSavedUserGroupFilter", ko.toJSON(postFilter), success);
	}
	/**
	 * Method fires when the URL action is "NewUserGroup"
	 */
	AddUserGroup(): void {
		this.UserGroup(new userGroup);
		this.UserGroup().groupId(this.MainModel().GuidEmpty());
		this.UserGroup().tenantId(this.MainModel().TenantId());
	
		//this.MainModel().UDFFieldsRender("edit-usergroup-udf-fields", "UserGroups", JSON.parse(ko.toJSON(this.UserGroup)));
	
		tsUtilities.DelayedFocus("edit-usergroup-groupid");
	}
	
	/**
	 * Clears the values for the userGroup search filter.
	 */
	ClearUserGroupFilter(): void {
	
		this.Loading(true);
	
		this.Filter().keyword(null);
		this.Filter().groupId(null);
		this.Filter().name(null);
		this.Filter().nameFilterExact(false);
		this.Filter().enabled(null);
		this.Filter().settings(null);
		this.Filter().udf01(null);
		this.Filter().udf02(null);
		this.Filter().udf03(null);
		this.Filter().udf04(null);
		this.Filter().udf05(null);
		this.Filter().udf06(null);
		this.Filter().udf07(null);
		this.Filter().udf08(null);
		this.Filter().udf09(null);
		this.Filter().udf10(null);
		this.Filter().page(1);
	
		//TODO: Callback method for more filtering outside of the autos
	
		this.Loading(false);
		this.GetUserGroups();
	}
	
	/**
	 * Deletes a userGroup.
	 */
	DeleteUserGroup(): void {
		let success: Function = (data: server.booleanResponse) => {
			this.MainModel().Message_Hide();
			if (data != null) {
				if (data.result) {
					this.MainModel().Nav("UserGroupsAuto");
				} else {
					this.MainModel().Message_Errors(data.messages);
				}
			} else {
				this.MainModel().Message_Error("An unknown error occurred attempting to delete the User Group.");
			}
		};
	
		this.MainModel().Message_Deleting();
		tsUtilities.AjaxData(window.baseURL + "api/Data/DeleteUserGroupAuto/" + this.MainModel().Id(), null, success);
	}
	
	/**
	 * Method fires when the URL action is "EditUserGroup"
	 */
	EditUserGroup(): void {
		this.MainModel().Message_Hide();
		let groupId: string = this.MainModel().Id();
		this.UserGroup(new userGroup);
		this.UserGroup().groupId(null);
	
		if (tsUtilities.HasValue(groupId)) {
			let success: Function = (data: server.userGroup) => {
				if (data != null) {
					if (data.actionResponse.result) {
						this.UserGroup().Load(data);
						tsUtilities.DelayedFocus("edit-userGroup-category");
	
						//this.MainModel().UDFFieldsRender("edit-userGroup-udf-fields", "UserGroups", JSON.parse(ko.toJSON(this.UserGroup)));
	
						this.Loading(false);
					} else {
						this.MainModel().Message_Errors(data.actionResponse.messages);
					}
				} else {
					this.MainModel().Message_Error("An unknown error occurred attempting to load the User Group record.");
				}
			};
	
			this.Loading(true);
			tsUtilities.AjaxData(window.baseURL + "api/data/GetUserGroupAuto/" + groupId, null, success);
		} else {
			this.MainModel().Message_Error("No valid GroupId received.");
		}
	
	}
	
	/**
	 * The callback method used by the paged recordset control to handle the action on the record.
	 * @param record {server.userGroup} - The object being passed is a JSON object, not an observable.
	 */
	EditUserGroupCallback(record: server.userGroup): void {
		if (record != undefined && record != null && tsUtilities.HasValue(record.groupId)) {
			this.MainModel().Nav("EditUserGroupAuto", record.groupId);
		}
	}
	
	/**
	 * Called when the userGroup filter changes to reload userGroup records, unless the filter is changing because
	 * records are being reloaded.
	 */
	FilterChanged(): void {
		if (!this.Loading()) {
			this.GetUserGroups();
		}
	}
	
	/**
	 * Loads the saved filter that is stored in a cookie as a JSON object.
	 */
	GetSavedFilter(): void {
		this.Filter(new filterUserGroupsAuto);
		this.Filter().tenantId(this.MainModel().TenantId());
	
		// maybe this should be specific per tenant?
		let savedFilter: string = localStorage.getItem("saved-filter-userGroups-" + this.MainModel().TenantId().toLowerCase());
		if (tsUtilities.HasValue(savedFilter)) {
			this.Filter().Load(JSON.parse(savedFilter));
			this.StartFilterMonitoring();
		}
	
		this.GetUserGroups();
	}
	
	/**
	 * Called when the filter changes or when the page loads to get the userGroups matching the current filter.
	 */
	GetUserGroups(): void {
		// Load the filter
		this.Loading(true);
		if (this.Filter().recordsPerPage() == null || this.Filter().recordsPerPage() == 0) {
			this.Filter().recordsPerPage(10);
		}
	
		let success: Function = (data: server.filterUserGroupsAuto) => {
			this.MainModel().Message_Hide();
			if (data != null) {
				if (data.actionResponse.result) {
					this.Filter().Load(data);
	
					this.RenderUserGroupTable();
	
					this.Loading(false);
				} else {
					this.MainModel().Message_Errors(data.actionResponse.messages);
				}
			} else {
				this.MainModel().Message_Error("An unknown error occurred attempting to load User Group records.");
			}
			this.Loading(false);
		};
	
	
		let postFilter: filterUserGroupsAuto = new filterUserGroupsAuto();
		postFilter.Load(JSON.parse(ko.toJSON(this.Filter)));
		postFilter.columns(null);
		postFilter.records(null);
	
		let jsonData: string = ko.toJSON(postFilter);
		localStorage.setItem("saved-filter-userGroups-" + this.MainModel().TenantId().toLowerCase(), jsonData);
		tsUtilities.AjaxData(window.baseURL + "api/Data/GetUserGroupsFilteredAuto/", jsonData, success);
	
	}
	
	/**
	 * Method handles the callback from the paged recordset control when the page changes, the records per page changes, or when the sort order changes.
	 * @param type {string} - The type of change event (count, page, or sort)
	 * @param data {any} - The data passed back, which is a number for count and page and a field column id for the sort.
	 */
	RecordsetCallbackHandler(type: string, data: any): void {
		console.log("RecordsetCallbackHandler", type, data);
		switch (type) {
			case "count":
				window.userGroupsModelAuto.Filter().recordsPerPage(data);
				window.userGroupsModelAuto.GetUserGroups();
				break;
	
			case "page":
				window.userGroupsModelAuto.Filter().page(data);
				window.userGroupsModelAuto.GetUserGroups();
				break;
	
			case "sort":
				window.userGroupsModelAuto.UpdateSort(data);
				break;
		}
	}
	
	/**
	 * Called when the Refresh Filter button is clicked.
	 */
	RefreshUserGroupFilter(): void {
		this.SaveUserGroupFilter();
		this.GetUserGroups();
	}
	
	/**
	 * Renders the paged recordset view. This happens when the filter loads, but also gets called for certain SignalR events
	 * to update userGroups that might be in the current userGroup list.
	 */
	RenderUserGroupTable(): void {
		// Load records in the pagedRecordset
		let f: filter = new filter();
		f.Load(JSON.parse(ko.toJSON(this.Filter)));
	
		let records: any = JSON.parse(ko.toJSON(this.Filter().records));
	
		pagedRecordset.Render({
			elementId: "usergroup-records-auto",
			data: JSON.parse(ko.toJSON(f)),
			recordsetCallbackHandler: (type: string, data: any) => { this.RecordsetCallbackHandler(type, data); },
			actionHandlers: [
				{
					callbackHandler: (userGroup: server.userGroup) => { this.EditUserGroupCallback(userGroup); },
					actionElement: "<button type='button' class='btn btn-sm btn-primary nowrap'>" + this.MainModel().IconAndText("UserGroup.EditTableButton") + "</button>"
				}
			],
			recordNavigation: "both",
			//photoBaseUrl: photoBaseUrl,
			booleanIcon: this.MainModel().Icon("selected")
		});
	}
	
	/**
	 * Saves the current filter as a JSON object in a cookie. The items that aren't needed are nulled out first
	 * so that the column data and record data are not stored in the cookie.
	 */
	SaveUserGroupFilter(): void {
		let saveFilter: filterUserGroupsAuto = new filterUserGroupsAuto();
		saveFilter.Load(JSON.parse(ko.toJSON(this.Filter)));
		saveFilter.actionResponse(null);
		saveFilter.columns([]);
		saveFilter.records(null);
	
		localStorage.setItem("saved-filter-userGroups-" + this.MainModel().TenantId().toLowerCase(), ko.toJSON(saveFilter));
	}
	
	/**
	 * Saves a userGroup record for the userGroup currently being added or edited.
	 */
	SaveUserGroup(): void {
		this.MainModel().Message_Hide();
		let errors: string[] = [];
		let focus: string = "";
	
	//if (!tsUtilities.HasValue(this.UserGroup().tenantId())) {
	//    errors.push(this.MainModel().MissingRequiredField(this.MainModel().Language("UserGroup.TenantId")));
	//    if (focus == "") { focus = "edit-userGroup-tenantid"; }
	//}
	//if (!tsUtilities.HasValue(this.UserGroup().enabled())) {
	//    errors.push(this.MainModel().MissingRequiredField(this.MainModel().Language("UserGroup.Enabled")));
	//    if (focus == "") { focus = "edit-userGroup-enabled"; }
	//}
	//if (!tsUtilities.HasValue(this.UserGroup().users())) {
	//    errors.push(this.MainModel().MissingRequiredField(this.MainModel().Language("UserGroup.Users")));
	//    if (focus == "") { focus = "edit-userGroup-users"; }
	//}
	
		if (errors.length > 0) {
			this.MainModel().Message_Errors(errors);
			tsUtilities.DelayedFocus(focus);
			return;
		}
	
		this.MainModel().UDFFieldsGetValues("UserGroups", this.UserGroup());
		let json: string = ko.toJSON(this.UserGroup);
	
		let success: Function = (data: server.userGroup) => {
			this.MainModel().Message_Hide();
			if (data != null) {
				if (data.actionResponse.result) {
					this.MainModel().Nav("UserGroupsAuto");
				} else {
					this.MainModel().Message_Errors(data.actionResponse.messages);
				}
			} else {
				this.MainModel().Message_Error("An unknown error occurred attempting to save this User Group.");
			}
		};
	
		this.MainModel().Message_Saving();
		tsUtilities.AjaxData(window.baseURL + "api/Data/SaveUserGroupAuto", json, success);
	}
	
	/**
	 * This model subscribes to SignalR updates from the MainModel so that userGroups in the userGroup filter list
	 * can be removed or updated when their data changes or they are deleted.
	 */
	SignalrUpdate(): void {
		//console.log("In Tenants, SignalR Update", JSON.parse(ko.toJSON(this.MainModel().SignalRUpdate)));
		switch (this.MainModel().SignalRUpdate().updateTypeString().toLowerCase()) {
			case "setting":
				let groupId: string = this.MainModel().SignalRUpdate().itemId();
	
				switch (this.MainModel().SignalRUpdate().message().toLowerCase()) {
					case "deleteduserGroup":
						let records: any[] = [];
						if (this.Filter().records() != null && this.Filter().records().length > 0) {
							this.Filter().records().forEach(function (e) {
								if (e["groupId"] != groupId) {
									records.push(e);
								}
							});
						}
						this.Filter().records(records);
						this.RenderUserGroupTable();
	
						break;
	
					case "saveduserGroup":
						let userGroupData: any = this.MainModel().SignalRUpdate().object();
	
						let index: number = -1;
						let indexItem: number = -1;
						if (this.Filter().records() != null && this.Filter().records().length > 0) {
							this.Filter().records().forEach(function (e) {
								index++;
								if (e["groupId"] == groupId) {
									indexItem = index;
								}
							});
						}
	
						if (indexItem > -1) {
							this.Filter().records()[indexItem] = JSON.parse(userGroupData);
							this.RenderUserGroupTable();
						}
				}
	
				break;
		}
	}
	
	/**
	 * Starts observing changes to the filter elements to call FilterChanged when selections are changed.
	 */
	StartFilterMonitoring(): void {
		// Subscribe to filter changed
		this.Filter().keyword.subscribe(() => { this.FilterChanged(); });                                                                                             
		this.Filter().name.subscribe(() => { this.FilterChanged(); });
		this.Filter().nameFilterExact.subscribe(() => { this.FilterChanged(); });
		this.Filter().groupId.subscribe(() => { this.FilterChanged(); });
		this.Filter().tenantId.subscribe(() => { this.FilterChanged(); });
		this.Filter().enabled.subscribe(() => { this.FilterChanged(); });
		this.Filter().settings.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf01.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf02.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf03.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf04.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf05.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf06.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf07.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf08.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf09.subscribe(() => { this.FilterChanged(); });
		this.Filter().udf10.subscribe(() => { this.FilterChanged(); });
	}
	
	
	
	/**
	 * Handles changing the sort order and updating the filter.
	 * @param dataElementName
	 */
	UpdateSort(dataElementName: string): void {
		let currentSort: string = this.Filter().sort();
		if (tsUtilities.HasValue(currentSort)) {
			currentSort = currentSort.toLowerCase();
		} else {
			currentSort = "";
		}
	
		let currentDirection: string = this.Filter().sortOrder();
		if (tsUtilities.HasValue(currentDirection)) {
			currentDirection = currentDirection.toUpperCase();
		}
	
		if (tsUtilities.HasValue(dataElementName)) {
			if (currentSort.toLowerCase() == dataElementName.toLowerCase()) {
				if (currentDirection == "ASC") {
					this.Filter().sortOrder("DESC");
				} else {
					this.Filter().sortOrder("ASC");
				}
			} else {
				this.Filter().sort(dataElementName);
				switch (dataElementName.toLowerCase()) {
					case "modified":
						this.Filter().sortOrder("DESC");
						break;
	
					default:
						this.Filter().sortOrder("ASC");
						break;
				}
			}
			this.GetUserGroups();
		}
	}
	
	/**
	 * Called when the view changes in the MainModel to do any necessary work in this viewModel.
	 */
	ViewChanged(): void {
		this.Loading(false);
	
		switch (this.MainModel().CurrentView().toLowerCase()) {
			case "editusergroupauto":
				this.EditUserGroup();
				break;
	
			case "newusergroupauto":
				this.AddUserGroup();
				break;
	
			case "usergroupsauto":
				this.GetSavedFilter();
				this.Filter().tenantId(this.MainModel().TenantId());
				break;
		}
	}
}
